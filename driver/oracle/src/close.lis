
Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

Open file: /workspaces/liborm/driver/oracle/src/close.pc
Error at line 0, column 0 in file /workspaces/liborm/driver/oracle/src/close.pc
PCC-S-02201, Encountered the symbol "<eof>" when expecting one of the following
:

   ; { } ( * & + - ~ ! ^ ++ -- ... auto, break, bool, case,
   char, const, continue, default, do, double, enum, extern,
   float, for, goto, if, int, inline, long, ulong_varchar,
   OCIBFileLocator OCIBlobLocator, OCIClobLocator, OCIDateTime,
   OCIExtProcContext, OCIInterval, OCIRowid, OCIDate, OCINumber,
   OCIRaw, OCIString, register, return, short, signed, sizeof,
   sql_context, sql_cursor, static, struct, switch, typedef,
   union, unsigned, utext, uvarchar, varchar, void, volatile,
   while, alignas, alignof, alignof, generic, noreturn,
   thread_local, an identifier, a typedef name,
   a precompiled header, a quoted string, a numeric constant,
   exec oracle, exec oracle begin, exec, exec sql,
   exec sql begin, exec sql type, exec sql var,
   exec sql include,

Error at line 0, column 0 in file /workspaces/liborm/driver/oracle/src/close.pc
PCC-F-02102, Fatal error while doing C preprocessing
Open file: /usr/include/stdio.h
     1  /* Define ISO C stdio on top of C++ iostreams.
     2     Copyright (C) 1991-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   *      ISO C99 Standard: 7.19 Input/output     <stdio.h>
    21   */
    22  
    23  #ifndef _STDIO_H
    24  #define _STDIO_H        1
    25  
    26  #define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
Open file: /usr/include/bits/libc-header-start.h
     1  /* Handle feature test macros at the start of a header.
     2     Copyright (C) 2016-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /* This header is internal to glibc and should not be included outside
    20     of glibc headers.  Headers including it must define
    21     __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
    22     cannot have multiple include guards because ISO C feature test
    23     macros depend on the definition of the macro when an affected
    24     header is included, not when the first system header is

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    25     included.  */
    26  
    27  #ifndef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
    28  # error "Never include <bits/libc-header-start.h> directly."
    29  #endif
    30  
    31  #undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
    32  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
Open file: /usr/include/stdc-predef.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _STDC_PREDEF_H
    19  #define _STDC_PREDEF_H  1
    20  
    21  /* This header is separate from features.h so that the compiler can
    22     include it implicitly at the start of every compilation.  It must
    23     not itself include <features.h> or any other header that includes
    24     <features.h> because the implicit include comes before any feature
    25     test macros that may be defined in a source file before it first
    26     explicitly includes a system header.  GCC knows the name of this
    27     header in order to preinclude it.  */
    28  
    29  /* glibc's intent is to support the IEC 559 math functionality, real
    30     and complex.  If the GCC (4.9 and later) predefined macros
    31     specifying compiler intent are available, use them to determine
    32     whether the overall intent is to support these features; otherwise,
    33     presume an older compiler has intent to support these features and
    34     define these macros by default.  */
    35  
    36  #ifdef __GCC_IEC_559
    37  # if __GCC_IEC_559 > 0
    38  #  define __STDC_IEC_559__              1
    39  # endif
    40  #else
    41  # define __STDC_IEC_559__               1
    42  #endif
    43  
    44  #ifdef __GCC_IEC_559_COMPLEX
    45  # if __GCC_IEC_559_COMPLEX > 0
    46  #  define __STDC_IEC_559_COMPLEX__      1
    47  # endif
    48  #else
    49  # define __STDC_IEC_559_COMPLEX__       1
    50  #endif
    51  
    52  /* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard i
        s
    53     synchronized with ISO/IEC 10646:2017, fifth edition, plus
    54     the following additions from Amendment 1 to the fifth edition:
    55     - 56 emoji characters
    56     - 285 hentaigana
    57     - 3 additional Zanabazar Square characters */
    58  #define __STDC_ISO_10646__              201706L
    59  
    60  #endif
Close file: /usr/include/stdc-predef.h
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   427  # ifndef _SYS_CDEFS_H
Open file: /usr/include/sys/cdefs.h
     1  /* Copyright (C) 1992-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _SYS_CDEFS_H
    19  #define _SYS_CDEFS_H    1
    20  
    21  /* We are almost always included from features.h. */
    22  #ifndef _FEATURES_H
    23  # include <features.h>
    24  #endif
    25  
    26  /* The GNU libc does not support any K&R compilers or the traditional m
        ode
    27     of ISO C compilers anymore.  Check for some of the combinations not
    28     anymore supported.  */
    29  #if defined __GNUC__ && !defined __STDC__
    30  # error "You need a ISO C conforming compiler to use the glibc headers"
    31  #endif
    32  
    33  /* Some user header file might have defined this before.  */
    34  #undef  __P
    35  #undef  __PMT
    36  
    37  #ifdef __GNUC__
    38  
    39  /* All functions, except those with callbacks or those that
    40     synchronize memory, are leaf functions.  */
    41  # if __GNUC_PREREQ (4, 6) && !defined _LIBC
    42  #  define __LEAF , __leaf__
    43  #  define __LEAF_ATTR __attribute__ ((__leaf__))
    44  # else
    45  #  define __LEAF
    46  #  define __LEAF_ATTR
    47  # endif
    48  
    49  /* GCC can always grok prototypes.  For C++ programs we add throw()
    50     to help it optimize the function calls.  But this works only with
    51     gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
    52     as non-throwing using a function attribute since programs can use
    53     the -fexceptions options for C code as well.  */
    54  # if !defined __cplusplus && __GNUC_PREREQ (3, 3)
    55  #  define __THROW       __attribute__ ((__nothrow__ __LEAF))
    56  #  define __THROWNL     __attribute__ ((__nothrow__))
    57  #  define __NTH(fct)    __attribute__ ((__nothrow__ __LEAF)) fct
    58  #  define __NTHNL(fct)  __attribute__ ((__nothrow__)) fct
    59  # else
    60  #  if defined __cplusplus && __GNUC_PREREQ (2,8)
    61  #   define __THROW      throw ()
    62  #   define __THROWNL    throw ()
    63  #   define __NTH(fct)   __LEAF_ATTR fct throw ()
    64  #   define __NTHNL(fct) fct throw ()
    65  #  else
    66  #   define __THROW
    67  #   define __THROWNL
    68  #   define __NTH(fct)   fct
    69  #   define __NTHNL(fct) fct
    70  #  endif
    71  # endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    72  
    73  #else   /* Not GCC.  */
    74  
    75  # if (defined __cplusplus                                               
        \
    76        || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
    77  #  define __inline      inline
    78  # else
    79  #  define __inline              /* No inline functions.  */
    80  # endif
    81  
    82  # define __THROW
    83  # define __THROWNL
    84  # define __NTH(fct)     fct
    85  
    86  #endif  /* GCC.  */
    87  
    88  /* Compilers that are not clang may object to
    89         #if defined __clang__ && __has_extension(...)
    90     even though they do not need to evaluate the right-hand side of the 
        &&.  */
    91  #if defined __clang__ && defined __has_extension
    92  # define __glibc_clang_has_extension(ext) __has_extension (ext)
    93  #else
    94  # define __glibc_clang_has_extension(ext) 0
    95  #endif
    96  
    97  /* These two macros are not used in glibc anymore.  They are kept here
    98     only because some other projects expect the macros to be defined.  *
        /
    99  #define __P(args)       args
   100  #define __PMT(args)     args
   101  
   102  /* For these things, GCC behaves the ANSI way normally,
   103     and the non-ANSI way under -traditional.  */
   104  
   105  #define __CONCAT(x,y)   x ## y
   106  #define __STRING(x)     #x
   107  
   108  /* This is not a typedef so `const __ptr_t' does the right thing.  */
   109  #define __ptr_t void *
   110  
   111  
   112  /* C++ needs to know that types and declarations are C, not C++.  */
   113  #ifdef  __cplusplus
   114  # define __BEGIN_DECLS  extern "C" {
   115  # define __END_DECLS    }
   116  #else
   117  # define __BEGIN_DECLS
   118  # define __END_DECLS
   119  #endif
   120  
   121  
   122  /* Fortify support.  */
   123  #define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
   124  #define __bos0(ptr) __builtin_object_size (ptr, 0)
   125  
   126  #if __GNUC_PREREQ (4,3)
   127  # define __warndecl(name, msg) \
   128    extern void name (void) __attribute__((__warning__ (msg)))
   129  # define __warnattr(msg) __attribute__((__warning__ (msg)))
   130  # define __errordecl(name, msg) \
   131    extern void name (void) __attribute__((__error__ (msg)))
   132  #else
   133  # define __warndecl(name, msg) extern void name (void)
   134  # define __warnattr(msg)
   135  # define __errordecl(name, msg) extern void name (void)
   136  #endif
   137  
   138  /* Support for flexible arrays.
   139     Headers that should use flexible arrays only if they're "real"
   140     (e.g. only if they won't affect sizeof()) should test
   141     #if __glibc_c99_flexarr_available.  */
   142  #if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   143  # define __flexarr      []
   144  # define __glibc_c99_flexarr_available 1
   145  #elif __GNUC_PREREQ (2,97)
   146  /* GCC 2.97 supports C99 flexible array members as an extension,
   147     even when in C89 mode or compiling C++ (any version).  */
   148  # define __flexarr      []
   149  # define __glibc_c99_flexarr_available 1
   150  #elif defined __GNUC__
   151  /* Pre-2.97 GCC did not support C99 flexible arrays but did have
   152     an equivalent extension with slightly different notation.  */
   153  # define __flexarr      [0]
   154  # define __glibc_c99_flexarr_available 1
   155  #else
   156  /* Some other non-C99 compiler.  Approximate with [1].  */
   157  # define __flexarr      [1]
   158  # define __glibc_c99_flexarr_available 0
   159  #endif
   160  
   161  
   162  /* __asm__ ("xyz") is used throughout the headers to rename functions
   163     at the assembly language level.  This is wrapped by the __REDIRECT
   164     macro, in order to support compilers that can do this some other
   165     way.  When compilers don't support asm-names at all, we have to do
   166     preprocessor tricks instead (which don't have exactly the right
   167     semantics, but it's the best we can do).
   168  
   169     Example:
   170     int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */
   171  
   172  #if defined __GNUC__ && __GNUC__ >= 2
   173  
   174  # define __REDIRECT(name, proto, alias) name proto __asm__ (__ASMNAME (
        #alias))
   175  # ifdef __cplusplus
   176  #  define __REDIRECT_NTH(name, proto, alias) \
   177       name proto __THROW __asm__ (__ASMNAME (#alias))
   178  #  define __REDIRECT_NTHNL(name, proto, alias) \
   179       name proto __THROWNL __asm__ (__ASMNAME (#alias))
   180  # else
   181  #  define __REDIRECT_NTH(name, proto, alias) \
   182       name proto __asm__ (__ASMNAME (#alias)) __THROW
   183  #  define __REDIRECT_NTHNL(name, proto, alias) \
   184       name proto __asm__ (__ASMNAME (#alias)) __THROWNL
   185  # endif
   186  # define __ASMNAME(cname)  __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
   187  # define __ASMNAME2(prefix, cname) __STRING (prefix) cname
   188  
   189  /*
   190  #elif __SOME_OTHER_COMPILER__
   191  
   192  # define __REDIRECT(name, proto, alias) name proto; \
   193          _Pragma("let " #name " = " #alias)
   194  */
   195  #endif
   196  
   197  /* GCC has various useful declarations that can be made with the
   198     `__attribute__' syntax.  All of the ways we use this do fine if
   199     they are omitted for compilers that don't understand it. */
   200  #if !defined __GNUC__ || __GNUC__ < 2
   201  # define __attribute__(xyz)     /* Ignore */
   202  #endif
   203  
   204  /* At some point during the gcc 2.96 development the `malloc' attribute
   205     for functions was introduced.  We don't want to use it unconditional
        ly
   206     (although this would be possible) since it generates warnings.  */
   207  #if __GNUC_PREREQ (2,96)
   208  # define __attribute_malloc__ __attribute__ ((__malloc__))
   209  #else
   210  # define __attribute_malloc__ /* Ignore */
   211  #endif
   212  
   213  /* Tell the compiler which arguments to an allocation function
   214     indicate the size of the allocation.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   215  #if __GNUC_PREREQ (4, 3)
   216  # define __attribute_alloc_size__(params) \
   217    __attribute__ ((__alloc_size__ params))
   218  #else
   219  # define __attribute_alloc_size__(params) /* Ignore.  */
   220  #endif
   221  
   222  /* At some point during the gcc 2.96 development the `pure' attribute
   223     for functions was introduced.  We don't want to use it unconditional
        ly
   224     (although this would be possible) since it generates warnings.  */
   225  #if __GNUC_PREREQ (2,96)
   226  # define __attribute_pure__ __attribute__ ((__pure__))
   227  #else
   228  # define __attribute_pure__ /* Ignore */
   229  #endif
   230  
   231  /* This declaration tells the compiler that the value is constant.  */
   232  #if __GNUC_PREREQ (2,5)
   233  # define __attribute_const__ __attribute__ ((__const__))
   234  #else
   235  # define __attribute_const__ /* Ignore */
   236  #endif
   237  
   238  /* At some point during the gcc 3.1 development the `used' attribute
   239     for functions was introduced.  We don't want to use it unconditional
        ly
   240     (although this would be possible) since it generates warnings.  */
   241  #if __GNUC_PREREQ (3,1)
   242  # define __attribute_used__ __attribute__ ((__used__))
   243  # define __attribute_noinline__ __attribute__ ((__noinline__))
   244  #else
   245  # define __attribute_used__ __attribute__ ((__unused__))
   246  # define __attribute_noinline__ /* Ignore */
   247  #endif
   248  
   249  /* Since version 3.2, gcc allows marking deprecated functions.  */
   250  #if __GNUC_PREREQ (3,2)
   251  # define __attribute_deprecated__ __attribute__ ((__deprecated__))
   252  #else
   253  # define __attribute_deprecated__ /* Ignore */
   254  #endif
   255  
   256  /* Since version 4.5, gcc also allows one to specify the message printe
        d
   257     when a deprecated function is used.  clang claims to be gcc 4.2, but
   258     may also support this feature.  */
   259  #if __GNUC_PREREQ (4,5) || \
   260      __glibc_clang_has_extension (__attribute_deprecated_with_message__)
   261  # define __attribute_deprecated_msg__(msg) \
   262           __attribute__ ((__deprecated__ (msg)))
   263  #else
   264  # define __attribute_deprecated_msg__(msg) __attribute_deprecated__
   265  #endif
   266  
   267  /* At some point during the gcc 2.8 development the `format_arg' attrib
        ute
   268     for functions was introduced.  We don't want to use it unconditional
        ly
   269     (although this would be possible) since it generates warnings.
   270     If several `format_arg' attributes are given for the same function, 
        in
   271     gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   272     all designated arguments are considered.  */
   273  #if __GNUC_PREREQ (2,8)
   274  # define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)
        ))
   275  #else
   276  # define __attribute_format_arg__(x) /* Ignore */
   277  #endif
   278  
   279  /* At some point during the gcc 2.97 development the `strfmon' format
   280     attribute for functions was introduced.  We don't want to use it
   281     unconditionally (although this would be possible) since it

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   282     generates warnings.  */
   283  #if __GNUC_PREREQ (2,97)
   284  # define __attribute_format_strfmon__(a,b) \
   285    __attribute__ ((__format__ (__strfmon__, a, b)))
   286  #else
   287  # define __attribute_format_strfmon__(a,b) /* Ignore */
   288  #endif
   289  
   290  /* The nonull function attribute allows to mark pointer parameters whic
        h
   291     must not be NULL.  */
   292  #if __GNUC_PREREQ (3,3)
   293  # define __nonnull(params) __attribute__ ((__nonnull__ params))
   294  #else
   295  # define __nonnull(params)
   296  #endif
   297  
   298  /* If fortification mode, we warn about unused results of certain
   299     function calls which can lead to problems.  */
   300  #if __GNUC_PREREQ (3,4)
   301  # define __attribute_warn_unused_result__ \
   302     __attribute__ ((__warn_unused_result__))
   303  # if __USE_FORTIFY_LEVEL > 0
   304  #  define __wur __attribute_warn_unused_result__
   305  # endif
   306  #else
   307  # define __attribute_warn_unused_result__ /* empty */
   308  #endif
   309  #ifndef __wur
   310  # define __wur /* Ignore */
   311  #endif
   312  
   313  /* Forces a function to be always inlined.  */
   314  #if __GNUC_PREREQ (3,2)
   315  /* The Linux kernel defines __always_inline in stddef.h (283d7573), and
   316     it conflicts with this definition.  Therefore undefine it first to
   317     allow either header to be included first.  */
   318  # undef __always_inline
   319  # define __always_inline __inline __attribute__ ((__always_inline__))
   320  #else
   321  # undef __always_inline
   322  # define __always_inline __inline
   323  #endif
   324  
   325  /* Associate error messages with the source location of the call site r
        ather
   326     than with the source location inside the function.  */
   327  #if __GNUC_PREREQ (4,3)
   328  # define __attribute_artificial__ __attribute__ ((__artificial__))
   329  #else
   330  # define __attribute_artificial__ /* Ignore */
   331  #endif
   332  
   333  /* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   334     inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_
        INLINE__
   335     or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc 
        versions
   336     older than 4.3 may define these macros and still not guarantee GNU i
        nlining
   337     semantics.
   338  
   339     clang++ identifies itself as gcc-4.2, but has support for GNU inlini
        ng
   340     semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ 
        and
   341     __GNUC_GNU_INLINE__ macro definitions.  */
   342  #if (!defined __cplusplus || __GNUC_PREREQ (4,3) \
   343       || (defined __clang__ && (defined __GNUC_STDC_INLINE__ \
   344                                 || defined __GNUC_GNU_INLINE__)))
   345  # if defined __GNUC_STDC_INLINE__ || defined __cplusplus
   346  #  define __extern_inline extern __inline __attribute__ ((__gnu_inline_
        _))
   347  #  define __extern_always_inline \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   348    extern __always_inline __attribute__ ((__gnu_inline__))
   349  # else
   350  #  define __extern_inline extern __inline
   351  #  define __extern_always_inline extern __always_inline
   352  # endif
   353  #endif
   354  
   355  #ifdef __extern_always_inline
   356  # define __fortify_function __extern_always_inline __attribute_artifici
        al__
   357  #endif
   358  
   359  /* GCC 4.3 and above allow passing all anonymous arguments of an
   360     __extern_always_inline function to some other vararg function.  */
   361  #if __GNUC_PREREQ (4,3)
   362  # define __va_arg_pack() __builtin_va_arg_pack ()
   363  # define __va_arg_pack_len() __builtin_va_arg_pack_len ()
   364  #endif
   365  
   366  /* It is possible to compile containing GCC extensions even if GCC is
   367     run in pedantic mode if the uses are carefully marked using the
   368     `__extension__' keyword.  But this is not generally available before
   369     version 2.8.  */
   370  #if !__GNUC_PREREQ (2,8)
   371  # define __extension__          /* Ignore */
   372  #endif
   373  
   374  /* __restrict is known in EGCS 1.2 and above. */
   375  #if !__GNUC_PREREQ (2,92)
   376  # if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
   377  #  define __restrict    restrict
   378  # else
   379  #  define __restrict    /* Ignore */
   380  # endif
   381  #endif
   382  
   383  /* ISO C99 also allows to declare arrays as non-overlapping.  The synta
        x is
   384       array_name[restrict]
   385     GCC 3.1 supports this.  */
   386  #if __GNUC_PREREQ (3,1) && !defined __GNUG__
   387  # define __restrict_arr __restrict
   388  #else
   389  # ifdef __GNUC__
   390  #  define __restrict_arr        /* Not supported in old GCC.  */
   391  # else
   392  #  if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
   393  #   define __restrict_arr       restrict
   394  #  else
   395  /* Some other non-C99 compiler.  */
   396  #   define __restrict_arr       /* Not supported.  */
   397  #  endif
   398  # endif
   399  #endif
   400  
   401  #if __GNUC__ >= 3
   402  # define __glibc_unlikely(cond) __builtin_expect ((cond), 0)
   403  # define __glibc_likely(cond)   __builtin_expect ((cond), 1)
   404  #else
   405  # define __glibc_unlikely(cond) (cond)
   406  # define __glibc_likely(cond)   (cond)
   407  #endif
   408  
   409  #ifdef __has_attribute
   410  # define __glibc_has_attribute(attr)    __has_attribute (attr)
   411  #else
   412  # define __glibc_has_attribute(attr)    0
   413  #endif
   414  
   415  #if (!defined _Noreturn \
   416       && (defined __STDC_VERSION__ ? __STDC_VERSION__ : 0) < 201112 \
   417       &&  !__GNUC_PREREQ (4,7))
   418  # if __GNUC_PREREQ (2,8)
   419  #  define _Noreturn __attribute__ ((__noreturn__))

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   420  # else
   421  #  define _Noreturn
   422  # endif
   423  #endif
   424  
   425  #if __GNUC_PREREQ (8, 0)
   426  /* Describes a char array whose address can safely be passed as the fir
        st
   427     argument to strncpy and strncat, as the char array is not necessaril
        y
   428     a NUL-terminated string.  */
   429  # define __attribute_nonstring__ __attribute__ ((__nonstring__))
   430  #else
   431  # define __attribute_nonstring__
   432  #endif
   433  
   434  #if (!defined _Static_assert && !defined __cplusplus \
   435       && (defined __STDC_VERSION__ ? __STDC_VERSION__ : 0) < 201112 \
   436       && (!__GNUC_PREREQ (4, 6) || defined __STRICT_ANSI__))
   437  # define _Static_assert(expr, diagnostic) \
   438      extern int (*__Static_assert_function (void)) \
   439        [!!sizeof (struct { int __error_if_negative: (expr) ? 2 : -1; })]
   440  #endif
   441  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #define __WORDSIZE32_SIZE_ULONG         0
     8  #define __WORDSIZE32_PTRDIFF_LONG       0
     9  #endif
    10  
    11  #ifdef __x86_64__
    12  # define __WORDSIZE_TIME64_COMPAT32     1
    13  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    14  # define __SYSCALL_WORDSIZE             64
    15  #else
    16  # define __WORDSIZE_TIME64_COMPAT32     0
    17  #endif
Close file: /usr/include/bits/wordsize.h
   442  #include <bits/wordsize.h>
Open file: /usr/include/bits/long-double.h
     1  /* Properties of long double type.  ldbl-96 version.
     2     Copyright (C) 2016-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License  published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /* long double is distinct from double, so there is nothing to
    20     define here.  */
Close file: /usr/include/bits/long-double.h
   443  #include <bits/long-double.h>
   444  
   445  #if defined __LONG_DOUBLE_MATH_OPTIONAL && defined __NO_LONG_DOUBLE_MAT
        H
   446  # define __LDBL_COMPAT 1
   447  # ifdef __REDIRECT
   448  #  define __LDBL_REDIR1(name, proto, alias) __REDIRECT (name, proto, al
        ias)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   449  #  define __LDBL_REDIR(name, proto) \
   450    __LDBL_REDIR1 (name, proto, __nldbl_##name)
   451  #  define __LDBL_REDIR1_NTH(name, proto, alias) __REDIRECT_NTH (name, p
        roto, alias)
   452  #  define __LDBL_REDIR_NTH(name, proto) \
   453    __LDBL_REDIR1_NTH (name, proto, __nldbl_##name)
   454  #  define __LDBL_REDIR1_DECL(name, alias) \
   455    extern __typeof (name) name __asm (__ASMNAME (#alias));
   456  #  define __LDBL_REDIR_DECL(name) \
   457    extern __typeof (name) name __asm (__ASMNAME ("__nldbl_" #name));
   458  #  define __REDIRECT_LDBL(name, proto, alias) \
   459    __LDBL_REDIR1 (name, proto, __nldbl_##alias)
   460  #  define __REDIRECT_NTH_LDBL(name, proto, alias) \
   461    __LDBL_REDIR1_NTH (name, proto, __nldbl_##alias)
   462  # endif
   463  #endif
   464  #if !defined __LDBL_COMPAT || !defined __REDIRECT
   465  # define __LDBL_REDIR1(name, proto, alias) name proto
   466  # define __LDBL_REDIR(name, proto) name proto
   467  # define __LDBL_REDIR1_NTH(name, proto, alias) name proto __THROW
   468  # define __LDBL_REDIR_NTH(name, proto) name proto __THROW
   469  # define __LDBL_REDIR_DECL(name)
   470  # ifdef __REDIRECT
   471  #  define __REDIRECT_LDBL(name, proto, alias) __REDIRECT (name, proto, 
        alias)
   472  #  define __REDIRECT_NTH_LDBL(name, proto, alias) \
   473    __REDIRECT_NTH (name, proto, alias)
   474  # endif
   475  #endif
   476  
   477  /* __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
   478     intended for use in preprocessor macros.
   479  
   480     Note: MESSAGE must be a _single_ string; concatenation of string
   481     literals is not supported.  */
   482  #if __GNUC_PREREQ (4,8) || __glibc_clang_prereq (3,5)
   483  # define __glibc_macro_warning1(message) _Pragma (#message)
   484  # define __glibc_macro_warning(message) \
   485    __glibc_macro_warning1 (GCC warning message)
   486  #else
   487  # define __glibc_macro_warning(msg)
   488  #endif
   489  
   490  /* Generic selection (ISO C11) is a C-only feature, available in GCC
   491     since version 4.9.  Previous versions do not provide generic
   492     selection, even though they might set __STDC_VERSION__ to 201112L,
   493     when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
   494     when testing __STDC_VERSION__ for generic selection support.
   495     On the other hand, Clang also defines __GNUC__, so a clang-specific
   496     check is required to enable the use of generic selection.  */
   497  #if !defined __cplusplus \
   498      && (__GNUC_PREREQ (4, 9) \
   499          || __glibc_clang_has_extension (c_generic_selections) \
   500          || (!defined __GNUC__ && defined __STDC_VERSION__ \
   501              && __STDC_VERSION__ >= 201112L))
   502  # define __HAVE_GENERIC_SELECTION 1
   503  #else
   504  # define __HAVE_GENERIC_SELECTION 0
   505  #endif
   506  
   507  #endif   /* sys/cdefs.h */
Close file: /usr/include/sys/cdefs.h
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
Open file: /usr/include/gnu/stubs.h
     1  /* This file is automatically generated.
     2     This file selects the right generated file of `__stub_FUNCTION' macr
        os
     3     based on the architecture being compiled for.  */
     4  
     5  
     6  #if !defined __x86_64__
     7  # include <gnu/stubs-32.h>
     8  #endif
     9  #if defined __x86_64__ && defined __LP64__
Open file: /usr/include/gnu/stubs-64.h
     1  /* This file is automatically generated.
     2     It defines a symbol `__stub_FUNCTION' for each function
     3     in the C library which is a stub, meaning it will fail
     4     every time called, usually setting errno to ENOSYS.  */
     5  
     6  #ifdef _LIBC
     7   #error Applications may not define the macro _LIBC
     8  #endif
     9  
    10  #define __stub___compat_bdflush
    11  #define __stub_chflags
    12  #define __stub_fattach
    13  #define __stub_fchflags
    14  #define __stub_fdetach
    15  #define __stub_getmsg
    16  #define __stub_gtty
    17  #define __stub_lchmod
    18  #define __stub_putmsg
    19  #define __stub_revoke
    20  #define __stub_setlogin
    21  #define __stub_sigreturn
    22  #define __stub_sstk
    23  #define __stub_stty
Close file: /usr/include/gnu/stubs-64.h
    10  # include <gnu/stubs-64.h>
    11  #endif
    12  #if defined __x86_64__ && defined __ILP32__
    13  # include <gnu/stubs-x32.h>
    14  #endif
Close file: /usr/include/gnu/stubs.h
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    33  #include <features.h>
    34  
    35  /* ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
    36     macro.  */
    37  #undef __GLIBC_USE_LIB_EXT2
    38  #if (defined __USE_GNU                                                  
        \
    39       || (defined __STDC_WANT_LIB_EXT2__ && __STDC_WANT_LIB_EXT2__ > 0))
    40  # define __GLIBC_USE_LIB_EXT2 1
    41  #else
    42  # define __GLIBC_USE_LIB_EXT2 0

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    43  #endif
    44  
    45  /* ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
    46     macro.  */
    47  #undef __GLIBC_USE_IEC_60559_BFP_EXT
    48  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_BFP_EXT__
    49  # define __GLIBC_USE_IEC_60559_BFP_EXT 1
    50  #else
    51  # define __GLIBC_USE_IEC_60559_BFP_EXT 0
    52  #endif
    53  
    54  /* ISO/IEC TS 18661-4:2015 defines the
    55     __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.  */
    56  #undef __GLIBC_USE_IEC_60559_FUNCS_EXT
    57  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_FUNCS_EXT__
    58  # define __GLIBC_USE_IEC_60559_FUNCS_EXT 1
    59  #else
    60  # define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
    61  #endif
    62  
    63  /* ISO/IEC TS 18661-3:2015 defines the
    64     __STDC_WANT_IEC_60559_TYPES_EXT__ macro.  */
    65  #undef __GLIBC_USE_IEC_60559_TYPES_EXT
    66  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_TYPES_EXT__
    67  # define __GLIBC_USE_IEC_60559_TYPES_EXT 1
    68  #else
    69  # define __GLIBC_USE_IEC_60559_TYPES_EXT 0
    70  #endif
Close file: /usr/include/bits/libc-header-start.h
    27  #include <bits/libc-header-start.h>
    28  
    29  __BEGIN_DECLS
    30  
    31  #define __need_size_t
    32  #define __need_NULL
Open file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
     1  /* Copyright (C) 1989-2018 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #ifndef _PTRDIFF_T_DECLARED /* DragonFly */
   137  #define _PTRDIFF_T
   138  #define _T_PTRDIFF_
   139  #define _T_PTRDIFF
   140  #define __PTRDIFF_T
   141  #define _PTRDIFF_T_
   142  #define _BSD_PTRDIFF_T_
   143  #define ___int_ptrdiff_t_h
   144  #define _GCC_PTRDIFF_T
   145  #define _PTRDIFF_T_DECLARED
   146  #ifndef __PTRDIFF_TYPE__
   147  #define __PTRDIFF_TYPE__ long int
   148  #endif
   149  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   150  #endif /* _PTRDIFF_T_DECLARED */
   151  #endif /* _GCC_PTRDIFF_T */
   152  #endif /* ___int_ptrdiff_t_h */
   153  #endif /* _BSD_PTRDIFF_T_ */
   154  #endif /* _PTRDIFF_T_ */
   155  #endif /* __PTRDIFF_T */
   156  #endif /* _T_PTRDIFF */
   157  #endif /* _T_PTRDIFF_ */
   158  #endif /* _PTRDIFF_T */
   159  
   160  /* If this symbol has done its job, get rid of it.  */
   161  #undef  __need_ptrdiff_t
   162  
   163  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   164  
   165  /* Unsigned type of `sizeof' something.  */
   166  
   167  /* Define this type if we are doing the whole job,
   168     or if we want this type in particular.  */
   169  #if defined (_STDDEF_H) || defined (__need_size_t)
   170  #ifndef __size_t__      /* BeOS */
   171  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   172  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   173  #ifndef _SYS_SIZE_T_H
   174  #ifndef _T_SIZE_
   175  #ifndef _T_SIZE
   176  #ifndef __SIZE_T
   177  #ifndef _SIZE_T_
   178  #ifndef _BSD_SIZE_T_

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   179  #ifndef _SIZE_T_DEFINED_
   180  #ifndef _SIZE_T_DEFINED
   181  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   182  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   183  #ifndef ___int_size_t_h
   184  #ifndef _GCC_SIZE_T
   185  #ifndef _SIZET_
   186  #ifndef __size_t
   187  #define __size_t__      /* BeOS */
   188  #define __SIZE_T__      /* Cray Unicos/Mk */
   189  #define _SIZE_T
   190  #define _SYS_SIZE_T_H
   191  #define _T_SIZE_
   192  #define _T_SIZE
   193  #define __SIZE_T
   194  #define _SIZE_T_
   195  #define _BSD_SIZE_T_
   196  #define _SIZE_T_DEFINED_
   197  #define _SIZE_T_DEFINED
   198  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   199  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   200  #define ___int_size_t_h
   201  #define _GCC_SIZE_T
   202  #define _SIZET_
   203  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   204    || defined(__DragonFly__) \
   205    || defined(__FreeBSD_kernel__)
   206  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   207  #elif defined (__VMS__)
   208  /* __size_t is also a typedef on VMS.  */
   209  #else
   210  #define __size_t
   211  #endif
   212  #ifndef __SIZE_TYPE__
   213  #define __SIZE_TYPE__ long unsigned int
   214  #endif
   215  #if !(defined (__GNUG__) && defined (size_t))
   216  typedef __SIZE_TYPE__ size_t;
   217  #ifdef __BEOS__
   218  typedef long ssize_t;
   219  #endif /* __BEOS__ */
   220  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   221  #endif /* __size_t */
   222  #endif /* _SIZET_ */
   223  #endif /* _GCC_SIZE_T */
   224  #endif /* ___int_size_t_h */
   225  #endif /* _SIZE_T_DECLARED */
   226  #endif /* _BSD_SIZE_T_DEFINED_ */
   227  #endif /* _SIZE_T_DEFINED */
   228  #endif /* _SIZE_T_DEFINED_ */
   229  #endif /* _BSD_SIZE_T_ */
   230  #endif /* _SIZE_T_ */
   231  #endif /* __SIZE_T */
   232  #endif /* _T_SIZE */
   233  #endif /* _T_SIZE_ */
   234  #endif /* _SYS_SIZE_T_H */
   235  #endif /* _SIZE_T */
   236  #endif /* __SIZE_T__ */
   237  #endif /* __size_t__ */
   238  #undef  __need_size_t
   239  #endif /* _STDDEF_H or __need_size_t.  */
   240  
   241  
   242  /* Wide character type.
   243     Locale-writers should change this as necessary to
   244     be big enough to hold unique values not between 0 and 127,
   245     and not (wchar_t) -1, for each defined multibyte character.  */
   246  
   247  /* Define this type if we are doing the whole job,
   248     or if we want this type in particular.  */
   249  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   250  #ifndef __wchar_t__     /* BeOS */
   251  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   252  #ifndef _WCHAR_T

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   253  #ifndef _T_WCHAR_
   254  #ifndef _T_WCHAR
   255  #ifndef __WCHAR_T
   256  #ifndef _WCHAR_T_
   257  #ifndef _BSD_WCHAR_T_
   258  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   259  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   260  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   261  #ifndef _WCHAR_T_DEFINED_
   262  #ifndef _WCHAR_T_DEFINED
   263  #ifndef _WCHAR_T_H
   264  #ifndef ___int_wchar_t_h
   265  #ifndef __INT_WCHAR_T_H
   266  #ifndef _GCC_WCHAR_T
   267  #define __wchar_t__     /* BeOS */
   268  #define __WCHAR_T__     /* Cray Unicos/Mk */
   269  #define _WCHAR_T
   270  #define _T_WCHAR_
   271  #define _T_WCHAR
   272  #define __WCHAR_T
   273  #define _WCHAR_T_
   274  #define _BSD_WCHAR_T_
   275  #define _WCHAR_T_DEFINED_
   276  #define _WCHAR_T_DEFINED
   277  #define _WCHAR_T_H
   278  #define ___int_wchar_t_h
   279  #define __INT_WCHAR_T_H
   280  #define _GCC_WCHAR_T
   281  #define _WCHAR_T_DECLARED
   282  
   283  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   284     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   285     symbols in the _FOO_T_ family, stays defined even after its
   286     corresponding type is defined).  If we define wchar_t, then we
   287     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   288     we undef _WCHAR_T_, then we must also define rune_t, since 
   289     headers like runetype.h assume that if machine/ansi.h is included,
   290     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   291     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   292     the same type." */
   293  #ifdef _BSD_WCHAR_T_
   294  #undef _BSD_WCHAR_T_
   295  #ifdef _BSD_RUNE_T_
   296  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   297  typedef _BSD_RUNE_T_ rune_t;
   298  #define _BSD_WCHAR_T_DEFINED_
   299  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   300  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   301  /* Why is this file so hard to maintain properly?  In contrast to
   302     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   303     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   304     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   305  #undef _BSD_RUNE_T_
   306  #endif
   307  #endif
   308  #endif
   309  #endif
   310  /* FreeBSD 5 can't be handled well using "traditional" logic above
   311     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   312     rune_t in some cases... */
   313  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   314  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   315  #if __BSD_VISIBLE
   316  #ifndef _RUNE_T_DECLARED
   317  typedef __rune_t        rune_t;
   318  #define _RUNE_T_DECLARED
   319  #endif
   320  #endif
   321  #endif
   322  #endif
   323  
   324  #ifndef __WCHAR_TYPE__
   325  #define __WCHAR_TYPE__ int

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   326  #endif
   327  #ifndef __cplusplus
   328  typedef __WCHAR_TYPE__ wchar_t;
   329  #endif
   330  #endif
   331  #endif
   332  #endif
   333  #endif
   334  #endif
   335  #endif
   336  #endif /* _WCHAR_T_DECLARED */
   337  #endif /* _BSD_RUNE_T_DEFINED_ */
   338  #endif
   339  #endif
   340  #endif
   341  #endif
   342  #endif
   343  #endif
   344  #endif
   345  #endif /* __WCHAR_T__ */
   346  #endif /* __wchar_t__ */
   347  #undef  __need_wchar_t
   348  #endif /* _STDDEF_H or __need_wchar_t.  */
   349  
   350  #if defined (__need_wint_t)
   351  #ifndef _WINT_T
   352  #define _WINT_T
   353  
   354  #ifndef __WINT_TYPE__
   355  #define __WINT_TYPE__ unsigned int
   356  #endif
   357  typedef __WINT_TYPE__ wint_t;
   358  #endif
   359  #undef __need_wint_t
   360  #endif
   361  
   362  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   363      are already defined.  */
   364  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   365  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   366  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   367  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   368      are probably typos and should be removed before 2.8 is released.  *
        /
   369  #ifdef _GCC_PTRDIFF_T_
   370  #undef _PTRDIFF_T_
   371  #undef _BSD_PTRDIFF_T_
   372  #endif
   373  #ifdef _GCC_SIZE_T_
   374  #undef _SIZE_T_
   375  #undef _BSD_SIZE_T_
   376  #endif
   377  #ifdef _GCC_WCHAR_T_
   378  #undef _WCHAR_T_
   379  #undef _BSD_WCHAR_T_
   380  #endif
   381  /*  The following ones are the real ones.  */
   382  #ifdef _GCC_PTRDIFF_T
   383  #undef _PTRDIFF_T_
   384  #undef _BSD_PTRDIFF_T_
   385  #endif
   386  #ifdef _GCC_SIZE_T
   387  #undef _SIZE_T_
   388  #undef _BSD_SIZE_T_
   389  #endif
   390  #ifdef _GCC_WCHAR_T
   391  #undef _WCHAR_T_
   392  #undef _BSD_WCHAR_T_
   393  #endif
   394  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   395  
   396  #endif /* __sys_stdtypes_h */
   397  
   398  /* A null pointer constant.  */
   399  
   400  #if defined (_STDDEF_H) || defined (__need_NULL)
   401  #undef NULL             /* in case <stdio.h> has defined it. */
   402  #ifdef __GNUG__
   403  #define NULL __null
   404  #else   /* G++ */
   405  #ifndef __cplusplus
   406  #define NULL ((void *)0)
   407  #else   /* C++ */
   408  #define NULL 0
   409  #endif  /* C++ */
   410  #endif  /* G++ */
   411  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   412  #undef  __need_NULL
   413  
   414  #ifdef _STDDEF_H
   415  
   416  /* Offset of member MEMBER in a struct of type TYPE. */
   417  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   418  
   419  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   420    || (defined(__cplusplus) && __cplusplus >= 201103L)
   421  #ifndef _GCC_MAX_ALIGN_T
   422  #define _GCC_MAX_ALIGN_T
   423  /* Type whose alignment is supported in every context and is at least
   424     as great as that of any standard type not using alignment
   425     specifiers.  */
   426  typedef struct {
   427    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   428    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   429    /* _Float128 is defined as a basic type, so max_align_t must be
   430       sufficiently aligned for it.  This code must work in C++, so we
   431       use __float128 here; that is only available on some
   432       architectures, but only on i386 is extra alignment needed for
   433       __float128.  */
   434  #ifdef __i386__
   435    __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__fl
        oat128))));
   436  #endif
   437  } max_align_t;
   438  #endif
   439  #endif /* C11 or C++11.  */
   440  
   441  #if defined(__cplusplus) && __cplusplus >= 201103L
   442  #ifndef _GXX_NULLPTR_T
   443  #define _GXX_NULLPTR_T
   444    typedef decltype(nullptr) nullptr_t;
   445  #endif
   446  #endif /* C++11.  */
   447  
   448  #endif /* _STDDEF_H was defined this time */
   449  
   450  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   451            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
    33  #include <stddef.h>
    34  
    35  #define __need___va_list
Open file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stdarg.h
     1  /* Copyright (C) 1989-2018 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
    26   */
    27  
    28  #ifndef _STDARG_H
    29  #ifndef _ANSI_STDARG_H_
    30  #ifndef __need___va_list
    31  #define _STDARG_H
    32  #define _ANSI_STDARG_H_
    33  #endif /* not __need___va_list */
    34  #undef __need___va_list
    35  
    36  /* Define __gnuc_va_list.  */
    37  
    38  #ifndef __GNUC_VA_LIST
    39  #define __GNUC_VA_LIST
    40  typedef __builtin_va_list __gnuc_va_list;
    41  #endif
    42  
    43  /* Define the standard macros for the user,
    44     if this invocation was from the user program.  */
    45  #ifdef _STDARG_H
    46  
    47  #define va_start(v,l)   __builtin_va_start(v,l)
    48  #define va_end(v)       __builtin_va_end(v)
    49  #define va_arg(v,l)     __builtin_va_arg(v,l)
    50  #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L \
    51      || __cplusplus + 0 >= 201103L
    52  #define va_copy(d,s)    __builtin_va_copy(d,s)
    53  #endif
    54  #define __va_copy(d,s)  __builtin_va_copy(d,s)
    55  
    56  /* Define va_list, if desired, from __gnuc_va_list. */
    57  /* We deliberately do not define va_list when called from
    58     stdio.h, because ANSI C says that stdio.h is not supposed to define
    59     va_list.  stdio.h needs to have access to that data type, 
    60     but must not use that name.  It should use the name __gnuc_va_list,
    61     which is safe because it is reserved for the implementation.  */
    62  
    63  #ifdef _BSD_VA_LIST
    64  #undef _BSD_VA_LIST
    65  #endif
    66  
    67  #if defined(__svr4__) || (defined(_SCO_DS) && !defined(__VA_LIST))
    68  /* SVR4.2 uses _VA_LIST for an internal alias for va_list,
    69     so we must avoid testing it and setting it here.
    70     SVR4 uses _VA_LIST as a flag in stdarg.h, but we should
    71     have no conflict with that.  */
    72  #ifndef _VA_LIST_
    73  #define _VA_LIST_
    74  #ifdef __i860__
    75  #ifndef _VA_LIST
    76  #define _VA_LIST va_list
    77  #endif
    78  #endif /* __i860__ */
    79  typedef __gnuc_va_list va_list;
    80  #ifdef _SCO_DS
    81  #define __VA_LIST
    82  #endif
    83  #endif /* _VA_LIST_ */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    84  #else /* not __svr4__ || _SCO_DS */
    85  
    86  /* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
    87     But on BSD NET2 we must not test or define or undef it.
    88     (Note that the comments in NET 2's ansi.h
    89     are incorrect for _VA_LIST_--see stdio.h!)  */
    90  #if !defined (_VA_LIST_) || defined (__BSD_NET2__) || defined (____386B
        SD____) || defined (__bsdi__) || defined (__sequent__) || defined (__Fr
        eeBSD__) || defined(WINNT)
    91  /* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */
    92  #ifndef _VA_LIST_DEFINED
    93  /* The macro _VA_LIST is used in SCO Unix 3.2.  */
    94  #ifndef _VA_LIST
    95  /* The macro _VA_LIST_T_H is used in the Bull dpx2  */
    96  #ifndef _VA_LIST_T_H
    97  /* The macro __va_list__ is used by BeOS.  */
    98  #ifndef __va_list__
    99  typedef __gnuc_va_list va_list;
   100  #endif /* not __va_list__ */
   101  #endif /* not _VA_LIST_T_H */
   102  #endif /* not _VA_LIST */
   103  #endif /* not _VA_LIST_DEFINED */
   104  #if !(defined (__BSD_NET2__) || defined (____386BSD____) || defined (__
        bsdi__) || defined (__sequent__) || defined (__FreeBSD__))
   105  #define _VA_LIST_
   106  #endif
   107  #ifndef _VA_LIST
   108  #define _VA_LIST
   109  #endif
   110  #ifndef _VA_LIST_DEFINED
   111  #define _VA_LIST_DEFINED
   112  #endif
   113  #ifndef _VA_LIST_T_H
   114  #define _VA_LIST_T_H
   115  #endif
   116  #ifndef __va_list__
   117  #define __va_list__
   118  #endif
   119  
   120  #endif /* not _VA_LIST_, except on certain systems */
   121  
   122  #endif /* not __svr4__ */
   123  
   124  #endif /* _STDARG_H */
   125  
   126  #endif /* not _ANSI_STDARG_H_ */
   127  #endif /* not _STDARG_H */
Close file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stdarg.h
    36  #include <stdarg.h>
    37  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    24  #define _BITS_TYPES_H   1
    25  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    26  #include <features.h>
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #define __WORDSIZE32_SIZE_ULONG         0
     8  #define __WORDSIZE32_PTRDIFF_LONG       0
     9  #endif
    10  
    11  #ifdef __x86_64__
    12  # define __WORDSIZE_TIME64_COMPAT32     1
    13  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    14  # define __SYSCALL_WORDSIZE             64
    15  #else
    16  # define __WORDSIZE_TIME64_COMPAT32     0
    17  #endif
Close file: /usr/include/bits/wordsize.h
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
Open file: /usr/include/bits/typesizes.h
     1  /* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
     2     Copyright (C) 2012-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_TYPES_H
    20  # error "Never include <bits/typesizes.h> directly; use <sys/types.h> i
        nstead."
    21  #endif
    22  
    23  #ifndef _BITS_TYPESIZES_H
    24  #define _BITS_TYPESIZES_H       1
    25  
    26  /* See <bits/types.h> for the meaning of these macros.  This file exist
        s so
    27     that <bits/types.h> need not vary across different GNU platforms.  *
        /
    28  
    29  /* X32 kernel interface is 64-bit.  */
    30  #if defined __x86_64__ && defined __ILP32__
    31  # define __SYSCALL_SLONG_TYPE   __SQUAD_TYPE
    32  # define __SYSCALL_ULONG_TYPE   __UQUAD_TYPE
    33  #else

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    34  # define __SYSCALL_SLONG_TYPE   __SLONGWORD_TYPE
    35  # define __SYSCALL_ULONG_TYPE   __ULONGWORD_TYPE
    36  #endif
    37  
    38  #define __DEV_T_TYPE            __UQUAD_TYPE
    39  #define __UID_T_TYPE            __U32_TYPE
    40  #define __GID_T_TYPE            __U32_TYPE
    41  #define __INO_T_TYPE            __SYSCALL_ULONG_TYPE
    42  #define __INO64_T_TYPE          __UQUAD_TYPE
    43  #define __MODE_T_TYPE           __U32_TYPE
    44  #ifdef __x86_64__
    45  # define __NLINK_T_TYPE         __SYSCALL_ULONG_TYPE
    46  # define __FSWORD_T_TYPE        __SYSCALL_SLONG_TYPE
    47  #else
    48  # define __NLINK_T_TYPE         __UWORD_TYPE
    49  # define __FSWORD_T_TYPE        __SWORD_TYPE
    50  #endif
    51  #define __OFF_T_TYPE            __SYSCALL_SLONG_TYPE
    52  #define __OFF64_T_TYPE          __SQUAD_TYPE
    53  #define __PID_T_TYPE            __S32_TYPE
    54  #define __RLIM_T_TYPE           __SYSCALL_ULONG_TYPE
    55  #define __RLIM64_T_TYPE         __UQUAD_TYPE
    56  #define __BLKCNT_T_TYPE         __SYSCALL_SLONG_TYPE
    57  #define __BLKCNT64_T_TYPE       __SQUAD_TYPE
    58  #define __FSBLKCNT_T_TYPE       __SYSCALL_ULONG_TYPE
    59  #define __FSBLKCNT64_T_TYPE     __UQUAD_TYPE
    60  #define __FSFILCNT_T_TYPE       __SYSCALL_ULONG_TYPE
    61  #define __FSFILCNT64_T_TYPE     __UQUAD_TYPE
    62  #define __ID_T_TYPE             __U32_TYPE
    63  #define __CLOCK_T_TYPE          __SYSCALL_SLONG_TYPE
    64  #define __TIME_T_TYPE           __SYSCALL_SLONG_TYPE
    65  #define __USECONDS_T_TYPE       __U32_TYPE
    66  #define __SUSECONDS_T_TYPE      __SYSCALL_SLONG_TYPE
    67  #define __DADDR_T_TYPE          __S32_TYPE
    68  #define __KEY_T_TYPE            __S32_TYPE
    69  #define __CLOCKID_T_TYPE        __S32_TYPE
    70  #define __TIMER_T_TYPE          void *
    71  #define __BLKSIZE_T_TYPE        __SYSCALL_SLONG_TYPE
    72  #define __FSID_T_TYPE           struct { int __val[2]; }
    73  #define __SSIZE_T_TYPE          __SWORD_TYPE
    74  #define __CPU_MASK_TYPE         __SYSCALL_ULONG_TYPE
    75  
    76  #ifdef __x86_64__
    77  /* Tell the libc code that off_t and off64_t are actually the same type
    78     for all ABI purposes, even if possibly expressed as different base t
        ypes
    79     for C type-checking purposes.  */
    80  # define __OFF_T_MATCHES_OFF64_T        1
    81  
    82  /* Same for ino_t and ino64_t.  */
    83  # define __INO_T_MATCHES_INO64_T        1
    84  
    85  /* And for __rlim_t and __rlim64_t.  */
    86  # define __RLIM_T_MATCHES_RLIM64_T      1
    87  #else
    88  # define __RLIM_T_MATCHES_RLIM64_T      0
    89  #endif
    90  
    91  /* Number of descriptors that can fit in an `fd_set'.  */
    92  #define __FD_SETSIZE            1024
    93  
    94  
    95  #endif /* bits/typesizes.h */
Close file: /usr/include/bits/typesizes.h
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    38  #include <bits/types.h>
Open file: /usr/include/bits/types/__fpos_t.h
     1  #ifndef _____fpos_t_defined
     2  #define _____fpos_t_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
Open file: /usr/include/bits/types/__mbstate_t.h
     1  #ifndef ____mbstate_t_defined
     2  #define ____mbstate_t_defined 1
     3  
     4  /* Integral type unchanged by default argument promotions that can
     5     hold any value corresponding to members of the extended character
     6     set, as well as at least one value that does not correspond to any
     7     member of the extended character set.  */
     8  #ifndef __WINT_TYPE__
     9  # define __WINT_TYPE__ unsigned int
    10  #endif
    11  
    12  /* Conversion state information.  */
    13  typedef struct
    14  {
    15    int __count;
    16    union
    17    {
    18      __WINT_TYPE__ __wch;
    19      char __wchb[4];
    20    } __value;            /* Value so far.  */
    21  } __mbstate_t;
    22  
    23  #endif
Close file: /usr/include/bits/types/__mbstate_t.h
     5  #include <bits/types/__mbstate_t.h>
     6  
     7  /* The tag name of this struct is _G_fpos_t to preserve historic
     8     C++ mangled names for functions taking fpos_t arguments.
     9     That name should not be used in new code.  */
    10  typedef struct _G_fpos_t

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    11  {
    12    __off_t __pos;
    13    __mbstate_t __state;
    14  } __fpos_t;
    15  
    16  #endif
Close file: /usr/include/bits/types/__fpos_t.h
    39  #include <bits/types/__fpos_t.h>
Open file: /usr/include/bits/types/__fpos64_t.h
     1  #ifndef _____fpos64_t_defined
     2  #define _____fpos64_t_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
Open file: /usr/include/bits/types/__mbstate_t.h
     1  #ifndef ____mbstate_t_defined
     2  #define ____mbstate_t_defined 1
     3  
     4  /* Integral type unchanged by default argument promotions that can
     5     hold any value corresponding to members of the extended character
     6     set, as well as at least one value that does not correspond to any
     7     member of the extended character set.  */
     8  #ifndef __WINT_TYPE__
     9  # define __WINT_TYPE__ unsigned int
    10  #endif
    11  
    12  /* Conversion state information.  */
    13  typedef struct
    14  {
    15    int __count;
    16    union
    17    {
    18      __WINT_TYPE__ __wch;
    19      char __wchb[4];
    20    } __value;            /* Value so far.  */
    21  } __mbstate_t;
    22  
    23  #endif
Close file: /usr/include/bits/types/__mbstate_t.h
     5  #include <bits/types/__mbstate_t.h>
     6  
     7  /* The tag name of this struct is _G_fpos64_t to preserve historic
     8     C++ mangled names for functions taking fpos_t and/or fpos64_t
     9     arguments.  That name should not be used in new code.  */
    10  typedef struct _G_fpos64_t
    11  {
    12    __off64_t __pos;
    13    __mbstate_t __state;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    14  } __fpos64_t;
    15  
    16  #endif
Close file: /usr/include/bits/types/__fpos64_t.h
    40  #include <bits/types/__fpos64_t.h>
Open file: /usr/include/bits/types/__FILE.h
     1  #ifndef ____FILE_defined
     2  #define ____FILE_defined 1
     3  
     4  struct _IO_FILE;
     5  typedef struct _IO_FILE __FILE;
     6  
     7  #endif
Close file: /usr/include/bits/types/__FILE.h
    41  #include <bits/types/__FILE.h>
Open file: /usr/include/bits/types/FILE.h
     1  #ifndef __FILE_defined
     2  #define __FILE_defined 1
     3  
     4  struct _IO_FILE;
     5  
     6  /* The opaque type of streams.  This is the definition used elsewhere. 
         */
     7  typedef struct _IO_FILE FILE;
     8  
     9  #endif
Close file: /usr/include/bits/types/FILE.h
    42  #include <bits/types/FILE.h>
Open file: /usr/include/bits/types/struct_FILE.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef __struct_FILE_defined
    19  #define __struct_FILE_defined 1
    20  
    21  /* Caution: The contents of this file are not part of the official
    22     stdio.h API.  However, much of it is part of the official *binary*
    23     interface, and therefore cannot be changed.  */
    24  
    25  #if defined _IO_USE_OLD_IO_FILE && !defined _LIBC
    26  # error "_IO_USE_OLD_IO_FILE should only be defined when building libc 
        itself"
    27  #endif
    28  
    29  #if defined _IO_lock_t_defined && !defined _LIBC
    30  # error "_IO_lock_t_defined should only be defined when building libc i
        tself"
    31  #endif
    32  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    33  #include <bits/types.h>
    34  
    35  struct _IO_FILE;
    36  struct _IO_marker;
    37  struct _IO_codecvt;
    38  struct _IO_wide_data;
    39  
    40  /* During the build of glibc itself, _IO_lock_t will already have been
    41     defined by internal headers.  */
    42  #ifndef _IO_lock_t_defined
    43  typedef void _IO_lock_t;
    44  #endif
    45  
    46  /* The tag name of this struct is _IO_FILE to preserve historic
    47     C++ mangled names for functions taking FILE* arguments.
    48     That name should not be used in new code.  */
    49  struct _IO_FILE
    50  {
    51    int _flags;           /* High-order word is _IO_MAGIC; rest is flags.
         */
    52  
    53    /* The following pointers correspond to the C++ streambuf protocol. *
        /
    54    char *_IO_read_ptr;   /* Current read pointer */
    55    char *_IO_read_end;   /* End of get area. */
    56    char *_IO_read_base;  /* Start of putback+get area. */
    57    char *_IO_write_base; /* Start of put area. */
    58    char *_IO_write_ptr;  /* Current put pointer. */
    59    char *_IO_write_end;  /* End of put area. */
    60    char *_IO_buf_base;   /* Start of reserve area. */
    61    char *_IO_buf_end;    /* End of reserve area. */
    62  
    63    /* The following fields are used to support backing up and undo. */
    64    char *_IO_save_base; /* Pointer to start of non-current get area. */
    65    char *_IO_backup_base;  /* Pointer to first valid character of backup
         area */
    66    char *_IO_save_end; /* Pointer to end of non-current get area. */
    67  
    68    struct _IO_marker *_markers;
    69  
    70    struct _IO_FILE *_chain;
    71  
    72    int _fileno;
    73    int _flags2;
    74    __off_t _old_offset; /* This used to be _offset but it's too small.  
        */
    75  
    76    /* 1+column number of pbase(); 0 is unknown. */
    77    unsigned short _cur_column;
    78    signed char _vtable_offset;
    79    char _shortbuf[1];
    80  
    81    _IO_lock_t *_lock;
    82  #ifdef _IO_USE_OLD_IO_FILE
    83  };
    84  
    85  struct _IO_FILE_complete
    86  {
    87    struct _IO_FILE _file;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    88  #endif
    89    __off64_t _offset;
    90    /* Wide character stream stuff.  */
    91    struct _IO_codecvt *_codecvt;
    92    struct _IO_wide_data *_wide_data;
    93    struct _IO_FILE *_freeres_list;
    94    void *_freeres_buf;
    95    size_t __pad5;
    96    int _mode;
    97    /* Make sure we don't get into trouble again.  */
    98    char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_
        t)];
    99  };
   100  
   101  /* These macros are used by bits/stdio.h and internal headers.  */
   102  #define __getc_unlocked_body(_fp)                                       
        \
   103    (__glibc_unlikely ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end)        
        \
   104     ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)
   105  
   106  #define __putc_unlocked_body(_ch, _fp)                                  
        \
   107    (__glibc_unlikely ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end)      
        \
   108     ? __overflow (_fp, (unsigned char) (_ch))                            
        \
   109     : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))
   110  
   111  #define _IO_EOF_SEEN 0x0010
   112  #define __feof_unlocked_body(_fp) (((_fp)->_flags & _IO_EOF_SEEN) != 0)
   113  
   114  #define _IO_ERR_SEEN 0x0020
   115  #define __ferror_unlocked_body(_fp) (((_fp)->_flags & _IO_ERR_SEEN) != 
        0)
   116  
   117  #define _IO_USER_LOCK 0x8000
   118  /* Many more flag bits are defined internally.  */
   119  
   120  #endif
Close file: /usr/include/bits/types/struct_FILE.h
    43  #include <bits/types/struct_FILE.h>
    44  
    45  #ifdef __USE_GNU
    46  # include <bits/types/cookie_io_functions_t.h>
    47  #endif
    48  
    49  #if defined __USE_XOPEN || defined __USE_XOPEN2K8
    50  # ifdef __GNUC__
    51  #  ifndef _VA_LIST_DEFINED
    52  typedef __gnuc_va_list va_list;
    53  #   define _VA_LIST_DEFINED
    54  #  endif
    55  # else
    56  #  include <stdarg.h>
    57  # endif
    58  #endif
    59  
    60  #if defined __USE_UNIX98 || defined __USE_XOPEN2K
    61  # ifndef __off_t_defined
    62  # ifndef __USE_FILE_OFFSET64
    63  typedef __off_t off_t;
    64  # else
    65  typedef __off64_t off_t;
    66  # endif
    67  # define __off_t_defined
    68  # endif
    69  # if defined __USE_LARGEFILE64 && !defined __off64_t_defined
    70  typedef __off64_t off64_t;
    71  # define __off64_t_defined
    72  # endif
    73  #endif
    74  
    75  #ifdef __USE_XOPEN2K8

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    76  # ifndef __ssize_t_defined
    77  typedef __ssize_t ssize_t;
    78  # define __ssize_t_defined
    79  # endif
    80  #endif
    81  
    82  /* The type of the second argument to `fgetpos' and `fsetpos'.  */
    83  #ifndef __USE_FILE_OFFSET64
    84  typedef __fpos_t fpos_t;
    85  #else
    86  typedef __fpos64_t fpos_t;
    87  #endif
    88  #ifdef __USE_LARGEFILE64
    89  typedef __fpos64_t fpos64_t;
    90  #endif
    91  
    92  /* The possibilities for the third argument to `setvbuf'.  */
    93  #define _IOFBF 0                /* Fully buffered.  */
    94  #define _IOLBF 1                /* Line buffered.  */
    95  #define _IONBF 2                /* No buffering.  */
    96  
    97  
    98  /* Default buffer size.  */
    99  #define BUFSIZ 8192
   100  
   101  
   102  /* The value returned by fgetc and similar functions to indicate the
   103     end of the file.  */
   104  #define EOF (-1)
   105  
   106  
   107  /* The possibilities for the third argument to `fseek'.
   108     These values should not be changed.  */
   109  #define SEEK_SET        0       /* Seek from beginning of file.  */
   110  #define SEEK_CUR        1       /* Seek from current position.  */
   111  #define SEEK_END        2       /* Seek from end of file.  */
   112  #ifdef __USE_GNU
   113  # define SEEK_DATA      3       /* Seek to next data.  */
   114  # define SEEK_HOLE      4       /* Seek to next hole.  */
   115  #endif
   116  
   117  
   118  #if defined __USE_MISC || defined __USE_XOPEN
   119  /* Default path prefix for `tempnam' and `tmpnam'.  */
   120  # define P_tmpdir       "/tmp"
   121  #endif
   122  
   123  
   124  /* Get the values:
   125     L_tmpnam     How long an array of chars must be to be passed to `tmp
        nam'.
   126     TMP_MAX      The minimum number of unique filenames generated by tmp
        nam
   127                  (and tempnam when it uses tmpnam's name space),
   128                  or tempnam (the two are separate).
   129     L_ctermid    How long an array to pass to `ctermid'.
   130     L_cuserid    How long an array to pass to `cuserid'.
   131     FOPEN_MAX    Minimum number of files that can be open at once.
   132     FILENAME_MAX Maximum length of a filename.  */
Open file: /usr/include/bits/stdio_lim.h
     1  /* Copyright (C) 1994-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_STDIO_LIM_H
    19  #define _BITS_STDIO_LIM_H 1
    20  
    21  #ifndef _STDIO_H
    22  # error "Never include <bits/stdio_lim.h> directly; use <stdio.h> inste
        ad."
    23  #endif
    24  
    25  #define L_tmpnam 20
    26  #define TMP_MAX 238328
    27  #define FILENAME_MAX 4096
    28  
    29  #ifdef __USE_POSIX
    30  # define L_ctermid 9
    31  # if !defined __USE_XOPEN2K || defined __USE_GNU
    32  #  define L_cuserid 9
    33  # endif
    34  #endif
    35  
    36  #undef  FOPEN_MAX
    37  #define FOPEN_MAX 16
    38  
    39  #endif /* bits/stdio_lim.h */
Close file: /usr/include/bits/stdio_lim.h
   133  #include <bits/stdio_lim.h>
   134  
   135  
   136  /* Standard streams.  */
   137  extern FILE *stdin;             /* Standard input stream.  */
   138  extern FILE *stdout;            /* Standard output stream.  */
   139  extern FILE *stderr;            /* Standard error output stream.  */
   140  /* C89/C99 say they're macros.  Make them happy.  */
   141  #define stdin stdin
   142  #define stdout stdout
   143  #define stderr stderr
   144  
   145  /* Remove file FILENAME.  */
   146  extern int remove (const char *__filename) __THROW;
   147  /* Rename file OLD to NEW.  */
   148  extern int rename (const char *__old, const char *__new) __THROW;
   149  
   150  #ifdef __USE_ATFILE
   151  /* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */
   152  extern int renameat (int __oldfd, const char *__old, int __newfd,
   153                       const char *__new) __THROW;
   154  #endif
   155  
   156  #ifdef __USE_GNU
   157  /* Flags for renameat2.  */
   158  # define RENAME_NOREPLACE (1 << 0)
   159  # define RENAME_EXCHANGE (1 << 1)
   160  # define RENAME_WHITEOUT (1 << 2)
   161  
   162  /* Rename file OLD relative to OLDFD to NEW relative to NEWFD, with
   163     additional flags.  */
   164  extern int renameat2 (int __oldfd, const char *__old, int __newfd,
   165                        const char *__new, unsigned int __flags) __THROW;
   166  #endif
   167  
   168  /* Create a temporary file and open it read/write.
   169  
   170     This function is a possible cancellation point and therefore not
   171     marked with __THROW.  */
   172  #ifndef __USE_FILE_OFFSET64
   173  extern FILE *tmpfile (void) __wur;
   174  #else
   175  # ifdef __REDIRECT
   176  extern FILE *__REDIRECT (tmpfile, (void), tmpfile64) __wur;
   177  # else
   178  #  define tmpfile tmpfile64
   179  # endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   180  #endif
   181  
   182  #ifdef __USE_LARGEFILE64
   183  extern FILE *tmpfile64 (void) __wur;
   184  #endif
   185  
   186  /* Generate a temporary filename.  */
   187  extern char *tmpnam (char *__s) __THROW __wur;
   188  
   189  #ifdef __USE_MISC
   190  /* This is the reentrant variant of `tmpnam'.  The only difference is
   191     that it does not allow S to be NULL.  */
   192  extern char *tmpnam_r (char *__s) __THROW __wur;
   193  #endif
   194  
   195  
   196  #if defined __USE_MISC || defined __USE_XOPEN
   197  /* Generate a unique temporary filename using up to five characters of 
        PFX
   198     if it is not NULL.  The directory to put this file in is searched fo
        r
   199     as follows: First the environment variable "TMPDIR" is checked.
   200     If it contains the name of a writable directory, that directory is u
        sed.
   201     If not and if DIR is not NULL, that value is checked.  If that fails
        ,
   202     P_tmpdir is tried and finally "/tmp".  The storage for the filename
   203     is allocated by `malloc'.  */
   204  extern char *tempnam (const char *__dir, const char *__pfx)
   205       __THROW __attribute_malloc__ __wur;
   206  #endif
   207  
   208  
   209  /* Close STREAM.
   210  
   211     This function is a possible cancellation point and therefore not
   212     marked with __THROW.  */
   213  extern int fclose (FILE *__stream);
   214  /* Flush STREAM, or all streams if STREAM is NULL.
   215  
   216     This function is a possible cancellation point and therefore not
   217     marked with __THROW.  */
   218  extern int fflush (FILE *__stream);
   219  
   220  #ifdef __USE_MISC
   221  /* Faster versions when locking is not required.
   222  
   223     This function is not part of POSIX and therefore no official
   224     cancellation point.  But due to similarity with an POSIX interface
   225     or due to the implementation it is a cancellation point and
   226     therefore not marked with __THROW.  */
   227  extern int fflush_unlocked (FILE *__stream);
   228  #endif
   229  
   230  #ifdef __USE_GNU
   231  /* Close all streams.
   232  
   233     This function is not part of POSIX and therefore no official
   234     cancellation point.  But due to similarity with an POSIX interface
   235     or due to the implementation it is a cancellation point and
   236     therefore not marked with __THROW.  */
   237  extern int fcloseall (void);
   238  #endif
   239  
   240  
   241  #ifndef __USE_FILE_OFFSET64
   242  /* Open a file and create a new stream for it.
   243  
   244     This function is a possible cancellation point and therefore not
   245     marked with __THROW.  */
   246  extern FILE *fopen (const char *__restrict __filename,
   247                      const char *__restrict __modes) __wur;
   248  /* Open a file, replacing an existing stream with it.
   249  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   250     This function is a possible cancellation point and therefore not
   251     marked with __THROW.  */
   252  extern FILE *freopen (const char *__restrict __filename,
   253                        const char *__restrict __modes,
   254                        FILE *__restrict __stream) __wur;
   255  #else
   256  # ifdef __REDIRECT
   257  extern FILE *__REDIRECT (fopen, (const char *__restrict __filename,
   258                                   const char *__restrict __modes), fopen
        64)
   259    __wur;
   260  extern FILE *__REDIRECT (freopen, (const char *__restrict __filename,
   261                                     const char *__restrict __modes,
   262                                     FILE *__restrict __stream), freopen6
        4)
   263    __wur;
   264  # else
   265  #  define fopen fopen64
   266  #  define freopen freopen64
   267  # endif
   268  #endif
   269  #ifdef __USE_LARGEFILE64
   270  extern FILE *fopen64 (const char *__restrict __filename,
   271                        const char *__restrict __modes) __wur;
   272  extern FILE *freopen64 (const char *__restrict __filename,
   273                          const char *__restrict __modes,
   274                          FILE *__restrict __stream) __wur;
   275  #endif
   276  
   277  #ifdef  __USE_POSIX
   278  /* Create a new stream that refers to an existing system file descripto
        r.  */
   279  extern FILE *fdopen (int __fd, const char *__modes) __THROW __wur;
   280  #endif
   281  
   282  #ifdef  __USE_GNU
   283  /* Create a new stream that refers to the given magic cookie,
   284     and uses the given functions for input and output.  */
   285  extern FILE *fopencookie (void *__restrict __magic_cookie,
   286                            const char *__restrict __modes,
   287                            cookie_io_functions_t __io_funcs) __THROW __w
        ur;
   288  #endif
   289  
   290  #if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)
   291  /* Create a new stream that refers to a memory buffer.  */
   292  extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
   293    __THROW __wur;
   294  
   295  /* Open a stream that writes into a malloc'd buffer that is expanded as
   296     necessary.  *BUFLOC and *SIZELOC are updated with the buffer's locat
        ion
   297     and the number of characters written on fflush or fclose.  */
   298  extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THRO
        W __wur;
   299  #endif
   300  
   301  
   302  /* If BUF is NULL, make STREAM unbuffered.
   303     Else make it use buffer BUF, of size BUFSIZ.  */
   304  extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) 
        __THROW;
   305  /* Make STREAM use buffering mode MODE.
   306     If BUF is not NULL, use N bytes of it for buffering;
   307     else allocate an internal buffer N bytes long.  */
   308  extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
   309                      int __modes, size_t __n) __THROW;
   310  
   311  #ifdef  __USE_MISC
   312  /* If BUF is NULL, make STREAM unbuffered.
   313     Else make it use SIZE bytes of BUF for buffering.  */
   314  extern void setbuffer (FILE *__restrict __stream, char *__restrict __bu
        f,
   315                         size_t __size) __THROW;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   316  
   317  /* Make STREAM line-buffered.  */
   318  extern void setlinebuf (FILE *__stream) __THROW;
   319  #endif
   320  
   321  
   322  /* Write formatted output to STREAM.
   323  
   324     This function is a possible cancellation point and therefore not
   325     marked with __THROW.  */
   326  extern int fprintf (FILE *__restrict __stream,
   327                      const char *__restrict __format, ...);
   328  /* Write formatted output to stdout.
   329  
   330     This function is a possible cancellation point and therefore not
   331     marked with __THROW.  */
   332  extern int printf (const char *__restrict __format, ...);
   333  /* Write formatted output to S.  */
   334  extern int sprintf (char *__restrict __s,
   335                      const char *__restrict __format, ...) __THROWNL;
   336  
   337  /* Write formatted output to S from argument list ARG.
   338  
   339     This function is a possible cancellation point and therefore not
   340     marked with __THROW.  */
   341  extern int vfprintf (FILE *__restrict __s, const char *__restrict __for
        mat,
   342                       __gnuc_va_list __arg);
   343  /* Write formatted output to stdout from argument list ARG.
   344  
   345     This function is a possible cancellation point and therefore not
   346     marked with __THROW.  */
   347  extern int vprintf (const char *__restrict __format, __gnuc_va_list __a
        rg);
   348  /* Write formatted output to S from argument list ARG.  */
   349  extern int vsprintf (char *__restrict __s, const char *__restrict __for
        mat,
   350                       __gnuc_va_list __arg) __THROWNL;
   351  
   352  #if defined __USE_ISOC99 || defined __USE_UNIX98
   353  /* Maximum chars of output to write in MAXLEN.  */
   354  extern int snprintf (char *__restrict __s, size_t __maxlen,
   355                       const char *__restrict __format, ...)
   356       __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));
   357  
   358  extern int vsnprintf (char *__restrict __s, size_t __maxlen,
   359                        const char *__restrict __format, __gnuc_va_list _
        _arg)
   360       __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));
   361  #endif
   362  
   363  #if __GLIBC_USE (LIB_EXT2)
   364  /* Write formatted output to a string dynamically allocated with `mallo
        c'.
   365     Store the address of the string in *PTR.  */
   366  extern int vasprintf (char **__restrict __ptr, const char *__restrict _
        _f,
   367                        __gnuc_va_list __arg)
   368       __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
   369  extern int __asprintf (char **__restrict __ptr,
   370                         const char *__restrict __fmt, ...)
   371       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
   372  extern int asprintf (char **__restrict __ptr,
   373                       const char *__restrict __fmt, ...)
   374       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
   375  #endif
   376  
   377  #ifdef __USE_XOPEN2K8
   378  /* Write formatted output to a file descriptor.  */
   379  extern int vdprintf (int __fd, const char *__restrict __fmt,
   380                       __gnuc_va_list __arg)
   381       __attribute__ ((__format__ (__printf__, 2, 0)));
   382  extern int dprintf (int __fd, const char *__restrict __fmt, ...)
   383       __attribute__ ((__format__ (__printf__, 2, 3)));

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   384  #endif
   385  
   386  
   387  /* Read formatted input from STREAM.
   388  
   389     This function is a possible cancellation point and therefore not
   390     marked with __THROW.  */
   391  extern int fscanf (FILE *__restrict __stream,
   392                     const char *__restrict __format, ...) __wur;
   393  /* Read formatted input from stdin.
   394  
   395     This function is a possible cancellation point and therefore not
   396     marked with __THROW.  */
   397  extern int scanf (const char *__restrict __format, ...) __wur;
   398  /* Read formatted input from S.  */
   399  extern int sscanf (const char *__restrict __s,
   400                     const char *__restrict __format, ...) __THROW;
   401  
   402  #if defined __USE_ISOC99 && !defined __USE_GNU \
   403      && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
   404      && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   405  # ifdef __REDIRECT
   406  /* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   407     GNU extension which conflicts with valid %a followed by letter
   408     s, S or [.  */
   409  extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
   410                                  const char *__restrict __format, ...),
   411                         __isoc99_fscanf) __wur;
   412  extern int __REDIRECT (scanf, (const char *__restrict __format, ...),
   413                         __isoc99_scanf) __wur;
   414  extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,
   415                                      const char *__restrict __format, ..
        .),
   416                             __isoc99_sscanf);
   417  # else
   418  extern int __isoc99_fscanf (FILE *__restrict __stream,
   419                              const char *__restrict __format, ...) __wur
        ;
   420  extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;
   421  extern int __isoc99_sscanf (const char *__restrict __s,
   422                              const char *__restrict __format, ...) __THR
        OW;
   423  #  define fscanf __isoc99_fscanf
   424  #  define scanf __isoc99_scanf
   425  #  define sscanf __isoc99_sscanf
   426  # endif
   427  #endif
   428  
   429  #ifdef  __USE_ISOC99
   430  /* Read formatted input from S into argument list ARG.
   431  
   432     This function is a possible cancellation point and therefore not
   433     marked with __THROW.  */
   434  extern int vfscanf (FILE *__restrict __s, const char *__restrict __form
        at,
   435                      __gnuc_va_list __arg)
   436       __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;
   437  
   438  /* Read formatted input from stdin into argument list ARG.
   439  
   440     This function is a possible cancellation point and therefore not
   441     marked with __THROW.  */
   442  extern int vscanf (const char *__restrict __format, __gnuc_va_list __ar
        g)
   443       __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;
   444  
   445  /* Read formatted input from S into argument list ARG.  */
   446  extern int vsscanf (const char *__restrict __s,
   447                      const char *__restrict __format, __gnuc_va_list __a
        rg)
   448       __THROW __attribute__ ((__format__ (__scanf__, 2, 0)));
   449  
   450  # if !defined __USE_GNU \
   451       && (!defined __LDBL_COMPAT || !defined __REDIRECT) \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   452       && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
   453  #  ifdef __REDIRECT
   454  /* For strict ISO C99 or POSIX compliance disallow %as, %aS and %a[
   455     GNU extension which conflicts with valid %a followed by letter
   456     s, S or [.  */
   457  extern int __REDIRECT (vfscanf,
   458                         (FILE *__restrict __s,
   459                          const char *__restrict __format, __gnuc_va_list
         __arg),
   460                         __isoc99_vfscanf)
   461       __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;
   462  extern int __REDIRECT (vscanf, (const char *__restrict __format,
   463                                  __gnuc_va_list __arg), __isoc99_vscanf)
   464       __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;
   465  extern int __REDIRECT_NTH (vsscanf,
   466                             (const char *__restrict __s,
   467                              const char *__restrict __format,
   468                              __gnuc_va_list __arg), __isoc99_vsscanf)
   469       __attribute__ ((__format__ (__scanf__, 2, 0)));
   470  #  else
   471  extern int __isoc99_vfscanf (FILE *__restrict __s,
   472                               const char *__restrict __format,
   473                               __gnuc_va_list __arg) __wur;
   474  extern int __isoc99_vscanf (const char *__restrict __format,
   475                              __gnuc_va_list __arg) __wur;
   476  extern int __isoc99_vsscanf (const char *__restrict __s,
   477                               const char *__restrict __format,
   478                               __gnuc_va_list __arg) __THROW;
   479  #   define vfscanf __isoc99_vfscanf
   480  #   define vscanf __isoc99_vscanf
   481  #   define vsscanf __isoc99_vsscanf
   482  #  endif
   483  # endif
   484  #endif /* Use ISO C9x.  */
   485  
   486  
   487  /* Read a character from STREAM.
   488  
   489     These functions are possible cancellation points and therefore not
   490     marked with __THROW.  */
   491  extern int fgetc (FILE *__stream);
   492  extern int getc (FILE *__stream);
   493  
   494  /* Read a character from stdin.
   495  
   496     This function is a possible cancellation point and therefore not
   497     marked with __THROW.  */
   498  extern int getchar (void);
   499  
   500  #ifdef __USE_POSIX199506
   501  /* These are defined in POSIX.1:1996.
   502  
   503     These functions are possible cancellation points and therefore not
   504     marked with __THROW.  */
   505  extern int getc_unlocked (FILE *__stream);
   506  extern int getchar_unlocked (void);
   507  #endif /* Use POSIX.  */
   508  
   509  #ifdef __USE_MISC
   510  /* Faster version when locking is not necessary.
   511  
   512     This function is not part of POSIX and therefore no official
   513     cancellation point.  But due to similarity with an POSIX interface
   514     or due to the implementation it is a cancellation point and
   515     therefore not marked with __THROW.  */
   516  extern int fgetc_unlocked (FILE *__stream);
   517  #endif /* Use MISC.  */
   518  
   519  
   520  /* Write a character to STREAM.
   521  
   522     These functions are possible cancellation points and therefore not
   523     marked with __THROW.
   524  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   525     These functions is a possible cancellation point and therefore not
   526     marked with __THROW.  */
   527  extern int fputc (int __c, FILE *__stream);
   528  extern int putc (int __c, FILE *__stream);
   529  
   530  /* Write a character to stdout.
   531  
   532     This function is a possible cancellation point and therefore not
   533     marked with __THROW.  */
   534  extern int putchar (int __c);
   535  
   536  #ifdef __USE_MISC
   537  /* Faster version when locking is not necessary.
   538  
   539     This function is not part of POSIX and therefore no official
   540     cancellation point.  But due to similarity with an POSIX interface
   541     or due to the implementation it is a cancellation point and
   542     therefore not marked with __THROW.  */
   543  extern int fputc_unlocked (int __c, FILE *__stream);
   544  #endif /* Use MISC.  */
   545  
   546  #ifdef __USE_POSIX199506
   547  /* These are defined in POSIX.1:1996.
   548  
   549     These functions are possible cancellation points and therefore not
   550     marked with __THROW.  */
   551  extern int putc_unlocked (int __c, FILE *__stream);
   552  extern int putchar_unlocked (int __c);
   553  #endif /* Use POSIX.  */
   554  
   555  
   556  #if defined __USE_MISC \
   557      || (defined __USE_XOPEN && !defined __USE_XOPEN2K)
   558  /* Get a word (int) from STREAM.  */
   559  extern int getw (FILE *__stream);
   560  
   561  /* Write a word (int) to STREAM.  */
   562  extern int putw (int __w, FILE *__stream);
   563  #endif
   564  
   565  
   566  /* Get a newline-terminated string of finite length from STREAM.
   567  
   568     This function is a possible cancellation point and therefore not
   569     marked with __THROW.  */
   570  extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __s
        tream)
   571       __wur;
   572  
   573  #if __GLIBC_USE (DEPRECATED_GETS)
   574  /* Get a newline-terminated string from stdin, removing the newline.
   575  
   576     This function is impossible to use safely.  It has been officially
   577     removed from ISO C11 and ISO C++14, and we have also removed it
   578     from the _GNU_SOURCE feature list.  It remains available when
   579     explicitly using an old ISO C, Unix, or POSIX standard.
   580  
   581     This function is a possible cancellation point and therefore not
   582     marked with __THROW.  */
   583  extern char *gets (char *__s) __wur __attribute_deprecated__;
   584  #endif
   585  
   586  #ifdef __USE_GNU
   587  /* This function does the same as `fgets' but does not lock the stream.
   588  
   589     This function is not part of POSIX and therefore no official
   590     cancellation point.  But due to similarity with an POSIX interface
   591     or due to the implementation it is a cancellation point and
   592     therefore not marked with __THROW.  */
   593  extern char *fgets_unlocked (char *__restrict __s, int __n,
   594                               FILE *__restrict __stream) __wur;
   595  #endif
   596  
   597  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   598  #if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)
   599  /* Read up to (and including) a DELIMITER from STREAM into *LINEPTR
   600     (and null-terminate it). *LINEPTR is a pointer returned from malloc 
        (or
   601     NULL), pointing to *N characters of space.  It is realloc'd as
   602     necessary.  Returns the number of characters read (not including the
   603     null terminator), or -1 on error or EOF.
   604  
   605     These functions are not part of POSIX and therefore no official
   606     cancellation point.  But due to similarity with an POSIX interface
   607     or due to the implementation they are cancellation points and
   608     therefore not marked with __THROW.  */
   609  extern __ssize_t __getdelim (char **__restrict __lineptr,
   610                               size_t *__restrict __n, int __delimiter,
   611                               FILE *__restrict __stream) __wur;
   612  extern __ssize_t getdelim (char **__restrict __lineptr,
   613                             size_t *__restrict __n, int __delimiter,
   614                             FILE *__restrict __stream) __wur;
   615  
   616  /* Like `getdelim', but reads up to a newline.
   617  
   618     This function is not part of POSIX and therefore no official
   619     cancellation point.  But due to similarity with an POSIX interface
   620     or due to the implementation it is a cancellation point and
   621     therefore not marked with __THROW.  */
   622  extern __ssize_t getline (char **__restrict __lineptr,
   623                            size_t *__restrict __n,
   624                            FILE *__restrict __stream) __wur;
   625  #endif
   626  
   627  
   628  /* Write a string to STREAM.
   629  
   630     This function is a possible cancellation point and therefore not
   631     marked with __THROW.  */
   632  extern int fputs (const char *__restrict __s, FILE *__restrict __stream
        );
   633  
   634  /* Write a string, followed by a newline, to stdout.
   635  
   636     This function is a possible cancellation point and therefore not
   637     marked with __THROW.  */
   638  extern int puts (const char *__s);
   639  
   640  
   641  /* Push a character back onto the input buffer of STREAM.
   642  
   643     This function is a possible cancellation point and therefore not
   644     marked with __THROW.  */
   645  extern int ungetc (int __c, FILE *__stream);
   646  
   647  
   648  /* Read chunks of generic data from STREAM.
   649  
   650     This function is a possible cancellation point and therefore not
   651     marked with __THROW.  */
   652  extern size_t fread (void *__restrict __ptr, size_t __size,
   653                       size_t __n, FILE *__restrict __stream) __wur;
   654  /* Write chunks of generic data to STREAM.
   655  
   656     This function is a possible cancellation point and therefore not
   657     marked with __THROW.  */
   658  extern size_t fwrite (const void *__restrict __ptr, size_t __size,
   659                        size_t __n, FILE *__restrict __s);
   660  
   661  #ifdef __USE_GNU
   662  /* This function does the same as `fputs' but does not lock the stream.
   663  
   664     This function is not part of POSIX and therefore no official
   665     cancellation point.  But due to similarity with an POSIX interface
   666     or due to the implementation it is a cancellation point and
   667     therefore not marked with __THROW.  */
   668  extern int fputs_unlocked (const char *__restrict __s,
   669                             FILE *__restrict __stream);

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   670  #endif
   671  
   672  #ifdef __USE_MISC
   673  /* Faster versions when locking is not necessary.
   674  
   675     These functions are not part of POSIX and therefore no official
   676     cancellation point.  But due to similarity with an POSIX interface
   677     or due to the implementation they are cancellation points and
   678     therefore not marked with __THROW.  */
   679  extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
   680                                size_t __n, FILE *__restrict __stream) __
        wur;
   681  extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __s
        ize,
   682                                 size_t __n, FILE *__restrict __stream);
   683  #endif
   684  
   685  
   686  /* Seek to a certain position on STREAM.
   687  
   688     This function is a possible cancellation point and therefore not
   689     marked with __THROW.  */
   690  extern int fseek (FILE *__stream, long int __off, int __whence);
   691  /* Return the current position of STREAM.
   692  
   693     This function is a possible cancellation point and therefore not
   694     marked with __THROW.  */
   695  extern long int ftell (FILE *__stream) __wur;
   696  /* Rewind to the beginning of STREAM.
   697  
   698     This function is a possible cancellation point and therefore not
   699     marked with __THROW.  */
   700  extern void rewind (FILE *__stream);
   701  
   702  /* The Single Unix Specification, Version 2, specifies an alternative,
   703     more adequate interface for the two functions above which deal with
   704     file offset.  `long int' is not the right type.  These definitions
   705     are originally defined in the Large File Support API.  */
   706  
   707  #if defined __USE_LARGEFILE || defined __USE_XOPEN2K
   708  # ifndef __USE_FILE_OFFSET64
   709  /* Seek to a certain position on STREAM.
   710  
   711     This function is a possible cancellation point and therefore not
   712     marked with __THROW.  */
   713  extern int fseeko (FILE *__stream, __off_t __off, int __whence);
   714  /* Return the current position of STREAM.
   715  
   716     This function is a possible cancellation point and therefore not
   717     marked with __THROW.  */
   718  extern __off_t ftello (FILE *__stream) __wur;
   719  # else
   720  #  ifdef __REDIRECT
   721  extern int __REDIRECT (fseeko,
   722                         (FILE *__stream, __off64_t __off, int __whence),
   723                         fseeko64);
   724  extern __off64_t __REDIRECT (ftello, (FILE *__stream), ftello64);
   725  #  else
   726  #   define fseeko fseeko64
   727  #   define ftello ftello64
   728  #  endif
   729  # endif
   730  #endif
   731  
   732  #ifndef __USE_FILE_OFFSET64
   733  /* Get STREAM's position.
   734  
   735     This function is a possible cancellation point and therefore not
   736     marked with __THROW.  */
   737  extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos
        );
   738  /* Set STREAM's position.
   739  
   740     This function is a possible cancellation point and therefore not

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   741     marked with __THROW.  */
   742  extern int fsetpos (FILE *__stream, const fpos_t *__pos);
   743  #else
   744  # ifdef __REDIRECT
   745  extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
   746                                   fpos_t *__restrict __pos), fgetpos64);
   747  extern int __REDIRECT (fsetpos,
   748                         (FILE *__stream, const fpos_t *__pos), fsetpos64
        );
   749  # else
   750  #  define fgetpos fgetpos64
   751  #  define fsetpos fsetpos64
   752  # endif
   753  #endif
   754  
   755  #ifdef __USE_LARGEFILE64
   756  extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
   757  extern __off64_t ftello64 (FILE *__stream) __wur;
   758  extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict _
        _pos);
   759  extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);
   760  #endif
   761  
   762  /* Clear the error and EOF indicators for STREAM.  */
   763  extern void clearerr (FILE *__stream) __THROW;
   764  /* Return the EOF indicator for STREAM.  */
   765  extern int feof (FILE *__stream) __THROW __wur;
   766  /* Return the error indicator for STREAM.  */
   767  extern int ferror (FILE *__stream) __THROW __wur;
   768  
   769  #ifdef __USE_MISC
   770  /* Faster versions when locking is not required.  */
   771  extern void clearerr_unlocked (FILE *__stream) __THROW;
   772  extern int feof_unlocked (FILE *__stream) __THROW __wur;
   773  extern int ferror_unlocked (FILE *__stream) __THROW __wur;
   774  #endif
   775  
   776  
   777  /* Print a message describing the meaning of the value of errno.
   778  
   779     This function is a possible cancellation point and therefore not
   780     marked with __THROW.  */
   781  extern void perror (const char *__s);
   782  
   783  /* Provide the declarations for `sys_errlist' and `sys_nerr' if they
   784     are available on this system.  Even if available, these variables
   785     should not be used directly.  The `strerror' function provides
   786     all the necessary functionality.  */
Open file: /usr/include/bits/sys_errlist.h
     1  /* Declare sys_errlist and sys_nerr, or don't.  Compatibility (do) vers
        ion.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _STDIO_H
    20  # error "Never include <bits/sys_errlist.h> directly; use <stdio.h> ins
        tead."
    21  #endif
    22  
    23  /* sys_errlist and sys_nerr are deprecated.  Use strerror instead.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    24  
    25  #ifdef  __USE_MISC
    26  extern int sys_nerr;
    27  extern const char *const sys_errlist[];
    28  #endif
    29  #ifdef  __USE_GNU
    30  extern int _sys_nerr;
    31  extern const char *const _sys_errlist[];
    32  #endif
Close file: /usr/include/bits/sys_errlist.h
   787  #include <bits/sys_errlist.h>
   788  
   789  
   790  #ifdef  __USE_POSIX
   791  /* Return the system file descriptor for STREAM.  */
   792  extern int fileno (FILE *__stream) __THROW __wur;
   793  #endif /* Use POSIX.  */
   794  
   795  #ifdef __USE_MISC
   796  /* Faster version when locking is not required.  */
   797  extern int fileno_unlocked (FILE *__stream) __THROW __wur;
   798  #endif
   799  
   800  
   801  #ifdef __USE_POSIX2
   802  /* Create a new stream connected to a pipe running the given command.
   803  
   804     This function is a possible cancellation point and therefore not
   805     marked with __THROW.  */
   806  extern FILE *popen (const char *__command, const char *__modes) __wur;
   807  
   808  /* Close a stream opened by popen and return the status of its child.
   809  
   810     This function is a possible cancellation point and therefore not
   811     marked with __THROW.  */
   812  extern int pclose (FILE *__stream);
   813  #endif
   814  
   815  
   816  #ifdef  __USE_POSIX
   817  /* Return the name of the controlling terminal.  */
   818  extern char *ctermid (char *__s) __THROW;
   819  #endif /* Use POSIX.  */
   820  
   821  
   822  #if (defined __USE_XOPEN && !defined __USE_XOPEN2K) || defined __USE_GN
        U
   823  /* Return the name of the current user.  */
   824  extern char *cuserid (char *__s);
   825  #endif /* Use X/Open, but not issue 6.  */
   826  
   827  
   828  #ifdef  __USE_GNU
   829  struct obstack;                 /* See <obstack.h>.  */
   830  
   831  /* Write formatted output to an obstack.  */
   832  extern int obstack_printf (struct obstack *__restrict __obstack,
   833                             const char *__restrict __format, ...)
   834       __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));
   835  extern int obstack_vprintf (struct obstack *__restrict __obstack,
   836                              const char *__restrict __format,
   837                              __gnuc_va_list __args)
   838       __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));
   839  #endif /* Use GNU.  */
   840  
   841  
   842  #ifdef __USE_POSIX199506
   843  /* These are defined in POSIX.1:1996.  */
   844  
   845  /* Acquire ownership of STREAM.  */
   846  extern void flockfile (FILE *__stream) __THROW;
   847  
   848  /* Try to acquire ownership of STREAM but do not block if it is not
   849     possible.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   850  extern int ftrylockfile (FILE *__stream) __THROW __wur;
   851  
   852  /* Relinquish the ownership granted for STREAM.  */
   853  extern void funlockfile (FILE *__stream) __THROW;
   854  #endif /* POSIX */
   855  
   856  #if defined __USE_XOPEN && !defined __USE_XOPEN2K && !defined __USE_GNU
   857  /*  X/Open Issues 1-5 required getopt to be declared in this
   858     header.  It was removed in Issue 6.  GNU follows Issue 6.  */
   859  # include <bits/getopt_posix.h>
   860  #endif
   861  
   862  /* Slow-path routines used by the optimized inline functions in
   863     bits/stdio.h.  */
   864  extern int __uflow (FILE *);
   865  extern int __overflow (FILE *, int);
   866  
   867  /* If we are compiling with optimizing read this file.  It contains
   868     several optimizing inline functions and macros.  */
   869  #ifdef __USE_EXTERN_INLINES
   870  # include <bits/stdio.h>
   871  #endif
   872  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
   873  # include <bits/stdio2.h>
   874  #endif
   875  #ifdef __LDBL_COMPAT
   876  # include <bits/stdio-ldbl.h>
   877  #endif
   878  
   879  __END_DECLS
   880  
   881  #endif /* <stdio.h> included.  */
Close file: /usr/include/stdio.h
     1  #include <stdio.h>
     2  
     3  #define SQLCA_STORAGE_CLASS extern
Open file: /opt/oracle/product/21c/dbhomeXE/sdk/include/sqlca.h
     1  /*
     2   * $Header: sqlca.h 24-apr-2003.12:50:58 mkandarp Exp $ sqlca.h 
     3   */
     4  
     5  /* Copyright (c) 1985, 2003, Oracle Corporation.  All rights reserved. 
         */
     6   
     7  /*
     8  NAME
     9    SQLCA : SQL Communications Area.
    10  FUNCTION
    11    Contains no code. Oracle fills in the SQLCA with status info
    12    during the execution of a SQL stmt.
    13  NOTES
    14    **************************************************************
    15    ***                                                        ***
    16    *** This file is SOSD.  Porters must change the data types ***
    17    *** appropriately on their platform.  See notes/pcport.doc ***
    18    *** for more information.                                  ***
    19    ***                                                        ***
    20    **************************************************************
    21  
    22    If the symbol SQLCA_STORAGE_CLASS is defined, then the SQLCA
    23    will be defined to have this storage class. For example:
    24   
    25      #define SQLCA_STORAGE_CLASS extern
    26   
    27    will define the SQLCA as an extern.
    28   
    29    If the symbol SQLCA_INIT is defined, then the SQLCA will be
    30    statically initialized. Although this is not necessary in order
    31    to use the SQLCA, it is a good pgming practice not to have
    32    unitialized variables. However, some C compilers/OS's don't
    33    allow automatic variables to be init'd in this manner. Therefore,
    34    if you are INCLUDE'ing the SQLCA in a place where it would be
    35    an automatic AND your C compiler/OS doesn't allow this style
    36    of initialization, then SQLCA_INIT should be left undefined --

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    37    all others can define SQLCA_INIT if they wish.
    38  
    39    If the symbol SQLCA_NONE is defined, then the SQLCA variable will
    40    not be defined at all.  The symbol SQLCA_NONE should not be defined
    41    in source modules that have embedded SQL.  However, source modules
    42    that have no embedded SQL, but need to manipulate a sqlca struct
    43    passed in as a parameter, can set the SQLCA_NONE symbol to avoid
    44    creation of an extraneous sqlca variable.
    45   
    46  MODIFIED
    47      lvbcheng   07/31/98 -  long to int
    48      jbasu      12/12/94 -  Bug 217878: note this is an SOSD file
    49      losborne   08/11/92 -  No sqlca var if SQLCA_NONE macro set 
    50    Clare      12/06/84 - Ch SQLCA to not be an extern.
    51    Clare      10/21/85 - Add initialization.
    52    Bradbury   01/05/86 - Only initialize when SQLCA_INIT set
    53    Clare      06/12/86 - Add SQLCA_STORAGE_CLASS option.
    54  */
    55   
    56  #ifndef SQLCA
    57  #define SQLCA 1
    58   
    59  struct   sqlca
    60           {
    61           /* ub1 */ char    sqlcaid[8];
    62           /* b4  */ int     sqlabc;
    63           /* b4  */ int     sqlcode;
    64           struct
    65             {
    66             /* ub2 */ unsigned short sqlerrml;
    67             /* ub1 */ char           sqlerrmc[70];
    68             } sqlerrm;
    69           /* ub1 */ char    sqlerrp[8];
    70           /* b4  */ int     sqlerrd[6];
    71           /* ub1 */ char    sqlwarn[8];
    72           /* ub1 */ char    sqlext[8];
    73           };
    74  
    75  #ifndef SQLCA_NONE 
    76  #ifdef   SQLCA_STORAGE_CLASS
    77  SQLCA_STORAGE_CLASS struct sqlca sqlca
    78  #else
    79           struct sqlca sqlca
    80  #endif
    81   
    82  #ifdef  SQLCA_INIT
    83           = {
    84           {'S', 'Q', 'L', 'C', 'A', ' ', ' ', ' '},
    85           sizeof(struct sqlca),
    86           0,
    87           { 0, {0}},
    88           {'N', 'O', 'T', ' ', 'S', 'E', 'T', ' '},
    89           {0, 0, 0, 0, 0, 0},
    90           {0, 0, 0, 0, 0, 0, 0, 0},
    91           {0, 0, 0, 0, 0, 0, 0, 0}
    92           }
    93  #endif
    94           ;
    95  #endif
    96   
    97  #endif
    98   
    99  /* end SQLCA */
Close file: /opt/oracle/product/21c/dbhomeXE/sdk/include/sqlca.h
     4  #include <sqlca.h>
     5  
Open file: /workspaces/liborm/driver/oracle/include/driver/oracle/connection_da
ta.h
     1  #ifndef LIBORM_DRIVER_ORACLE_CONNECTION_DATA_H
     2  #define LIBORM_DRIVER_ORACLE_CONNECTION_DATA_H
     3  
     4  /** For avoid compilations problem if the header used in stadn alone mo
        de */
     5  #if !defined(ORA_PROC)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

     6  typedef void* sql_context;
     7  #endif
     8  
     9  struct oracle_connection_data {
    10          /*@{*/
    11          char user[128]; /**< User */
    12          char password[128]; /**< Password */
    13          unsigned char dbname[32]; /**< database name */
    14          unsigned char connect_string[128]; /**< Conection string */
    15          sql_context ctx; /**< Thread context, required for multithread 
        connectionss */
    16          unsigned char input_descriptor[32]; /**< Necesary string for id
        entify a descriptor */
    17          unsigned char output_descriptor[32]; /**< Necesary string for i
        dentify a descriptor */
    18          /*@}*/
    19          unsigned int cursor_open;
    20  };
    21  
    22  #endif
Close file: /workspaces/liborm/driver/oracle/include/driver/oracle/connection_d
ata.h
     6  #include "driver/oracle/connection_data.h"
Open file: /workspaces/liborm/connection/include/connection.h
     1  #ifndef LIBORM_CONNECTION_H
     2  #define LIBORM_CONNECTION_H
     3  
Open file: /workspaces/liborm/connection/include/connection/types.h
     1  #ifndef LIBORM_CONNECTION_TYPES_H
     2  #define LIBORM_CONNECTION_TYPES_H
     3  
     4  enum connection_error {
     5          NO_CONNECTION_ERROR = 0, /**< no error */
     6          DATABASE_ERROR, /**< DBAPI error */
     7  };
     8  
     9  #define conn_error enum connection_error
    10  
    11  #endif
Close file: /workspaces/liborm/connection/include/connection/types.h
     4  #include "connection/types.h"
     5  
     6  #ifdef __cplusplus
     7  
     8  #include "connection/cursor.hpp"
     9  #include "connection/connection.hpp"
    10  
    11  #else
    12  
Open file: /workspaces/liborm/connection/include/connection/cursor_c.h
     1  #ifndef LIBORM_CONNECTION_CURSOR_C_H
     2  #define LIBORM_CONNECTION_CURSOR_C_H
     3  
     4  // defined later for avoid circular dependencies
     5  // #include "connection/types.h"
     6  
     7  typedef struct Cursor Cursor;
     8  
     9  #ifdef __cplusplus
    10  extern "C" {
    11  #endif
    12  
    13  struct connection_state cursor_open(Cursor* c);
    14  struct connection_state cursor_close(Cursor* c);
    15  void free_cursor(Cursor* c);
    16  
    17  unsigned cursor_nfields(Cursor *c);
    18  unsigned cursor_ntuples(Cursor *c);
    19  unsigned cursor_changes(Cursor *c);
    20  
    21  #ifdef __cplusplus
    22  }
    23  #endif
    24  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    25  #endif
Close file: /workspaces/liborm/connection/include/connection/cursor_c.h
    13  #include "connection/cursor_c.h"
Open file: /workspaces/liborm/connection/include/connection/connection_c.h
     1  #ifndef LIBORM_CONNECTION_CONNECTION_C_H
     2  #define LIBORM_CONNECTION_CONNECTION_C_H
     3  
     4  #ifndef __cplusplus
     5  typedef struct Connection Connection;
     6  #endif
     7  
     8  #ifdef __cplusplus
     9  extern "C" {
    10  #endif
    11  
    12  struct connection_state connection_execute_many(Connection* conn, const
         char* stmt, void*);
    13  struct connection_state connection_execute(Connection* conn, const char
        * stmt);
    14  void free_connection(Connection* conn);
    15  
    16  #ifdef __cplusplus
    17  }
    18  #endif
    19  
    20  #endif
    21  
Close file: /workspaces/liborm/connection/include/connection/connection_c.h
    14  #include "connection/connection_c.h"
    15  
    16  #endif
    17  
Open file: /workspaces/liborm/connection/include/connection/state.h
     1  #ifndef LIBORM_CONNECTION_STATE_H
     2  #define LIBORM_CONNECTION_STATE_H
     3  
Open file: /usr/include/stdlib.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      ISO C99 Standard: 7.20 General utilities        <stdlib.h>
    20   */
    21  
    22  #ifndef _STDLIB_H
    23  
    24  #define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
Open file: /usr/include/bits/libc-header-start.h
     1  /* Handle feature test macros at the start of a header.
     2     Copyright (C) 2016-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /* This header is internal to glibc and should not be included outside
    20     of glibc headers.  Headers including it must define
    21     __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
    22     cannot have multiple include guards because ISO C feature test
    23     macros depend on the definition of the macro when an affected
    24     header is included, not when the first system header is
    25     included.  */
    26  
    27  #ifndef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
    28  # error "Never include <bits/libc-header-start.h> directly."
    29  #endif
    30  
    31  #undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION
    32  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    33  #include <features.h>
    34  
    35  /* ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
    36     macro.  */
    37  #undef __GLIBC_USE_LIB_EXT2
    38  #if (defined __USE_GNU                                                  
        \
    39       || (defined __STDC_WANT_LIB_EXT2__ && __STDC_WANT_LIB_EXT2__ > 0))
    40  # define __GLIBC_USE_LIB_EXT2 1
    41  #else
    42  # define __GLIBC_USE_LIB_EXT2 0
    43  #endif
    44  
    45  /* ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
    46     macro.  */
    47  #undef __GLIBC_USE_IEC_60559_BFP_EXT
    48  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_BFP_EXT__
    49  # define __GLIBC_USE_IEC_60559_BFP_EXT 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    50  #else
    51  # define __GLIBC_USE_IEC_60559_BFP_EXT 0
    52  #endif
    53  
    54  /* ISO/IEC TS 18661-4:2015 defines the
    55     __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.  */
    56  #undef __GLIBC_USE_IEC_60559_FUNCS_EXT
    57  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_FUNCS_EXT__
    58  # define __GLIBC_USE_IEC_60559_FUNCS_EXT 1
    59  #else
    60  # define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
    61  #endif
    62  
    63  /* ISO/IEC TS 18661-3:2015 defines the
    64     __STDC_WANT_IEC_60559_TYPES_EXT__ macro.  */
    65  #undef __GLIBC_USE_IEC_60559_TYPES_EXT
    66  #if defined __USE_GNU || defined __STDC_WANT_IEC_60559_TYPES_EXT__
    67  # define __GLIBC_USE_IEC_60559_TYPES_EXT 1
    68  #else
    69  # define __GLIBC_USE_IEC_60559_TYPES_EXT 0
    70  #endif
Close file: /usr/include/bits/libc-header-start.h
    25  #include <bits/libc-header-start.h>
    26  
    27  /* Get size_t, wchar_t and NULL from <stddef.h>.  */
    28  #define __need_size_t
    29  #define __need_wchar_t
    30  #define __need_NULL
Open file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
     1  /* Copyright (C) 1989-2018 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #ifndef _PTRDIFF_T_DECLARED /* DragonFly */
   137  #define _PTRDIFF_T
   138  #define _T_PTRDIFF_
   139  #define _T_PTRDIFF
   140  #define __PTRDIFF_T
   141  #define _PTRDIFF_T_
   142  #define _BSD_PTRDIFF_T_
   143  #define ___int_ptrdiff_t_h
   144  #define _GCC_PTRDIFF_T
   145  #define _PTRDIFF_T_DECLARED
   146  #ifndef __PTRDIFF_TYPE__
   147  #define __PTRDIFF_TYPE__ long int
   148  #endif
   149  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   150  #endif /* _PTRDIFF_T_DECLARED */
   151  #endif /* _GCC_PTRDIFF_T */
   152  #endif /* ___int_ptrdiff_t_h */
   153  #endif /* _BSD_PTRDIFF_T_ */
   154  #endif /* _PTRDIFF_T_ */
   155  #endif /* __PTRDIFF_T */
   156  #endif /* _T_PTRDIFF */
   157  #endif /* _T_PTRDIFF_ */
   158  #endif /* _PTRDIFF_T */
   159  
   160  /* If this symbol has done its job, get rid of it.  */
   161  #undef  __need_ptrdiff_t
   162  
   163  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   164  
   165  /* Unsigned type of `sizeof' something.  */
   166  
   167  /* Define this type if we are doing the whole job,
   168     or if we want this type in particular.  */
   169  #if defined (_STDDEF_H) || defined (__need_size_t)
   170  #ifndef __size_t__      /* BeOS */
   171  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   172  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   173  #ifndef _SYS_SIZE_T_H
   174  #ifndef _T_SIZE_
   175  #ifndef _T_SIZE
   176  #ifndef __SIZE_T
   177  #ifndef _SIZE_T_
   178  #ifndef _BSD_SIZE_T_
   179  #ifndef _SIZE_T_DEFINED_
   180  #ifndef _SIZE_T_DEFINED
   181  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   182  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   183  #ifndef ___int_size_t_h
   184  #ifndef _GCC_SIZE_T

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   185  #ifndef _SIZET_
   186  #ifndef __size_t
   187  #define __size_t__      /* BeOS */
   188  #define __SIZE_T__      /* Cray Unicos/Mk */
   189  #define _SIZE_T
   190  #define _SYS_SIZE_T_H
   191  #define _T_SIZE_
   192  #define _T_SIZE
   193  #define __SIZE_T
   194  #define _SIZE_T_
   195  #define _BSD_SIZE_T_
   196  #define _SIZE_T_DEFINED_
   197  #define _SIZE_T_DEFINED
   198  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   199  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   200  #define ___int_size_t_h
   201  #define _GCC_SIZE_T
   202  #define _SIZET_
   203  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   204    || defined(__DragonFly__) \
   205    || defined(__FreeBSD_kernel__)
   206  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   207  #elif defined (__VMS__)
   208  /* __size_t is also a typedef on VMS.  */
   209  #else
   210  #define __size_t
   211  #endif
   212  #ifndef __SIZE_TYPE__
   213  #define __SIZE_TYPE__ long unsigned int
   214  #endif
   215  #if !(defined (__GNUG__) && defined (size_t))
   216  typedef __SIZE_TYPE__ size_t;
   217  #ifdef __BEOS__
   218  typedef long ssize_t;
   219  #endif /* __BEOS__ */
   220  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   221  #endif /* __size_t */
   222  #endif /* _SIZET_ */
   223  #endif /* _GCC_SIZE_T */
   224  #endif /* ___int_size_t_h */
   225  #endif /* _SIZE_T_DECLARED */
   226  #endif /* _BSD_SIZE_T_DEFINED_ */
   227  #endif /* _SIZE_T_DEFINED */
   228  #endif /* _SIZE_T_DEFINED_ */
   229  #endif /* _BSD_SIZE_T_ */
   230  #endif /* _SIZE_T_ */
   231  #endif /* __SIZE_T */
   232  #endif /* _T_SIZE */
   233  #endif /* _T_SIZE_ */
   234  #endif /* _SYS_SIZE_T_H */
   235  #endif /* _SIZE_T */
   236  #endif /* __SIZE_T__ */
   237  #endif /* __size_t__ */
   238  #undef  __need_size_t
   239  #endif /* _STDDEF_H or __need_size_t.  */
   240  
   241  
   242  /* Wide character type.
   243     Locale-writers should change this as necessary to
   244     be big enough to hold unique values not between 0 and 127,
   245     and not (wchar_t) -1, for each defined multibyte character.  */
   246  
   247  /* Define this type if we are doing the whole job,
   248     or if we want this type in particular.  */
   249  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   250  #ifndef __wchar_t__     /* BeOS */
   251  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   252  #ifndef _WCHAR_T
   253  #ifndef _T_WCHAR_
   254  #ifndef _T_WCHAR
   255  #ifndef __WCHAR_T
   256  #ifndef _WCHAR_T_
   257  #ifndef _BSD_WCHAR_T_
   258  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   259  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   260  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   261  #ifndef _WCHAR_T_DEFINED_
   262  #ifndef _WCHAR_T_DEFINED
   263  #ifndef _WCHAR_T_H
   264  #ifndef ___int_wchar_t_h
   265  #ifndef __INT_WCHAR_T_H
   266  #ifndef _GCC_WCHAR_T
   267  #define __wchar_t__     /* BeOS */
   268  #define __WCHAR_T__     /* Cray Unicos/Mk */
   269  #define _WCHAR_T
   270  #define _T_WCHAR_
   271  #define _T_WCHAR
   272  #define __WCHAR_T
   273  #define _WCHAR_T_
   274  #define _BSD_WCHAR_T_
   275  #define _WCHAR_T_DEFINED_
   276  #define _WCHAR_T_DEFINED
   277  #define _WCHAR_T_H
   278  #define ___int_wchar_t_h
   279  #define __INT_WCHAR_T_H
   280  #define _GCC_WCHAR_T
   281  #define _WCHAR_T_DECLARED
   282  
   283  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   284     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   285     symbols in the _FOO_T_ family, stays defined even after its
   286     corresponding type is defined).  If we define wchar_t, then we
   287     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   288     we undef _WCHAR_T_, then we must also define rune_t, since 
   289     headers like runetype.h assume that if machine/ansi.h is included,
   290     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   291     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   292     the same type." */
   293  #ifdef _BSD_WCHAR_T_
   294  #undef _BSD_WCHAR_T_
   295  #ifdef _BSD_RUNE_T_
   296  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   297  typedef _BSD_RUNE_T_ rune_t;
   298  #define _BSD_WCHAR_T_DEFINED_
   299  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   300  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   301  /* Why is this file so hard to maintain properly?  In contrast to
   302     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   303     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   304     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   305  #undef _BSD_RUNE_T_
   306  #endif
   307  #endif
   308  #endif
   309  #endif
   310  /* FreeBSD 5 can't be handled well using "traditional" logic above
   311     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   312     rune_t in some cases... */
   313  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   314  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   315  #if __BSD_VISIBLE
   316  #ifndef _RUNE_T_DECLARED
   317  typedef __rune_t        rune_t;
   318  #define _RUNE_T_DECLARED
   319  #endif
   320  #endif
   321  #endif
   322  #endif
   323  
   324  #ifndef __WCHAR_TYPE__
   325  #define __WCHAR_TYPE__ int
   326  #endif
   327  #ifndef __cplusplus
   328  typedef __WCHAR_TYPE__ wchar_t;
   329  #endif
   330  #endif
   331  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   332  #endif
   333  #endif
   334  #endif
   335  #endif
   336  #endif /* _WCHAR_T_DECLARED */
   337  #endif /* _BSD_RUNE_T_DEFINED_ */
   338  #endif
   339  #endif
   340  #endif
   341  #endif
   342  #endif
   343  #endif
   344  #endif
   345  #endif /* __WCHAR_T__ */
   346  #endif /* __wchar_t__ */
   347  #undef  __need_wchar_t
   348  #endif /* _STDDEF_H or __need_wchar_t.  */
   349  
   350  #if defined (__need_wint_t)
   351  #ifndef _WINT_T
   352  #define _WINT_T
   353  
   354  #ifndef __WINT_TYPE__
   355  #define __WINT_TYPE__ unsigned int
   356  #endif
   357  typedef __WINT_TYPE__ wint_t;
   358  #endif
   359  #undef __need_wint_t
   360  #endif
   361  
   362  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   363      are already defined.  */
   364  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   365  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   366  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   367  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   368      are probably typos and should be removed before 2.8 is released.  *
        /
   369  #ifdef _GCC_PTRDIFF_T_
   370  #undef _PTRDIFF_T_
   371  #undef _BSD_PTRDIFF_T_
   372  #endif
   373  #ifdef _GCC_SIZE_T_
   374  #undef _SIZE_T_
   375  #undef _BSD_SIZE_T_
   376  #endif
   377  #ifdef _GCC_WCHAR_T_
   378  #undef _WCHAR_T_
   379  #undef _BSD_WCHAR_T_
   380  #endif
   381  /*  The following ones are the real ones.  */
   382  #ifdef _GCC_PTRDIFF_T
   383  #undef _PTRDIFF_T_
   384  #undef _BSD_PTRDIFF_T_
   385  #endif
   386  #ifdef _GCC_SIZE_T
   387  #undef _SIZE_T_
   388  #undef _BSD_SIZE_T_
   389  #endif
   390  #ifdef _GCC_WCHAR_T
   391  #undef _WCHAR_T_
   392  #undef _BSD_WCHAR_T_
   393  #endif
   394  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   395  
   396  #endif /* __sys_stdtypes_h */
   397  
   398  /* A null pointer constant.  */
   399  
   400  #if defined (_STDDEF_H) || defined (__need_NULL)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   401  #undef NULL             /* in case <stdio.h> has defined it. */
   402  #ifdef __GNUG__
   403  #define NULL __null
   404  #else   /* G++ */
   405  #ifndef __cplusplus
   406  #define NULL ((void *)0)
   407  #else   /* C++ */
   408  #define NULL 0
   409  #endif  /* C++ */
   410  #endif  /* G++ */
   411  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   412  #undef  __need_NULL
   413  
   414  #ifdef _STDDEF_H
   415  
   416  /* Offset of member MEMBER in a struct of type TYPE. */
   417  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   418  
   419  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   420    || (defined(__cplusplus) && __cplusplus >= 201103L)
   421  #ifndef _GCC_MAX_ALIGN_T
   422  #define _GCC_MAX_ALIGN_T
   423  /* Type whose alignment is supported in every context and is at least
   424     as great as that of any standard type not using alignment
   425     specifiers.  */
   426  typedef struct {
   427    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   428    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   429    /* _Float128 is defined as a basic type, so max_align_t must be
   430       sufficiently aligned for it.  This code must work in C++, so we
   431       use __float128 here; that is only available on some
   432       architectures, but only on i386 is extra alignment needed for
   433       __float128.  */
   434  #ifdef __i386__
   435    __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__fl
        oat128))));
   436  #endif
   437  } max_align_t;
   438  #endif
   439  #endif /* C11 or C++11.  */
   440  
   441  #if defined(__cplusplus) && __cplusplus >= 201103L
   442  #ifndef _GXX_NULLPTR_T
   443  #define _GXX_NULLPTR_T
   444    typedef decltype(nullptr) nullptr_t;
   445  #endif
   446  #endif /* C++11.  */
   447  
   448  #endif /* _STDDEF_H was defined this time */
   449  
   450  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   451            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
    31  #include <stddef.h>
    32  
    33  __BEGIN_DECLS
    34  
    35  #define _STDLIB_H       1
    36  
    37  #if (defined __USE_XOPEN || defined __USE_XOPEN2K8) && !defined _SYS_WA
        IT_H
    38  /* XPG requires a few symbols from <sys/wait.h> being defined.  */
Open file: /usr/include/bits/waitflags.h
     1  /* Definitions of flag bits for `waitpid' et al.
     2     Copyright (C) 1992-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _SYS_WAIT_H && !defined _STDLIB_H
    20  # error "Never include <bits/waitflags.h> directly; use <sys/wait.h> in
        stead."
    21  #endif
    22  
    23  
    24  /* Bits in the third argument to `waitpid'.  */
    25  #define WNOHANG         1       /* Don't block waiting.  */
    26  #define WUNTRACED       2       /* Report status of stopped children.  
        */
    27  
    28  /* Bits in the fourth argument to `waitid'.  */
    29  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
    30  # define WSTOPPED       2       /* Report stopped child (same as WUNTRA
        CED). */
    31  # define WEXITED        4       /* Report dead child.  */
    32  # define WCONTINUED     8       /* Report continued child.  */
    33  # define WNOWAIT        0x01000000 /* Don't reap, just poll status.  */
    34  #endif
    35  
    36  #define __WNOTHREAD     0x20000000 /* Don't wait on children of other t
        hreads
    37                                        in this group */
    38  #define __WALL          0x40000000 /* Wait for any child.  */
    39  #define __WCLONE        0x80000000 /* Wait for cloned process.  */
Close file: /usr/include/bits/waitflags.h
    39  # include <bits/waitflags.h>
Open file: /usr/include/bits/waitstatus.h
     1  /* Definitions of status bits for `wait' et al.
     2     Copyright (C) 1992-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _SYS_WAIT_H && !defined _STDLIB_H
    20  # error "Never include <bits/waitstatus.h> directly; use <sys/wait.h> i
        nstead."
    21  #endif
    22  
    23  
    24  /* Everything extant so far uses these same bits.  */
    25  
    26  
    27  /* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */
    28  #define __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)
    29  
    30  /* If WIFSIGNALED(STATUS), the terminating signal.  */
    31  #define __WTERMSIG(status)      ((status) & 0x7f)
    32  
    33  /* If WIFSTOPPED(STATUS), the signal that stopped the child.  */
    34  #define __WSTOPSIG(status)      __WEXITSTATUS(status)
    35  
    36  /* Nonzero if STATUS indicates normal termination.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    37  #define __WIFEXITED(status)     (__WTERMSIG(status) == 0)
    38  
    39  /* Nonzero if STATUS indicates termination by a signal.  */
    40  #define __WIFSIGNALED(status) \
    41    (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)
    42  
    43  /* Nonzero if STATUS indicates the child is stopped.  */
    44  #define __WIFSTOPPED(status)    (((status) & 0xff) == 0x7f)
    45  
    46  /* Nonzero if STATUS indicates the child continued after a stop.  We on
        ly
    47     define this if <bits/waitflags.h> provides the WCONTINUED flag bit. 
         */
    48  #ifdef WCONTINUED
    49  # define __WIFCONTINUED(status) ((status) == __W_CONTINUED)
    50  #endif
    51  
    52  /* Nonzero if STATUS indicates the child dumped core.  */
    53  #define __WCOREDUMP(status)     ((status) & __WCOREFLAG)
    54  
    55  /* Macros for constructing status values.  */
    56  #define __W_EXITCODE(ret, sig)  ((ret) << 8 | (sig))
    57  #define __W_STOPCODE(sig)       ((sig) << 8 | 0x7f)
    58  #define __W_CONTINUED           0xffff
    59  #define __WCOREFLAG             0x80
Close file: /usr/include/bits/waitstatus.h
    40  # include <bits/waitstatus.h>
    41  
    42  /* Define the macros <sys/wait.h> also would define this way.  */
    43  # define WEXITSTATUS(status)    __WEXITSTATUS (status)
    44  # define WTERMSIG(status)       __WTERMSIG (status)
    45  # define WSTOPSIG(status)       __WSTOPSIG (status)
    46  # define WIFEXITED(status)      __WIFEXITED (status)
    47  # define WIFSIGNALED(status)    __WIFSIGNALED (status)
    48  # define WIFSTOPPED(status)     __WIFSTOPPED (status)
    49  # ifdef __WIFCONTINUED
    50  #  define WIFCONTINUED(status)  __WIFCONTINUED (status)
    51  # endif
    52  #endif  /* X/Open or XPG7 and <sys/wait.h> not included.  */
    53  
    54  /* _FloatN API tests for enablement.  */
Open file: /usr/include/bits/floatn.h
     1  /* Macros to control TS 18661-3 glibc features on x86.
     2     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_FLOATN_H
    20  #define _BITS_FLOATN_H
    21  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    22  #include <features.h>
    23  
    24  /* Defined to 1 if the current compiler invocation provides a
    25     floating-point type with the IEEE 754 binary128 format, and this
    26     glibc includes corresponding *f128 interfaces for it.  The required
    27     libgcc support was added some time after the basic compiler
    28     support, for x86_64 and x86.  */
    29  #if (defined __x86_64__                                                 
        \
    30       ? __GNUC_PREREQ (4, 3)                                             
        \
    31       : (defined __GNU__ ? __GNUC_PREREQ (4, 5) : __GNUC_PREREQ (4, 4)))
    32  # define __HAVE_FLOAT128 1
    33  #else
    34  # define __HAVE_FLOAT128 0
    35  #endif
    36  
    37  /* Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
    38     from the default float, double and long double types in this glibc. 
         */
    39  #if __HAVE_FLOAT128
    40  # define __HAVE_DISTINCT_FLOAT128 1
    41  #else
    42  # define __HAVE_DISTINCT_FLOAT128 0
    43  #endif
    44  
    45  /* Defined to 1 if the current compiler invocation provides a
    46     floating-point type with the right format for _Float64x, and this
    47     glibc includes corresponding *f64x interfaces for it.  */
    48  #define __HAVE_FLOAT64X 1
    49  
    50  /* Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
    51     of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
    52     the format of _Float128, which must be different from that of long
    53     double.  */
    54  #define __HAVE_FLOAT64X_LONG_DOUBLE 1
    55  
    56  #ifndef __ASSEMBLER__
    57  
    58  /* Defined to concatenate the literal suffix to be used with _Float128
    59     types, if __HAVE_FLOAT128 is 1. */
    60  # if __HAVE_FLOAT128
    61  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    62  /* The literal suffix f128 exists only since GCC 7.0.  */
    63  #   define __f128(x) x##q
    64  #  else
    65  #   define __f128(x) x##f128
    66  #  endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    67  # endif
    68  
    69  /* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */
    70  # if __HAVE_FLOAT128
    71  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    72  /* Add a typedef for older GCC compilers which don't natively support
    73     _Complex _Float128.  */
    74  typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
    75  #   define __CFLOAT128 __cfloat128
    76  #  else
    77  #   define __CFLOAT128 _Complex _Float128
    78  #  endif
    79  # endif
    80  
    81  /* The remaining of this file provides support for older compilers.  */
    82  # if __HAVE_FLOAT128
    83  
    84  /* The type _Float128 exists only since GCC 7.0.  */
    85  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    86  typedef __float128 _Float128;
    87  #  endif
    88  
    89  /* __builtin_huge_valf128 doesn't exist before GCC 7.0.  */
    90  #  if !__GNUC_PREREQ (7, 0)
    91  #   define __builtin_huge_valf128() ((_Float128) __builtin_huge_val ())
    92  #  endif
    93  
    94  /* Older GCC has only a subset of built-in functions for _Float128 on
    95     x86, and __builtin_infq is not usable in static initializers.
    96     Converting a narrower sNaN to _Float128 produces a quiet NaN, so
    97     attempts to use _Float128 sNaNs will not work properly with older
    98     compilers.  */
    99  #  if !__GNUC_PREREQ (7, 0)
   100  #   define __builtin_copysignf128 __builtin_copysignq
   101  #   define __builtin_fabsf128 __builtin_fabsq
   102  #   define __builtin_inff128() ((_Float128) __builtin_inf ())
   103  #   define __builtin_nanf128(x) ((_Float128) __builtin_nan (x))
   104  #   define __builtin_nansf128(x) ((_Float128) __builtin_nans (x))
   105  #  endif
   106  
   107  /* In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
   108     e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
   109     been a __builtin_signbitf128 in GCC and the type-generic builtin is
   110     only available since GCC 6.  */
   111  #  if !__GNUC_PREREQ (6, 0)
   112  #   define __builtin_signbitf128 __signbitf128
   113  #  endif
   114  
   115  # endif
   116  
   117  #endif /* !__ASSEMBLER__.  */
   118  
Open file: /usr/include/bits/floatn-common.h
     1  /* Macros to control TS 18661-3 glibc features where the same
     2     definitions are appropriate for all platforms.
     3     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     4     This file is part of the GNU C Library.
     5  
     6     The GNU C Library is free software; you can redistribute it and/or
     7     modify it under the terms of the GNU Lesser General Public
     8     License as published by the Free Software Foundation; either
     9     version 2.1 of the License, or (at your option) any later version.
    10  
    11     The GNU C Library is distributed in the hope that it will be useful,
    12     but WITHOUT ANY WARRANTY; without even the implied warranty of
    13     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    14     Lesser General Public License for more details.
    15  
    16     You should have received a copy of the GNU Lesser General Public
    17     License along with the GNU C Library; if not, see
    18     <http://www.gnu.org/licenses/>.  */
    19  
    20  #ifndef _BITS_FLOATN_COMMON_H
    21  #define _BITS_FLOATN_COMMON_H

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    22  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    23  #include <features.h>
Open file: /usr/include/bits/long-double.h
     1  /* Properties of long double type.  ldbl-96 version.
     2     Copyright (C) 2016-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License  published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /* long double is distinct from double, so there is nothing to
    20     define here.  */
Close file: /usr/include/bits/long-double.h
    24  #include <bits/long-double.h>
    25  
    26  /* This header should be included at the bottom of each bits/floatn.h.
    27     It defines the following macros for each _FloatN and _FloatNx type,
    28     where the same definitions, or definitions based only on the macros
    29     in bits/floatn.h, are appropriate for all glibc configurations.  */
    30  
    31  /* Defined to 1 if the current compiler invocation provides a
    32     floating-point type with the right format for this type, and this
    33     glibc includes corresponding *fN or *fNx interfaces for it.  */
    34  #define __HAVE_FLOAT16 0
    35  #define __HAVE_FLOAT32 1
    36  #define __HAVE_FLOAT64 1
    37  #define __HAVE_FLOAT32X 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    38  #define __HAVE_FLOAT128X 0
    39  
    40  /* Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
    41     type is the first with its format in the sequence of (the default
    42     choices for) float, double, long double, _Float16, _Float32,
    43     _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
    44     glibc; that is, if functions present once per floating-point format
    45     rather than once per type are present for this type.
    46  
    47     All configurations supported by glibc have _Float32 the same format
    48     as float, _Float64 and _Float32x the same format as double, the
    49     _Float64x the same format as either long double or _Float128.  No
    50     configurations support _Float128x or, as of GCC 7, have compiler
    51     support for a type meeting the requirements for _Float128x.  */
    52  #define __HAVE_DISTINCT_FLOAT16 __HAVE_FLOAT16
    53  #define __HAVE_DISTINCT_FLOAT32 0
    54  #define __HAVE_DISTINCT_FLOAT64 0
    55  #define __HAVE_DISTINCT_FLOAT32X 0
    56  #define __HAVE_DISTINCT_FLOAT64X 0
    57  #define __HAVE_DISTINCT_FLOAT128X __HAVE_FLOAT128X
    58  
    59  /* Defined to 1 if the corresponding _FloatN type is not binary compati
        ble
    60     with the corresponding ISO C type in the current compilation unit as
    61     opposed to __HAVE_DISTINCT_FLOATN, which indicates the default types
         built
    62     in glibc.  */
    63  #define __HAVE_FLOAT128_UNLIKE_LDBL (__HAVE_DISTINCT_FLOAT128   \
    64                                       && __LDBL_MANT_DIG__ != 113)
    65  
    66  /* Defined to 1 if any _FloatN or _FloatNx types that are not
    67     ABI-distinct are however distinct types at the C language level (so
    68     for the purposes of __builtin_types_compatible_p and _Generic).  */
    69  #if __GNUC_PREREQ (7, 0) && !defined __cplusplus
    70  # define __HAVE_FLOATN_NOT_TYPEDEF 1
    71  #else
    72  # define __HAVE_FLOATN_NOT_TYPEDEF 0
    73  #endif
    74  
    75  #ifndef __ASSEMBLER__
    76  
    77  /* Defined to concatenate the literal suffix to be used with _FloatN
    78     or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
    79     literal suffixes exist since GCC 7, for C only.  */
    80  # if __HAVE_FLOAT16
    81  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    82  /* No corresponding suffix available for this type.  */
    83  #   define __f16(x) ((_Float16) x##f)
    84  #  else
    85  #   define __f16(x) x##f16
    86  #  endif
    87  # endif
    88  
    89  # if __HAVE_FLOAT32
    90  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    91  #   define __f32(x) x##f
    92  #  else
    93  #   define __f32(x) x##f32
    94  #  endif
    95  # endif
    96  
    97  # if __HAVE_FLOAT64
    98  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
    99  #   ifdef __NO_LONG_DOUBLE_MATH
   100  #    define __f64(x) x##l
   101  #   else
   102  #    define __f64(x) x
   103  #   endif
   104  #  else
   105  #   define __f64(x) x##f64
   106  #  endif
   107  # endif
   108  
   109  # if __HAVE_FLOAT32X

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   110  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   111  #   define __f32x(x) x
   112  #  else
   113  #   define __f32x(x) x##f32x
   114  #  endif
   115  # endif
   116  
   117  # if __HAVE_FLOAT64X
   118  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   119  #   if __HAVE_FLOAT64X_LONG_DOUBLE
   120  #    define __f64x(x) x##l
   121  #   else
   122  #    define __f64x(x) __f128 (x)
   123  #   endif
   124  #  else
   125  #   define __f64x(x) x##f64x
   126  #  endif
   127  # endif
   128  
   129  # if __HAVE_FLOAT128X
   130  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   131  #   error "_Float128X supported but no constant suffix"
   132  #  else
   133  #   define __f128x(x) x##f128x
   134  #  endif
   135  # endif
   136  
   137  /* Defined to a complex type if __HAVE_<type> is 1.  */
   138  # if __HAVE_FLOAT16
   139  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   140  typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));
   141  #   define __CFLOAT16 __cfloat16
   142  #  else
   143  #   define __CFLOAT16 _Complex _Float16
   144  #  endif
   145  # endif
   146  
   147  # if __HAVE_FLOAT32
   148  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   149  #   define __CFLOAT32 _Complex float
   150  #  else
   151  #   define __CFLOAT32 _Complex _Float32
   152  #  endif
   153  # endif
   154  
   155  # if __HAVE_FLOAT64
   156  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   157  #   ifdef __NO_LONG_DOUBLE_MATH
   158  #    define __CFLOAT64 _Complex long double
   159  #   else
   160  #    define __CFLOAT64 _Complex double
   161  #   endif
   162  #  else
   163  #   define __CFLOAT64 _Complex _Float64
   164  #  endif
   165  # endif
   166  
   167  # if __HAVE_FLOAT32X
   168  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   169  #   define __CFLOAT32X _Complex double
   170  #  else
   171  #   define __CFLOAT32X _Complex _Float32x
   172  #  endif
   173  # endif
   174  
   175  # if __HAVE_FLOAT64X
   176  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   177  #   if __HAVE_FLOAT64X_LONG_DOUBLE
   178  #    define __CFLOAT64X _Complex long double
   179  #   else
   180  #    define __CFLOAT64X __CFLOAT128
   181  #   endif
   182  #  else
   183  #   define __CFLOAT64X _Complex _Float64x

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   184  #  endif
   185  # endif
   186  
   187  # if __HAVE_FLOAT128X
   188  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   189  #   error "_Float128X supported but no complex type"
   190  #  else
   191  #   define __CFLOAT128X _Complex _Float128x
   192  #  endif
   193  # endif
   194  
   195  /* The remaining of this file provides support for older compilers.  */
   196  # if __HAVE_FLOAT16
   197  
   198  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   199  typedef float _Float16 __attribute__ ((__mode__ (__HF__)));
   200  #  endif
   201  
   202  #  if !__GNUC_PREREQ (7, 0)
   203  #   define __builtin_huge_valf16() ((_Float16) __builtin_huge_val ())
   204  #   define __builtin_inff16() ((_Float16) __builtin_inf ())
   205  #   define __builtin_nanf16(x) ((_Float16) __builtin_nan (x))
   206  #   define __builtin_nansf16(x) ((_Float16) __builtin_nans (x))
   207  #  endif
   208  
   209  # endif
   210  
   211  # if __HAVE_FLOAT32
   212  
   213  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   214  typedef float _Float32;
   215  #  endif
   216  
   217  #  if !__GNUC_PREREQ (7, 0)
   218  #   define __builtin_huge_valf32() (__builtin_huge_valf ())
   219  #   define __builtin_inff32() (__builtin_inff ())
   220  #   define __builtin_nanf32(x) (__builtin_nanf (x))
   221  #   define __builtin_nansf32(x) (__builtin_nansf (x))
   222  #  endif
   223  
   224  # endif
   225  
   226  # if __HAVE_FLOAT64
   227  
   228  /* If double, long double and _Float64 all have the same set of
   229     values, TS 18661-3 requires the usual arithmetic conversions on
   230     long double and _Float64 to produce _Float64.  For this to be the
   231     case when building with a compiler without a distinct _Float64
   232     type, _Float64 must be a typedef for long double, not for
   233     double.  */
   234  
   235  #  ifdef __NO_LONG_DOUBLE_MATH
   236  
   237  #   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   238  typedef long double _Float64;
   239  #   endif
   240  
   241  #   if !__GNUC_PREREQ (7, 0)
   242  #    define __builtin_huge_valf64() (__builtin_huge_vall ())
   243  #    define __builtin_inff64() (__builtin_infl ())
   244  #    define __builtin_nanf64(x) (__builtin_nanl (x))
   245  #    define __builtin_nansf64(x) (__builtin_nansl (x))
   246  #   endif
   247  
   248  #  else
   249  
   250  #   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   251  typedef double _Float64;
   252  #   endif
   253  
   254  #   if !__GNUC_PREREQ (7, 0)
   255  #    define __builtin_huge_valf64() (__builtin_huge_val ())
   256  #    define __builtin_inff64() (__builtin_inf ())
   257  #    define __builtin_nanf64(x) (__builtin_nan (x))

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   258  #    define __builtin_nansf64(x) (__builtin_nans (x))
   259  #   endif
   260  
   261  #  endif
   262  
   263  # endif
   264  
   265  # if __HAVE_FLOAT32X
   266  
   267  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   268  typedef double _Float32x;
   269  #  endif
   270  
   271  #  if !__GNUC_PREREQ (7, 0)
   272  #   define __builtin_huge_valf32x() (__builtin_huge_val ())
   273  #   define __builtin_inff32x() (__builtin_inf ())
   274  #   define __builtin_nanf32x(x) (__builtin_nan (x))
   275  #   define __builtin_nansf32x(x) (__builtin_nans (x))
   276  #  endif
   277  
   278  # endif
   279  
   280  # if __HAVE_FLOAT64X
   281  
   282  #  if __HAVE_FLOAT64X_LONG_DOUBLE
   283  
   284  #   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   285  typedef long double _Float64x;
   286  #   endif
   287  
   288  #   if !__GNUC_PREREQ (7, 0)
   289  #    define __builtin_huge_valf64x() (__builtin_huge_vall ())
   290  #    define __builtin_inff64x() (__builtin_infl ())
   291  #    define __builtin_nanf64x(x) (__builtin_nanl (x))
   292  #    define __builtin_nansf64x(x) (__builtin_nansl (x))
   293  #   endif
   294  
   295  #  else
   296  
   297  #   if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   298  typedef _Float128 _Float64x;
   299  #   endif
   300  
   301  #   if !__GNUC_PREREQ (7, 0)
   302  #    define __builtin_huge_valf64x() (__builtin_huge_valf128 ())
   303  #    define __builtin_inff64x() (__builtin_inff128 ())
   304  #    define __builtin_nanf64x(x) (__builtin_nanf128 (x))
   305  #    define __builtin_nansf64x(x) (__builtin_nansf128 (x))
   306  #   endif
   307  
   308  #  endif
   309  
   310  # endif
   311  
   312  # if __HAVE_FLOAT128X
   313  
   314  #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus
   315  #   error "_Float128x supported but no type"
   316  #  endif
   317  
   318  #  if !__GNUC_PREREQ (7, 0)
   319  #   define __builtin_huge_valf128x() ((_Float128x) __builtin_huge_val (
        ))
   320  #   define __builtin_inff128x() ((_Float128x) __builtin_inf ())
   321  #   define __builtin_nanf128x(x) ((_Float128x) __builtin_nan (x))
   322  #   define __builtin_nansf128x(x) ((_Float128x) __builtin_nans (x))
   323  #  endif
   324  
   325  # endif
   326  
   327  #endif /* !__ASSEMBLER__.  */
   328  
   329  #endif /* _BITS_FLOATN_COMMON_H */
Close file: /usr/include/bits/floatn-common.h

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   119  #include <bits/floatn-common.h>
   120  
   121  #endif /* _BITS_FLOATN_H */
Close file: /usr/include/bits/floatn.h
    55  #include <bits/floatn.h>
    56  
    57  /* Returned by `div'.  */
    58  typedef struct
    59    {
    60      int quot;                   /* Quotient.  */
    61      int rem;                    /* Remainder.  */
    62    } div_t;
    63  
    64  /* Returned by `ldiv'.  */
    65  #ifndef __ldiv_t_defined
    66  typedef struct
    67    {
    68      long int quot;              /* Quotient.  */
    69      long int rem;               /* Remainder.  */
    70    } ldiv_t;
    71  # define __ldiv_t_defined       1
    72  #endif
    73  
    74  #if defined __USE_ISOC99 && !defined __lldiv_t_defined
    75  /* Returned by `lldiv'.  */
    76  __extension__ typedef struct
    77    {
    78      long long int quot;         /* Quotient.  */
    79      long long int rem;          /* Remainder.  */
    80    } lldiv_t;
    81  # define __lldiv_t_defined      1
    82  #endif
    83  
    84  
    85  /* The largest number rand will return (same as INT_MAX).  */
    86  #define RAND_MAX        2147483647
    87  
    88  
    89  /* We define these the same for all machines.
    90     Changes from this to the outside world should be done in `_exit'.  *
        /
    91  #define EXIT_FAILURE    1       /* Failing exit status.  */
    92  #define EXIT_SUCCESS    0       /* Successful exit status.  */
    93  
    94  
    95  /* Maximum length of a multibyte character in the current locale.  */
    96  #define MB_CUR_MAX      (__ctype_get_mb_cur_max ())
    97  extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;
    98  
    99  
   100  /* Convert a string to a floating-point number.  */
   101  extern double atof (const char *__nptr)
   102       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   103  /* Convert a string to an integer.  */
   104  extern int atoi (const char *__nptr)
   105       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   106  /* Convert a string to a long integer.  */
   107  extern long int atol (const char *__nptr)
   108       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   109  
   110  #ifdef __USE_ISOC99
   111  /* Convert a string to a long long integer.  */
   112  __extension__ extern long long int atoll (const char *__nptr)
   113       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   114  #endif
   115  
   116  /* Convert a string to a floating-point number.  */
   117  extern double strtod (const char *__restrict __nptr,
   118                        char **__restrict __endptr)
   119       __THROW __nonnull ((1));
   120  
   121  #ifdef  __USE_ISOC99
   122  /* Likewise for `float' and `long double' sizes of floating-point numbe
        rs.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   123  extern float strtof (const char *__restrict __nptr,
   124                       char **__restrict __endptr) __THROW __nonnull ((1)
        );
   125  
   126  extern long double strtold (const char *__restrict __nptr,
   127                              char **__restrict __endptr)
   128       __THROW __nonnull ((1));
   129  #endif
   130  
   131  /* Likewise for '_FloatN' and '_FloatNx'.  */
   132  
   133  #if __HAVE_FLOAT16 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   134  extern _Float16 strtof16 (const char *__restrict __nptr,
   135                            char **__restrict __endptr)
   136       __THROW __nonnull ((1));
   137  #endif
   138  
   139  #if __HAVE_FLOAT32 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   140  extern _Float32 strtof32 (const char *__restrict __nptr,
   141                            char **__restrict __endptr)
   142       __THROW __nonnull ((1));
   143  #endif
   144  
   145  #if __HAVE_FLOAT64 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   146  extern _Float64 strtof64 (const char *__restrict __nptr,
   147                            char **__restrict __endptr)
   148       __THROW __nonnull ((1));
   149  #endif
   150  
   151  #if __HAVE_FLOAT128 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   152  extern _Float128 strtof128 (const char *__restrict __nptr,
   153                              char **__restrict __endptr)
   154       __THROW __nonnull ((1));
   155  #endif
   156  
   157  #if __HAVE_FLOAT32X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   158  extern _Float32x strtof32x (const char *__restrict __nptr,
   159                              char **__restrict __endptr)
   160       __THROW __nonnull ((1));
   161  #endif
   162  
   163  #if __HAVE_FLOAT64X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   164  extern _Float64x strtof64x (const char *__restrict __nptr,
   165                              char **__restrict __endptr)
   166       __THROW __nonnull ((1));
   167  #endif
   168  
   169  #if __HAVE_FLOAT128X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   170  extern _Float128x strtof128x (const char *__restrict __nptr,
   171                                char **__restrict __endptr)
   172       __THROW __nonnull ((1));
   173  #endif
   174  
   175  /* Convert a string to a long integer.  */
   176  extern long int strtol (const char *__restrict __nptr,
   177                          char **__restrict __endptr, int __base)
   178       __THROW __nonnull ((1));
   179  /* Convert a string to an unsigned long integer.  */
   180  extern unsigned long int strtoul (const char *__restrict __nptr,
   181                                    char **__restrict __endptr, int __bas
        e)
   182       __THROW __nonnull ((1));
   183  
   184  #ifdef __USE_MISC
   185  /* Convert a string to a quadword integer.  */
   186  __extension__
   187  extern long long int strtoq (const char *__restrict __nptr,
   188                               char **__restrict __endptr, int __base)
   189       __THROW __nonnull ((1));
   190  /* Convert a string to an unsigned quadword integer.  */
   191  __extension__
   192  extern unsigned long long int strtouq (const char *__restrict __nptr,
   193                                         char **__restrict __endptr, int 
        __base)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   194       __THROW __nonnull ((1));
   195  #endif /* Use misc.  */
   196  
   197  #ifdef __USE_ISOC99
   198  /* Convert a string to a quadword integer.  */
   199  __extension__
   200  extern long long int strtoll (const char *__restrict __nptr,
   201                                char **__restrict __endptr, int __base)
   202       __THROW __nonnull ((1));
   203  /* Convert a string to an unsigned quadword integer.  */
   204  __extension__
   205  extern unsigned long long int strtoull (const char *__restrict __nptr,
   206                                          char **__restrict __endptr, int
         __base)
   207       __THROW __nonnull ((1));
   208  #endif /* ISO C99 or use MISC.  */
   209  
   210  /* Convert a floating-point number to a string.  */
   211  #if __GLIBC_USE (IEC_60559_BFP_EXT)
   212  extern int strfromd (char *__dest, size_t __size, const char *__format,
   213                       double __f)
   214       __THROW __nonnull ((3));
   215  
   216  extern int strfromf (char *__dest, size_t __size, const char *__format,
   217                       float __f)
   218       __THROW __nonnull ((3));
   219  
   220  extern int strfroml (char *__dest, size_t __size, const char *__format,
   221                       long double __f)
   222       __THROW __nonnull ((3));
   223  #endif
   224  
   225  #if __HAVE_FLOAT16 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   226  extern int strfromf16 (char *__dest, size_t __size, const char * __form
        at,
   227                         _Float16 __f)
   228       __THROW __nonnull ((3));
   229  #endif
   230  
   231  #if __HAVE_FLOAT32 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   232  extern int strfromf32 (char *__dest, size_t __size, const char * __form
        at,
   233                         _Float32 __f)
   234       __THROW __nonnull ((3));
   235  #endif
   236  
   237  #if __HAVE_FLOAT64 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   238  extern int strfromf64 (char *__dest, size_t __size, const char * __form
        at,
   239                         _Float64 __f)
   240       __THROW __nonnull ((3));
   241  #endif
   242  
   243  #if __HAVE_FLOAT128 && __GLIBC_USE (IEC_60559_TYPES_EXT)
   244  extern int strfromf128 (char *__dest, size_t __size, const char * __for
        mat,
   245                          _Float128 __f)
   246       __THROW __nonnull ((3));
   247  #endif
   248  
   249  #if __HAVE_FLOAT32X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   250  extern int strfromf32x (char *__dest, size_t __size, const char * __for
        mat,
   251                          _Float32x __f)
   252       __THROW __nonnull ((3));
   253  #endif
   254  
   255  #if __HAVE_FLOAT64X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   256  extern int strfromf64x (char *__dest, size_t __size, const char * __for
        mat,
   257                          _Float64x __f)
   258       __THROW __nonnull ((3));
   259  #endif
   260  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   261  #if __HAVE_FLOAT128X && __GLIBC_USE (IEC_60559_TYPES_EXT)
   262  extern int strfromf128x (char *__dest, size_t __size, const char * __fo
        rmat,
   263                           _Float128x __f)
   264       __THROW __nonnull ((3));
   265  #endif
   266  
   267  
   268  #ifdef __USE_GNU
   269  /* Parallel versions of the functions above which take the locale to
   270     use as an additional parameter.  These are GNU extensions inspired
   271     by the POSIX.1-2008 extended locale API.  */
   272  # include <bits/types/locale_t.h>
   273  
   274  extern long int strtol_l (const char *__restrict __nptr,
   275                            char **__restrict __endptr, int __base,
   276                            locale_t __loc) __THROW __nonnull ((1, 4));
   277  
   278  extern unsigned long int strtoul_l (const char *__restrict __nptr,
   279                                      char **__restrict __endptr,
   280                                      int __base, locale_t __loc)
   281       __THROW __nonnull ((1, 4));
   282  
   283  __extension__
   284  extern long long int strtoll_l (const char *__restrict __nptr,
   285                                  char **__restrict __endptr, int __base,
   286                                  locale_t __loc)
   287       __THROW __nonnull ((1, 4));
   288  
   289  __extension__
   290  extern unsigned long long int strtoull_l (const char *__restrict __nptr
        ,
   291                                            char **__restrict __endptr,
   292                                            int __base, locale_t __loc)
   293       __THROW __nonnull ((1, 4));
   294  
   295  extern double strtod_l (const char *__restrict __nptr,
   296                          char **__restrict __endptr, locale_t __loc)
   297       __THROW __nonnull ((1, 3));
   298  
   299  extern float strtof_l (const char *__restrict __nptr,
   300                         char **__restrict __endptr, locale_t __loc)
   301       __THROW __nonnull ((1, 3));
   302  
   303  extern long double strtold_l (const char *__restrict __nptr,
   304                                char **__restrict __endptr,
   305                                locale_t __loc)
   306       __THROW __nonnull ((1, 3));
   307  
   308  # if __HAVE_FLOAT16
   309  extern _Float16 strtof16_l (const char *__restrict __nptr,
   310                              char **__restrict __endptr,
   311                              locale_t __loc)
   312       __THROW __nonnull ((1, 3));
   313  # endif
   314  
   315  # if __HAVE_FLOAT32
   316  extern _Float32 strtof32_l (const char *__restrict __nptr,
   317                              char **__restrict __endptr,
   318                              locale_t __loc)
   319       __THROW __nonnull ((1, 3));
   320  # endif
   321  
   322  # if __HAVE_FLOAT64
   323  extern _Float64 strtof64_l (const char *__restrict __nptr,
   324                              char **__restrict __endptr,
   325                              locale_t __loc)
   326       __THROW __nonnull ((1, 3));
   327  # endif
   328  
   329  # if __HAVE_FLOAT128
   330  extern _Float128 strtof128_l (const char *__restrict __nptr,
   331                                char **__restrict __endptr,
   332                                locale_t __loc)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   333       __THROW __nonnull ((1, 3));
   334  # endif
   335  
   336  # if __HAVE_FLOAT32X
   337  extern _Float32x strtof32x_l (const char *__restrict __nptr,
   338                                char **__restrict __endptr,
   339                                locale_t __loc)
   340       __THROW __nonnull ((1, 3));
   341  # endif
   342  
   343  # if __HAVE_FLOAT64X
   344  extern _Float64x strtof64x_l (const char *__restrict __nptr,
   345                                char **__restrict __endptr,
   346                                locale_t __loc)
   347       __THROW __nonnull ((1, 3));
   348  # endif
   349  
   350  # if __HAVE_FLOAT128X
   351  extern _Float128x strtof128x_l (const char *__restrict __nptr,
   352                                  char **__restrict __endptr,
   353                                  locale_t __loc)
   354       __THROW __nonnull ((1, 3));
   355  # endif
   356  #endif /* GNU */
   357  
   358  
   359  #ifdef __USE_EXTERN_INLINES
   360  __extern_inline int
   361  __NTH (atoi (const char *__nptr))
   362  {
   363    return (int) strtol (__nptr, (char **) NULL, 10);
   364  }
   365  __extern_inline long int
   366  __NTH (atol (const char *__nptr))
   367  {
   368    return strtol (__nptr, (char **) NULL, 10);
   369  }
   370  
   371  # ifdef __USE_ISOC99
   372  __extension__ __extern_inline long long int
   373  __NTH (atoll (const char *__nptr))
   374  {
   375    return strtoll (__nptr, (char **) NULL, 10);
   376  }
   377  # endif
   378  #endif /* Optimizing and Inlining.  */
   379  
   380  
   381  #if defined __USE_MISC || defined __USE_XOPEN_EXTENDED
   382  /* Convert N to base 64 using the digits "./0-9A-Za-z", least-significa
        nt
   383     digit first.  Returns a pointer to static storage overwritten by the
   384     next call.  */
   385  extern char *l64a (long int __n) __THROW __wur;
   386  
   387  /* Read a number from a string S in base 64 as above.  */
   388  extern long int a64l (const char *__s)
   389       __THROW __attribute_pure__ __nonnull ((1)) __wur;
   390  
   391  #endif  /* Use misc || extended X/Open.  */
   392  
   393  #if defined __USE_MISC || defined __USE_XOPEN_EXTENDED
Open file: /usr/include/sys/types.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  /*
    19   *      POSIX Standard: 2.6 Primitive System Data Types <sys/types.h>
    20   */
    21  
    22  #ifndef _SYS_TYPES_H
    23  #define _SYS_TYPES_H    1
    24  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    25  #include <features.h>
    26  
    27  __BEGIN_DECLS
    28  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    29  #include <bits/types.h>
    30  
    31  #ifdef  __USE_MISC
    32  # ifndef __u_char_defined
    33  typedef __u_char u_char;
    34  typedef __u_short u_short;
    35  typedef __u_int u_int;
    36  typedef __u_long u_long;
    37  typedef __quad_t quad_t;
    38  typedef __u_quad_t u_quad_t;
    39  typedef __fsid_t fsid_t;
    40  #  define __u_char_defined
    41  # endif
    42  typedef __loff_t loff_t;
    43  #endif
    44  
    45  #ifndef __ino_t_defined
    46  # ifndef __USE_FILE_OFFSET64
    47  typedef __ino_t ino_t;
    48  # else
    49  typedef __ino64_t ino_t;
    50  # endif
    51  # define __ino_t_defined
    52  #endif
    53  #if defined __USE_LARGEFILE64 && !defined __ino64_t_defined
    54  typedef __ino64_t ino64_t;
    55  # define __ino64_t_defined
    56  #endif
    57  
    58  #ifndef __dev_t_defined
    59  typedef __dev_t dev_t;
    60  # define __dev_t_defined
    61  #endif
    62  
    63  #ifndef __gid_t_defined
    64  typedef __gid_t gid_t;
    65  # define __gid_t_defined
    66  #endif
    67  
    68  #ifndef __mode_t_defined
    69  typedef __mode_t mode_t;
    70  # define __mode_t_defined
    71  #endif
    72  
    73  #ifndef __nlink_t_defined
    74  typedef __nlink_t nlink_t;
    75  # define __nlink_t_defined
    76  #endif
    77  
    78  #ifndef __uid_t_defined
    79  typedef __uid_t uid_t;
    80  # define __uid_t_defined
    81  #endif
    82  
    83  #ifndef __off_t_defined
    84  # ifndef __USE_FILE_OFFSET64
    85  typedef __off_t off_t;
    86  # else
    87  typedef __off64_t off_t;
    88  # endif
    89  # define __off_t_defined
    90  #endif
    91  #if defined __USE_LARGEFILE64 && !defined __off64_t_defined
    92  typedef __off64_t off64_t;
    93  # define __off64_t_defined
    94  #endif
    95  
    96  #ifndef __pid_t_defined
    97  typedef __pid_t pid_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    98  # define __pid_t_defined
    99  #endif
   100  
   101  #if (defined __USE_XOPEN || defined __USE_XOPEN2K8) \
   102      && !defined __id_t_defined
   103  typedef __id_t id_t;
   104  # define __id_t_defined
   105  #endif
   106  
   107  #ifndef __ssize_t_defined
   108  typedef __ssize_t ssize_t;
   109  # define __ssize_t_defined
   110  #endif
   111  
   112  #ifdef  __USE_MISC
   113  # ifndef __daddr_t_defined
   114  typedef __daddr_t daddr_t;
   115  typedef __caddr_t caddr_t;
   116  #  define __daddr_t_defined
   117  # endif
   118  #endif
   119  
   120  #if (defined __USE_MISC || defined __USE_XOPEN) && !defined __key_t_def
        ined
   121  typedef __key_t key_t;
   122  # define __key_t_defined
   123  #endif
   124  
   125  #if defined __USE_XOPEN || defined __USE_XOPEN2K8
Open file: /usr/include/bits/types/clock_t.h
     1  #ifndef __clock_t_defined
     2  #define __clock_t_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
     5  
     6  /* Returned by `clock'.  */
     7  typedef __clock_t clock_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/clock_t.h
   126  # include <bits/types/clock_t.h>
   127  #endif
Open file: /usr/include/bits/types/clockid_t.h
     1  #ifndef __clockid_t_defined
     2  #define __clockid_t_defined 1
     3  
Open file: /usr/include/bits/types.h

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
     5  
     6  /* Clock ID used in clock and timer functions.  */
     7  typedef __clockid_t clockid_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/clockid_t.h
   128  #include <bits/types/clockid_t.h>
Open file: /usr/include/bits/types/time_t.h
     1  #ifndef __time_t_defined
     2  #define __time_t_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
     5  
     6  /* Returned by `time'.  */
     7  typedef __time_t time_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/time_t.h
   129  #include <bits/types/time_t.h>
Open file: /usr/include/bits/types/timer_t.h
     1  #ifndef __timer_t_defined

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

     2  #define __timer_t_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
     5  
     6  /* Timer ID returned by `timer_create'.  */
     7  typedef __timer_t timer_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/timer_t.h
   130  #include <bits/types/timer_t.h>
   131  
   132  #ifdef __USE_XOPEN
   133  # ifndef __useconds_t_defined
   134  typedef __useconds_t useconds_t;
   135  #  define __useconds_t_defined
   136  # endif
   137  # ifndef __suseconds_t_defined
   138  typedef __suseconds_t suseconds_t;
   139  #  define __suseconds_t_defined
   140  # endif
   141  #endif
   142  
   143  #define __need_size_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
     1  /* Copyright (C) 1989-2018 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)
    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.
   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #ifndef _PTRDIFF_T_DECLARED /* DragonFly */
   137  #define _PTRDIFF_T
   138  #define _T_PTRDIFF_
   139  #define _T_PTRDIFF
   140  #define __PTRDIFF_T
   141  #define _PTRDIFF_T_
   142  #define _BSD_PTRDIFF_T_
   143  #define ___int_ptrdiff_t_h
   144  #define _GCC_PTRDIFF_T
   145  #define _PTRDIFF_T_DECLARED
   146  #ifndef __PTRDIFF_TYPE__
   147  #define __PTRDIFF_TYPE__ long int
   148  #endif
   149  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   150  #endif /* _PTRDIFF_T_DECLARED */
   151  #endif /* _GCC_PTRDIFF_T */
   152  #endif /* ___int_ptrdiff_t_h */
   153  #endif /* _BSD_PTRDIFF_T_ */
   154  #endif /* _PTRDIFF_T_ */
   155  #endif /* __PTRDIFF_T */
   156  #endif /* _T_PTRDIFF */
   157  #endif /* _T_PTRDIFF_ */
   158  #endif /* _PTRDIFF_T */
   159  
   160  /* If this symbol has done its job, get rid of it.  */
   161  #undef  __need_ptrdiff_t
   162  
   163  #endif /* _STDDEF_H or __need_ptrdiff_t.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   164  
   165  /* Unsigned type of `sizeof' something.  */
   166  
   167  /* Define this type if we are doing the whole job,
   168     or if we want this type in particular.  */
   169  #if defined (_STDDEF_H) || defined (__need_size_t)
   170  #ifndef __size_t__      /* BeOS */
   171  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   172  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */
   173  #ifndef _SYS_SIZE_T_H
   174  #ifndef _T_SIZE_
   175  #ifndef _T_SIZE
   176  #ifndef __SIZE_T
   177  #ifndef _SIZE_T_
   178  #ifndef _BSD_SIZE_T_
   179  #ifndef _SIZE_T_DEFINED_
   180  #ifndef _SIZE_T_DEFINED
   181  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   182  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   183  #ifndef ___int_size_t_h
   184  #ifndef _GCC_SIZE_T
   185  #ifndef _SIZET_
   186  #ifndef __size_t
   187  #define __size_t__      /* BeOS */
   188  #define __SIZE_T__      /* Cray Unicos/Mk */
   189  #define _SIZE_T
   190  #define _SYS_SIZE_T_H
   191  #define _T_SIZE_
   192  #define _T_SIZE
   193  #define __SIZE_T
   194  #define _SIZE_T_
   195  #define _BSD_SIZE_T_
   196  #define _SIZE_T_DEFINED_
   197  #define _SIZE_T_DEFINED
   198  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   199  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   200  #define ___int_size_t_h
   201  #define _GCC_SIZE_T
   202  #define _SIZET_
   203  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   204    || defined(__DragonFly__) \
   205    || defined(__FreeBSD_kernel__)
   206  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   207  #elif defined (__VMS__)
   208  /* __size_t is also a typedef on VMS.  */
   209  #else
   210  #define __size_t
   211  #endif
   212  #ifndef __SIZE_TYPE__
   213  #define __SIZE_TYPE__ long unsigned int
   214  #endif
   215  #if !(defined (__GNUG__) && defined (size_t))
   216  typedef __SIZE_TYPE__ size_t;
   217  #ifdef __BEOS__
   218  typedef long ssize_t;
   219  #endif /* __BEOS__ */
   220  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   221  #endif /* __size_t */
   222  #endif /* _SIZET_ */
   223  #endif /* _GCC_SIZE_T */
   224  #endif /* ___int_size_t_h */
   225  #endif /* _SIZE_T_DECLARED */
   226  #endif /* _BSD_SIZE_T_DEFINED_ */
   227  #endif /* _SIZE_T_DEFINED */
   228  #endif /* _SIZE_T_DEFINED_ */
   229  #endif /* _BSD_SIZE_T_ */
   230  #endif /* _SIZE_T_ */
   231  #endif /* __SIZE_T */
   232  #endif /* _T_SIZE */
   233  #endif /* _T_SIZE_ */
   234  #endif /* _SYS_SIZE_T_H */
   235  #endif /* _SIZE_T */
   236  #endif /* __SIZE_T__ */
   237  #endif /* __size_t__ */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   238  #undef  __need_size_t
   239  #endif /* _STDDEF_H or __need_size_t.  */
   240  
   241  
   242  /* Wide character type.
   243     Locale-writers should change this as necessary to
   244     be big enough to hold unique values not between 0 and 127,
   245     and not (wchar_t) -1, for each defined multibyte character.  */
   246  
   247  /* Define this type if we are doing the whole job,
   248     or if we want this type in particular.  */
   249  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   250  #ifndef __wchar_t__     /* BeOS */
   251  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   252  #ifndef _WCHAR_T
   253  #ifndef _T_WCHAR_
   254  #ifndef _T_WCHAR
   255  #ifndef __WCHAR_T
   256  #ifndef _WCHAR_T_
   257  #ifndef _BSD_WCHAR_T_
   258  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   259  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   260  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   261  #ifndef _WCHAR_T_DEFINED_
   262  #ifndef _WCHAR_T_DEFINED
   263  #ifndef _WCHAR_T_H
   264  #ifndef ___int_wchar_t_h
   265  #ifndef __INT_WCHAR_T_H
   266  #ifndef _GCC_WCHAR_T
   267  #define __wchar_t__     /* BeOS */
   268  #define __WCHAR_T__     /* Cray Unicos/Mk */
   269  #define _WCHAR_T
   270  #define _T_WCHAR_
   271  #define _T_WCHAR
   272  #define __WCHAR_T
   273  #define _WCHAR_T_
   274  #define _BSD_WCHAR_T_
   275  #define _WCHAR_T_DEFINED_
   276  #define _WCHAR_T_DEFINED
   277  #define _WCHAR_T_H
   278  #define ___int_wchar_t_h
   279  #define __INT_WCHAR_T_H
   280  #define _GCC_WCHAR_T
   281  #define _WCHAR_T_DECLARED
   282  
   283  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   284     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   285     symbols in the _FOO_T_ family, stays defined even after its
   286     corresponding type is defined).  If we define wchar_t, then we
   287     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   288     we undef _WCHAR_T_, then we must also define rune_t, since 
   289     headers like runetype.h assume that if machine/ansi.h is included,
   290     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   291     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   292     the same type." */
   293  #ifdef _BSD_WCHAR_T_
   294  #undef _BSD_WCHAR_T_
   295  #ifdef _BSD_RUNE_T_
   296  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   297  typedef _BSD_RUNE_T_ rune_t;
   298  #define _BSD_WCHAR_T_DEFINED_
   299  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   300  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   301  /* Why is this file so hard to maintain properly?  In contrast to
   302     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   303     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   304     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   305  #undef _BSD_RUNE_T_
   306  #endif
   307  #endif
   308  #endif
   309  #endif
   310  /* FreeBSD 5 can't be handled well using "traditional" logic above

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   311     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   312     rune_t in some cases... */
   313  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   314  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   315  #if __BSD_VISIBLE
   316  #ifndef _RUNE_T_DECLARED
   317  typedef __rune_t        rune_t;
   318  #define _RUNE_T_DECLARED
   319  #endif
   320  #endif
   321  #endif
   322  #endif
   323  
   324  #ifndef __WCHAR_TYPE__
   325  #define __WCHAR_TYPE__ int
   326  #endif
   327  #ifndef __cplusplus
   328  typedef __WCHAR_TYPE__ wchar_t;
   329  #endif
   330  #endif
   331  #endif
   332  #endif
   333  #endif
   334  #endif
   335  #endif
   336  #endif /* _WCHAR_T_DECLARED */
   337  #endif /* _BSD_RUNE_T_DEFINED_ */
   338  #endif
   339  #endif
   340  #endif
   341  #endif
   342  #endif
   343  #endif
   344  #endif
   345  #endif /* __WCHAR_T__ */
   346  #endif /* __wchar_t__ */
   347  #undef  __need_wchar_t
   348  #endif /* _STDDEF_H or __need_wchar_t.  */
   349  
   350  #if defined (__need_wint_t)
   351  #ifndef _WINT_T
   352  #define _WINT_T
   353  
   354  #ifndef __WINT_TYPE__
   355  #define __WINT_TYPE__ unsigned int
   356  #endif
   357  typedef __WINT_TYPE__ wint_t;
   358  #endif
   359  #undef __need_wint_t
   360  #endif
   361  
   362  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   363      are already defined.  */
   364  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   365  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   366  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   367  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   368      are probably typos and should be removed before 2.8 is released.  *
        /
   369  #ifdef _GCC_PTRDIFF_T_
   370  #undef _PTRDIFF_T_
   371  #undef _BSD_PTRDIFF_T_
   372  #endif
   373  #ifdef _GCC_SIZE_T_
   374  #undef _SIZE_T_
   375  #undef _BSD_SIZE_T_
   376  #endif
   377  #ifdef _GCC_WCHAR_T_
   378  #undef _WCHAR_T_
   379  #undef _BSD_WCHAR_T_
   380  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   381  /*  The following ones are the real ones.  */
   382  #ifdef _GCC_PTRDIFF_T
   383  #undef _PTRDIFF_T_
   384  #undef _BSD_PTRDIFF_T_
   385  #endif
   386  #ifdef _GCC_SIZE_T
   387  #undef _SIZE_T_
   388  #undef _BSD_SIZE_T_
   389  #endif
   390  #ifdef _GCC_WCHAR_T
   391  #undef _WCHAR_T_
   392  #undef _BSD_WCHAR_T_
   393  #endif
   394  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   395  
   396  #endif /* __sys_stdtypes_h */
   397  
   398  /* A null pointer constant.  */
   399  
   400  #if defined (_STDDEF_H) || defined (__need_NULL)
   401  #undef NULL             /* in case <stdio.h> has defined it. */
   402  #ifdef __GNUG__
   403  #define NULL __null
   404  #else   /* G++ */
   405  #ifndef __cplusplus
   406  #define NULL ((void *)0)
   407  #else   /* C++ */
   408  #define NULL 0
   409  #endif  /* C++ */
   410  #endif  /* G++ */
   411  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   412  #undef  __need_NULL
   413  
   414  #ifdef _STDDEF_H
   415  
   416  /* Offset of member MEMBER in a struct of type TYPE. */
   417  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   418  
   419  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   420    || (defined(__cplusplus) && __cplusplus >= 201103L)
   421  #ifndef _GCC_MAX_ALIGN_T
   422  #define _GCC_MAX_ALIGN_T
   423  /* Type whose alignment is supported in every context and is at least
   424     as great as that of any standard type not using alignment
   425     specifiers.  */
   426  typedef struct {
   427    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   428    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   429    /* _Float128 is defined as a basic type, so max_align_t must be
   430       sufficiently aligned for it.  This code must work in C++, so we
   431       use __float128 here; that is only available on some
   432       architectures, but only on i386 is extra alignment needed for
   433       __float128.  */
   434  #ifdef __i386__
   435    __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__fl
        oat128))));
   436  #endif
   437  } max_align_t;
   438  #endif
   439  #endif /* C11 or C++11.  */
   440  
   441  #if defined(__cplusplus) && __cplusplus >= 201103L
   442  #ifndef _GXX_NULLPTR_T
   443  #define _GXX_NULLPTR_T
   444    typedef decltype(nullptr) nullptr_t;
   445  #endif
   446  #endif /* C++11.  */
   447  
   448  #endif /* _STDDEF_H was defined this time */
   449  
   450  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   451            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
   144  #include <stddef.h>
   145  
   146  #ifdef __USE_MISC
   147  /* Old compatibility names for C types.  */
   148  typedef unsigned long int ulong;
   149  typedef unsigned short int ushort;
   150  typedef unsigned int uint;
   151  #endif
   152  
   153  /* These size-specific names are used by some of the inet code.  */
   154  
Open file: /usr/include/bits/stdint-intn.h
     1  /* Define intN_t types.
     2     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _BITS_STDINT_INTN_H
    20  #define _BITS_STDINT_INTN_H     1
    21  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    22  #include <bits/types.h>
    23  
    24  typedef __int8_t int8_t;
    25  typedef __int16_t int16_t;
    26  typedef __int32_t int32_t;
    27  typedef __int64_t int64_t;
    28  
    29  #endif /* bits/stdint-intn.h */
Close file: /usr/include/bits/stdint-intn.h
   155  #include <bits/stdint-intn.h>
   156  
   157  /* These were defined by ISO C without the first `_'.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   158  typedef __uint8_t u_int8_t;
   159  typedef __uint16_t u_int16_t;
   160  typedef __uint32_t u_int32_t;
   161  typedef __uint64_t u_int64_t;
   162  
   163  #if __GNUC_PREREQ (2, 7)
   164  typedef int register_t __attribute__ ((__mode__ (__word__)));
   165  #else
   166  typedef int register_t;
   167  #endif
   168  
   169  /* Some code from BIND tests this macro to see if the types above are
   170     defined.  */
   171  #define __BIT_TYPES_DEFINED__   1
   172  
   173  
   174  #ifdef  __USE_MISC
   175  /* In BSD <sys/types.h> is expected to define BYTE_ORDER.  */
Open file: /usr/include/endian.h
     1  /* Copyright (C) 1992-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _ENDIAN_H
    19  #define _ENDIAN_H       1
    20  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

Close file: /usr/include/features.h
    21  #include <features.h>
    22  
    23  /* Definitions for byte order, according to significance of bytes,
    24     from low addresses to high addresses.  The value is what you get by
    25     putting '4' in the most significant byte, '3' in the second most
    26     significant byte, '2' in the second least significant byte, and '1'
    27     in the least significant byte, and then writing down one digit for
    28     each byte, starting with the byte at the lowest address at the left,
    29     and proceeding to the byte with the highest address at the right.  *
        /
    30  
    31  #define __LITTLE_ENDIAN 1234
    32  #define __BIG_ENDIAN    4321
    33  #define __PDP_ENDIAN    3412
    34  
    35  /* This file defines `__BYTE_ORDER' for the particular machine.  */
Open file: /usr/include/bits/endian.h
     1  /* i386/x86_64 are little-endian.  */
     2  
     3  #ifndef _ENDIAN_H
     4  # error "Never use <bits/endian.h> directly; include <endian.h> instead
        ."
     5  #endif
     6  
     7  #define __BYTE_ORDER __LITTLE_ENDIAN
Close file: /usr/include/bits/endian.h
    36  #include <bits/endian.h>
    37  
    38  /* Some machines may need to use a different endianness for floating po
        int
    39     values.  */
    40  #ifndef __FLOAT_WORD_ORDER
    41  # define __FLOAT_WORD_ORDER __BYTE_ORDER
    42  #endif
    43  
    44  #ifdef  __USE_MISC
    45  # define LITTLE_ENDIAN  __LITTLE_ENDIAN
    46  # define BIG_ENDIAN     __BIG_ENDIAN
    47  # define PDP_ENDIAN     __PDP_ENDIAN
    48  # define BYTE_ORDER     __BYTE_ORDER
    49  #endif
    50  
    51  #if __BYTE_ORDER == __LITTLE_ENDIAN
    52  # define __LONG_LONG_PAIR(HI, LO) LO, HI
    53  #elif __BYTE_ORDER == __BIG_ENDIAN
    54  # define __LONG_LONG_PAIR(HI, LO) HI, LO
    55  #endif
    56  
    57  
    58  #if defined __USE_MISC && !defined __ASSEMBLER__
    59  /* Conversion interfaces.  */
Open file: /usr/include/bits/byteswap.h
     1  /* Macros and inline functions to swap the order of bytes in integer va
        lues.
     2     Copyright (C) 1997-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _BYTESWAP_H && !defined _NETINET_IN_H && !defined _ENDIAN_
        H

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    20  # error "Never use <bits/byteswap.h> directly; include <byteswap.h> ins
        tead."
    21  #endif
    22  
    23  #ifndef _BITS_BYTESWAP_H
    24  #define _BITS_BYTESWAP_H 1
    25  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    26  #include <features.h>
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    27  #include <bits/types.h>
    28  
    29  /* Swap bytes in 16-bit value.  */
    30  #define __bswap_constant_16(x)                                  \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    31    ((__uint16_t) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))
    32  
    33  static __inline __uint16_t
    34  __bswap_16 (__uint16_t __bsx)
    35  {
    36  #if __GNUC_PREREQ (4, 8)
    37    return __builtin_bswap16 (__bsx);
    38  #else
    39    return __bswap_constant_16 (__bsx);
    40  #endif
    41  }
    42  
    43  /* Swap bytes in 32-bit value.  */
    44  #define __bswap_constant_32(x)                                  \
    45    ((((x) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8)     \
    46     | (((x) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))
    47  
    48  static __inline __uint32_t
    49  __bswap_32 (__uint32_t __bsx)
    50  {
    51  #if __GNUC_PREREQ (4, 3)
    52    return __builtin_bswap32 (__bsx);
    53  #else
    54    return __bswap_constant_32 (__bsx);
    55  #endif
    56  }
    57  
    58  /* Swap bytes in 64-bit value.  */
    59  #define __bswap_constant_64(x)                  \
    60    ((((x) & 0xff00000000000000ull) >> 56)        \
    61     | (((x) & 0x00ff000000000000ull) >> 40)      \
    62     | (((x) & 0x0000ff0000000000ull) >> 24)      \
    63     | (((x) & 0x000000ff00000000ull) >> 8)       \
    64     | (((x) & 0x00000000ff000000ull) << 8)       \
    65     | (((x) & 0x0000000000ff0000ull) << 24)      \
    66     | (((x) & 0x000000000000ff00ull) << 40)      \
    67     | (((x) & 0x00000000000000ffull) << 56))
    68  
    69  __extension__ static __inline __uint64_t
    70  __bswap_64 (__uint64_t __bsx)
    71  {
    72  #if __GNUC_PREREQ (4, 3)
    73    return __builtin_bswap64 (__bsx);
    74  #else
    75    return __bswap_constant_64 (__bsx);
    76  #endif
    77  }
    78  
    79  #endif /* _BITS_BYTESWAP_H */
Close file: /usr/include/bits/byteswap.h
    60  # include <bits/byteswap.h>
Open file: /usr/include/bits/uintn-identity.h
     1  /* Inline functions to return unsigned integer values unchanged.
     2     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #if !defined _NETINET_IN_H && !defined _ENDIAN_H
    20  # error "Never use <bits/uintn-identity.h> directly; include <netinet/i
        n.h> or <endian.h> instead."
    21  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    22  
    23  #ifndef _BITS_UINTN_IDENTITY_H
    24  #define _BITS_UINTN_IDENTITY_H 1
    25  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    26  #include <bits/types.h>
    27  
    28  /* These inline functions are to ensure the appropriate type
    29     conversions and associated diagnostics from macros that convert to
    30     a given endianness.  */
    31  
    32  static __inline __uint16_t
    33  __uint16_identity (__uint16_t __x)
    34  {
    35    return __x;
    36  }
    37  
    38  static __inline __uint32_t
    39  __uint32_identity (__uint32_t __x)
    40  {
    41    return __x;
    42  }
    43  
    44  static __inline __uint64_t
    45  __uint64_identity (__uint64_t __x)
    46  {
    47    return __x;
    48  }
    49  
    50  #endif /* _BITS_UINTN_IDENTITY_H.  */
Close file: /usr/include/bits/uintn-identity.h
    61  # include <bits/uintn-identity.h>
    62  
    63  # if __BYTE_ORDER == __LITTLE_ENDIAN
    64  #  define htobe16(x) __bswap_16 (x)
    65  #  define htole16(x) __uint16_identity (x)
    66  #  define be16toh(x) __bswap_16 (x)
    67  #  define le16toh(x) __uint16_identity (x)
    68  
    69  #  define htobe32(x) __bswap_32 (x)
    70  #  define htole32(x) __uint32_identity (x)
    71  #  define be32toh(x) __bswap_32 (x)
    72  #  define le32toh(x) __uint32_identity (x)
    73  
    74  #  define htobe64(x) __bswap_64 (x)
    75  #  define htole64(x) __uint64_identity (x)
    76  #  define be64toh(x) __bswap_64 (x)
    77  #  define le64toh(x) __uint64_identity (x)
    78  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    79  # else
    80  #  define htobe16(x) __uint16_identity (x)
    81  #  define htole16(x) __bswap_16 (x)
    82  #  define be16toh(x) __uint16_identity (x)
    83  #  define le16toh(x) __bswap_16 (x)
    84  
    85  #  define htobe32(x) __uint32_identity (x)
    86  #  define htole32(x) __bswap_32 (x)
    87  #  define be32toh(x) __uint32_identity (x)
    88  #  define le32toh(x) __bswap_32 (x)
    89  
    90  #  define htobe64(x) __uint64_identity (x)
    91  #  define htole64(x) __bswap_64 (x)
    92  #  define be64toh(x) __uint64_identity (x)
    93  #  define le64toh(x) __bswap_64 (x)
    94  # endif
    95  #endif
    96  
    97  #endif  /* endian.h */
Close file: /usr/include/endian.h
   176  # include <endian.h>
   177  
   178  /* It also defines `fd_set' and the FD_* macros for `select'.  */
Open file: /usr/include/sys/select.h
     1  /* `fd_set' type and related macros, and `select'/`pselect' declaration
        s.
     2     Copyright (C) 1996-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*      POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select
        .h>  */
    20  
    21  #ifndef _SYS_SELECT_H
    22  #define _SYS_SELECT_H   1
    23  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI
   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED
   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L
   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1
   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))
   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    24  #include <features.h>
    25  
    26  /* Get definition of needed basic types.  */
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
    27  #include <bits/types.h>
    28  
    29  /* Get __FD_* definitions.  */
Open file: /usr/include/bits/select.h
     1  /* Copyright (C) 1997-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _SYS_SELECT_H
    19  # error "Never use <bits/select.h> directly; include <sys/select.h> ins
        tead."
    20  #endif
    21  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

     7  #define __WORDSIZE32_SIZE_ULONG         0
     8  #define __WORDSIZE32_PTRDIFF_LONG       0
     9  #endif
    10  
    11  #ifdef __x86_64__
    12  # define __WORDSIZE_TIME64_COMPAT32     1
    13  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    14  # define __SYSCALL_WORDSIZE             64
    15  #else
    16  # define __WORDSIZE_TIME64_COMPAT32     0
    17  #endif
Close file: /usr/include/bits/wordsize.h
    22  #include <bits/wordsize.h>
    23  
    24  
    25  #if defined __GNUC__ && __GNUC__ >= 2
    26  
    27  # if __WORDSIZE == 64
    28  #  define __FD_ZERO_STOS "stosq"
    29  # else
    30  #  define __FD_ZERO_STOS "stosl"
    31  # endif
    32  
    33  # define __FD_ZERO(fdsp) \
    34    do {                                                                  
              \
    35      int __d0, __d1;                                                     
              \
    36      __asm__ __volatile__ ("cld; rep; " __FD_ZERO_STOS                   
              \
    37                            : "=c" (__d0), "=D" (__d1)                    
              \
    38                            : "a" (0), "0" (sizeof (fd_set)               
              \
    39                                            / sizeof (__fd_mask)),        
              \
    40                              "1" (&__FDS_BITS (fdsp)[0])                 
              \
    41                            : "memory");                                  
              \
    42    } while (0)
    43  
    44  #else   /* ! GNU CC */
    45  
    46  /* We don't use `memset' because this would require a prototype and
    47     the array isn't too big.  */
    48  # define __FD_ZERO(set)  \
    49    do {                                                                  
              \
    50      unsigned int __i;                                                   
              \
    51      fd_set *__arr = (set);                                              
              \
    52      for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i)    
              \
    53        __FDS_BITS (__arr)[__i] = 0;                                      
              \
    54    } while (0)
    55  
    56  #endif  /* GNU CC */
    57  
    58  #define __FD_SET(d, set) \
    59    ((void) (__FDS_BITS (set)[__FD_ELT (d)] |= __FD_MASK (d)))
    60  #define __FD_CLR(d, set) \
    61    ((void) (__FDS_BITS (set)[__FD_ELT (d)] &= ~__FD_MASK (d)))
    62  #define __FD_ISSET(d, set) \
    63    ((__FDS_BITS (set)[__FD_ELT (d)] & __FD_MASK (d)) != 0)
Close file: /usr/include/bits/select.h
    30  #include <bits/select.h>
    31  
    32  /* Get sigset_t.  */
Open file: /usr/include/bits/types/sigset_t.h
     1  #ifndef __sigset_t_defined
     2  #define __sigset_t_defined 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

     3  
Open file: /usr/include/bits/types/__sigset_t.h
     1  #ifndef ____sigset_t_defined
     2  #define ____sigset_t_defined
     3  
     4  #define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
     5  typedef struct
     6  {
     7    unsigned long int __val[_SIGSET_NWORDS];
     8  } __sigset_t;
     9  
    10  #endif
Close file: /usr/include/bits/types/__sigset_t.h
     4  #include <bits/types/__sigset_t.h>
     5  
     6  /* A set of signals to be blocked, unblocked, or waited for.  */
     7  typedef __sigset_t sigset_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/sigset_t.h
    33  #include <bits/types/sigset_t.h>
    34  
    35  /* Get definition of timer specification structures.  */
Open file: /usr/include/bits/types/time_t.h
     1  #ifndef __time_t_defined
     2  #define __time_t_defined 1
     3  
     4  #include <bits/types.h>
     5  
     6  /* Returned by `time'.  */
     7  typedef __time_t time_t;
     8  
     9  #endif
Close file: /usr/include/bits/types/time_t.h
    36  #include <bits/types/time_t.h>
Open file: /usr/include/bits/types/struct_timeval.h
     1  #ifndef __timeval_defined
     2  #define __timeval_defined 1
     3  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;
    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */
   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  
   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     4  #include <bits/types.h>
     5  
     6  /* A time value that is accurate to the nearest
     7     microsecond but also has a range of years.  */
     8  struct timeval
     9  {
    10    __time_t tv_sec;              /* Seconds.  */
    11    __suseconds_t tv_usec;        /* Microseconds.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    12  };
    13  #endif
Close file: /usr/include/bits/types/struct_timeval.h
    37  #include <bits/types/struct_timeval.h>
    38  #ifdef __USE_XOPEN2K
Open file: /usr/include/bits/types/struct_timespec.h
     1  /* NB: Include guard matches what <linux/time.h> uses.  */
     2  #ifndef _STRUCT_TIMESPEC
     3  #define _STRUCT_TIMESPEC 1
     4  
Open file: /usr/include/bits/types.h
     1  /* bits/types.h -- definitions of __*_t types underlying *_t types.
     2     Copyright (C) 2002-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  /*
    20   * Never include this file directly; use <sys/types.h> instead.
    21   */
    22  
    23  #ifndef _BITS_TYPES_H
    24  #define _BITS_TYPES_H   1
    25  
    26  #include <features.h>
    27  #include <bits/wordsize.h>
    28  
    29  /* Convenience types.  */
    30  typedef unsigned char __u_char;
    31  typedef unsigned short int __u_short;
    32  typedef unsigned int __u_int;
    33  typedef unsigned long int __u_long;
    34  
    35  /* Fixed-size types, underlying types depend on word size and compiler.
          */
    36  typedef signed char __int8_t;
    37  typedef unsigned char __uint8_t;
    38  typedef signed short int __int16_t;
    39  typedef unsigned short int __uint16_t;
    40  typedef signed int __int32_t;
    41  typedef unsigned int __uint32_t;
    42  #if __WORDSIZE == 64
    43  typedef signed long int __int64_t;
    44  typedef unsigned long int __uint64_t;
    45  #else
    46  __extension__ typedef signed long long int __int64_t;
    47  __extension__ typedef unsigned long long int __uint64_t;
    48  #endif
    49  
    50  /* Smallest types with at least a given width.  */
    51  typedef __int8_t __int_least8_t;
    52  typedef __uint8_t __uint_least8_t;
    53  typedef __int16_t __int_least16_t;
    54  typedef __uint16_t __uint_least16_t;
    55  typedef __int32_t __int_least32_t;
    56  typedef __uint32_t __uint_least32_t;
    57  typedef __int64_t __int_least64_t;
    58  typedef __uint64_t __uint_least64_t;
    59  
    60  /* quad_t is also 64 bits.  */
    61  #if __WORDSIZE == 64
    62  typedef long int __quad_t;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    63  typedef unsigned long int __u_quad_t;
    64  #else
    65  __extension__ typedef long long int __quad_t;
    66  __extension__ typedef unsigned long long int __u_quad_t;
    67  #endif
    68  
    69  /* Largest integral types.  */
    70  #if __WORDSIZE == 64
    71  typedef long int __intmax_t;
    72  typedef unsigned long int __uintmax_t;
    73  #else
    74  __extension__ typedef long long int __intmax_t;
    75  __extension__ typedef unsigned long long int __uintmax_t;
    76  #endif
    77  
    78  
    79  /* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
    80     macros for each of the OS types we define below.  The definitions
    81     of those macros must use the following macros for underlying types.
    82     We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsig
        ned
    83     variants of each of the following integer types on this machine.
    84  
    85          16              -- "natural" 16-bit type (always short)
    86          32              -- "natural" 32-bit type (always int)
    87          64              -- "natural" 64-bit type (long or long long)
    88          LONG32          -- 32-bit type, traditionally long
    89          QUAD            -- 64-bit type, traditionally long long
    90          WORD            -- natural type of __WORDSIZE bits (int or long
        )
    91          LONGWORD        -- type of __WORDSIZE bits, traditionally long
    92  
    93     We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
    94     conventional uses of `long' or `long long' type modifiers match the
    95     types we define, even when a less-adorned type would be the same siz
        e.
    96     This matters for (somewhat) portably writing printf/scanf formats fo
        r
    97     these types, where using the appropriate l or ll format modifiers ca
        n
    98     make the typedefs and the formats match up across all GNU platforms.
          If
    99     we used `long' when it's 64 bits where `long long' is expected, then
         the
   100     compiler would warn about the formats not matching the argument type
        s,
   101     and the programmer changing them to shut up the compiler would break
         the
   102     program's portability.
   103  
   104     Here we assume what is presently the case in all the GCC configurati
        ons
   105     we support: long long is always 64 bits, long is always word/address
         size,
   106     and int is always 32 bits.  */
   107  
   108  #define __S16_TYPE              short int
   109  #define __U16_TYPE              unsigned short int
   110  #define __S32_TYPE              int
   111  #define __U32_TYPE              unsigned int
   112  #define __SLONGWORD_TYPE        long int
   113  #define __ULONGWORD_TYPE        unsigned long int
   114  #if __WORDSIZE == 32
   115  # define __SQUAD_TYPE           __int64_t
   116  # define __UQUAD_TYPE           __uint64_t
   117  # define __SWORD_TYPE           int
   118  # define __UWORD_TYPE           unsigned int
   119  # define __SLONG32_TYPE         long int
   120  # define __ULONG32_TYPE         unsigned long int
   121  # define __S64_TYPE             __int64_t
   122  # define __U64_TYPE             __uint64_t
   123  /* We want __extension__ before typedef's that use nonstandard base typ
        es
   124     such as `long long' in C89 mode.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   125  # define __STD_TYPE             __extension__ typedef
   126  #elif __WORDSIZE == 64
   127  # define __SQUAD_TYPE           long int
   128  # define __UQUAD_TYPE           unsigned long int
   129  # define __SWORD_TYPE           long int
   130  # define __UWORD_TYPE           unsigned long int
   131  # define __SLONG32_TYPE         int
   132  # define __ULONG32_TYPE         unsigned int
   133  # define __S64_TYPE             long int
   134  # define __U64_TYPE             unsigned long int
   135  /* No need to mark the typedef with __extension__.   */
   136  # define __STD_TYPE             typedef
   137  #else
   138  # error
   139  #endif
   140  #include <bits/typesizes.h>     /* Defines __*_T_TYPE macros.  */
   141  
   142  
   143  __STD_TYPE __DEV_T_TYPE __dev_t;        /* Type of device numbers.  */
   144  __STD_TYPE __UID_T_TYPE __uid_t;        /* Type of user identifications
        .  */
   145  __STD_TYPE __GID_T_TYPE __gid_t;        /* Type of group identification
        s.  */
   146  __STD_TYPE __INO_T_TYPE __ino_t;        /* Type of file serial numbers.
          */
   147  __STD_TYPE __INO64_T_TYPE __ino64_t;    /* Type of file serial numbers 
        (LFS).*/
   148  __STD_TYPE __MODE_T_TYPE __mode_t;      /* Type of file attribute bitma
        sks.  */
   149  __STD_TYPE __NLINK_T_TYPE __nlink_t;    /* Type of file link counts.  *
        /
   150  __STD_TYPE __OFF_T_TYPE __off_t;        /* Type of file sizes and offse
        ts.  */
   151  __STD_TYPE __OFF64_T_TYPE __off64_t;    /* Type of file sizes and offse
        ts (LFS).  */
   152  __STD_TYPE __PID_T_TYPE __pid_t;        /* Type of process identificati
        ons.  */
   153  __STD_TYPE __FSID_T_TYPE __fsid_t;      /* Type of file system IDs.  */
   154  __STD_TYPE __CLOCK_T_TYPE __clock_t;    /* Type of CPU usage counts.  *
        /
   155  __STD_TYPE __RLIM_T_TYPE __rlim_t;      /* Type for resource measuremen
        t.  */
   156  __STD_TYPE __RLIM64_T_TYPE __rlim64_t;  /* Type for resource measuremen
        t (LFS).  */
   157  __STD_TYPE __ID_T_TYPE __id_t;          /* General type for IDs.  */
   158  __STD_TYPE __TIME_T_TYPE __time_t;      /* Seconds since the Epoch.  */
   159  __STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  *
        /
   160  __STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microse
        conds.  */
   161  
   162  __STD_TYPE __DADDR_T_TYPE __daddr_t;    /* The type of a disk address. 
         */
   163  __STD_TYPE __KEY_T_TYPE __key_t;        /* Type of an IPC key.  */
   164  
   165  /* Clock ID used in clock and timer functions.  */
   166  __STD_TYPE __CLOCKID_T_TYPE __clockid_t;
   167  
   168  /* Timer ID returned by `timer_create'.  */
   169  __STD_TYPE __TIMER_T_TYPE __timer_t;
   170  
   171  /* Type to represent block size.  */
   172  __STD_TYPE __BLKSIZE_T_TYPE __blksize_t;
   173  
   174  /* Types from the Large File Support interface.  */
   175  
   176  /* Type to count number of disk blocks.  */
   177  __STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;
   178  __STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;
   179  
   180  /* Type to count file system blocks.  */
   181  __STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;
   182  __STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;
   183  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   184  /* Type to count file system nodes.  */
   185  __STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;
   186  __STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;
   187  
   188  /* Type of miscellaneous file system fields.  */
   189  __STD_TYPE __FSWORD_T_TYPE __fsword_t;
   190  
   191  __STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.
          */
   192  
   193  /* Signed long type used in system calls.  */
   194  __STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;
   195  /* Unsigned long type used in system calls.  */
   196  __STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;
   197  
   198  /* These few don't really vary by system, they always correspond
   199     to one of the other defined types.  */
   200  typedef __off64_t __loff_t;     /* Type of file sizes and offsets (LFS)
        .  */
   201  typedef char *__caddr_t;
   202  
   203  /* Duplicates info from stdint.h but this is used in unistd.h.  */
   204  __STD_TYPE __SWORD_TYPE __intptr_t;
   205  
   206  /* Duplicate info from sys/socket.h.  */
   207  __STD_TYPE __U32_TYPE __socklen_t;
   208  
   209  /* C99: An integer type that can be accessed as an atomic entity,
   210     even in the presence of asynchronous interrupts.
   211     It is not currently necessary for this to be machine-specific.  */
   212  typedef int __sig_atomic_t;
   213  
   214  #undef __STD_TYPE
   215  
   216  #endif /* bits/types.h */
Close file: /usr/include/bits/types.h
     5  #include <bits/types.h>
     6  
     7  /* POSIX.1b structure for a time value.  This is like a `struct timeval
        ' but
     8     has nanoseconds instead of microseconds.  */
     9  struct timespec
    10  {
    11    __time_t tv_sec;              /* Seconds.  */
    12    __syscall_slong_t tv_nsec;    /* Nanoseconds.  */
    13  };
    14  
    15  #endif
Close file: /usr/include/bits/types/struct_timespec.h
    39  # include <bits/types/struct_timespec.h>
    40  #endif
    41  
    42  #ifndef __suseconds_t_defined
    43  typedef __suseconds_t suseconds_t;
    44  # define __suseconds_t_defined
    45  #endif
    46  
    47  
    48  /* The fd_set member is required to be an array of longs.  */
    49  typedef long int __fd_mask;
    50  
    51  /* Some versions of <linux/posix_types.h> define this macros.  */
    52  #undef  __NFDBITS
    53  /* It's easier to assume 8-bit bytes than to get CHAR_BIT.  */
    54  #define __NFDBITS       (8 * (int) sizeof (__fd_mask))
    55  #define __FD_ELT(d)     ((d) / __NFDBITS)
    56  #define __FD_MASK(d)    ((__fd_mask) (1UL << ((d) % __NFDBITS)))
    57  
    58  /* fd_set for select and pselect.  */
    59  typedef struct
    60    {
    61      /* XPG4.2 requires this member name.  Otherwise avoid the name
    62         from the global namespace.  */
    63  #ifdef __USE_XOPEN

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    64      __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];
    65  # define __FDS_BITS(set) ((set)->fds_bits)
    66  #else
    67      __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];
    68  # define __FDS_BITS(set) ((set)->__fds_bits)
    69  #endif
    70    } fd_set;
    71  
    72  /* Maximum number of file descriptors in `fd_set'.  */
    73  #define FD_SETSIZE              __FD_SETSIZE
    74  
    75  #ifdef __USE_MISC
    76  /* Sometimes the fd_set member is assumed to have this type.  */
    77  typedef __fd_mask fd_mask;
    78  
    79  /* Number of bits per word of `fd_set' (some code assumes this is 32). 
         */
    80  # define NFDBITS                __NFDBITS
    81  #endif
    82  
    83  
    84  /* Access macros for `fd_set'.  */
    85  #define FD_SET(fd, fdsetp)      __FD_SET (fd, fdsetp)
    86  #define FD_CLR(fd, fdsetp)      __FD_CLR (fd, fdsetp)
    87  #define FD_ISSET(fd, fdsetp)    __FD_ISSET (fd, fdsetp)
    88  #define FD_ZERO(fdsetp)         __FD_ZERO (fdsetp)
    89  
    90  
    91  __BEGIN_DECLS
    92  
    93  /* Check the first NFDS descriptors each in READFDS (if not NULL) for r
        ead
    94     readiness, in WRITEFDS (if not NULL) for write readiness, and in EXC
        EPTFDS
    95     (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, t
        ime out
    96     after waiting the interval specified therein.  Returns the number of
         ready
    97     descriptors, or -1 for errors.
    98  
    99     This function is a cancellation point and therefore not marked with
   100     __THROW.  */
   101  extern int select (int __nfds, fd_set *__restrict __readfds,
   102                     fd_set *__restrict __writefds,
   103                     fd_set *__restrict __exceptfds,
   104                     struct timeval *__restrict __timeout);
   105  
   106  #ifdef __USE_XOPEN2K
   107  /* Same as above only that the TIMEOUT value is given with higher
   108     resolution and a sigmask which is been set temporarily.  This versio
        n
   109     should be used.
   110  
   111     This function is a cancellation point and therefore not marked with
   112     __THROW.  */
   113  extern int pselect (int __nfds, fd_set *__restrict __readfds,
   114                      fd_set *__restrict __writefds,
   115                      fd_set *__restrict __exceptfds,
   116                      const struct timespec *__restrict __timeout,
   117                      const __sigset_t *__restrict __sigmask);
   118  #endif
   119  
   120  
   121  /* Define some inlines helping to catch common problems.  */
   122  #if __USE_FORTIFY_LEVEL > 0 && defined __GNUC__
   123  # include <bits/select2.h>
   124  #endif
   125  
   126  __END_DECLS
   127  
   128  #endif /* sys/select.h */
Close file: /usr/include/sys/select.h
   179  # include <sys/select.h>
   180  #endif /* Use misc.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   181  
   182  
   183  #if (defined __USE_UNIX98 || defined __USE_XOPEN2K8) \
   184      && !defined __blksize_t_defined
   185  typedef __blksize_t blksize_t;
   186  # define __blksize_t_defined
   187  #endif
   188  
   189  /* Types from the Large File Support interface.  */
   190  #ifndef __USE_FILE_OFFSET64
   191  # ifndef __blkcnt_t_defined
   192  typedef __blkcnt_t blkcnt_t;     /* Type to count number of disk blocks
        .  */
   193  #  define __blkcnt_t_defined
   194  # endif
   195  # ifndef __fsblkcnt_t_defined
   196  typedef __fsblkcnt_t fsblkcnt_t; /* Type to count file system blocks.  
        */
   197  #  define __fsblkcnt_t_defined
   198  # endif
   199  # ifndef __fsfilcnt_t_defined
   200  typedef __fsfilcnt_t fsfilcnt_t; /* Type to count file system inodes.  
        */
   201  #  define __fsfilcnt_t_defined
   202  # endif
   203  #else
   204  # ifndef __blkcnt_t_defined
   205  typedef __blkcnt64_t blkcnt_t;     /* Type to count number of disk bloc
        ks.  */
   206  #  define __blkcnt_t_defined
   207  # endif
   208  # ifndef __fsblkcnt_t_defined
   209  typedef __fsblkcnt64_t fsblkcnt_t; /* Type to count file system blocks.
          */
   210  #  define __fsblkcnt_t_defined
   211  # endif
   212  # ifndef __fsfilcnt_t_defined
   213  typedef __fsfilcnt64_t fsfilcnt_t; /* Type to count file system inodes.
          */
   214  #  define __fsfilcnt_t_defined
   215  # endif
   216  #endif
   217  
   218  #ifdef __USE_LARGEFILE64
   219  typedef __blkcnt64_t blkcnt64_t;     /* Type to count number of disk bl
        ocks. */
   220  typedef __fsblkcnt64_t fsblkcnt64_t; /* Type to count file system block
        s.  */
   221  typedef __fsfilcnt64_t fsfilcnt64_t; /* Type to count file system inode
        s.  */
   222  #endif
   223  
   224  
   225  /* Now add the thread types.  */
   226  #if defined __USE_POSIX199506 || defined __USE_UNIX98
Open file: /usr/include/bits/pthreadtypes.h
     1  /* Declaration of common pthread types for all architectures.
     2     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    19  #ifndef _BITS_PTHREADTYPES_COMMON_H
    20  # define _BITS_PTHREADTYPES_COMMON_H    1
    21  
    22  /* For internal mutex and condition variable definitions.  */
Open file: /usr/include/bits/thread-shared-types.h
     1  /* Common threading primitives definitions for both POSIX and C11.
     2     Copyright (C) 2017-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _THREAD_SHARED_TYPES_H
    20  #define _THREAD_SHARED_TYPES_H 1
    21  
    22  /* Arch-specific definitions.  Each architecture must define the follow
        ing
    23     macros to define the expected sizes of pthread data types:
    24  
    25     __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
    26     __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
    27     __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
    28     __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
    29     __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
    30     __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
    31     __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
    32     __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
    33     __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
    34  
    35     Also, the following macros must be define for internal pthread_mutex
        _t
    36     struct definitions (struct __pthread_mutex_s):
    37  
    38     __PTHREAD_COMPAT_PADDING_MID   - any additional members after 'kind'
    39                                      and before '__spin' (for 64 bits) o
        r
    40                                      '__nusers' (for 32 bits).
    41     __PTHREAD_COMPAT_PADDING_END   - any additional members at the end o
        f
    42                                      the internal structure.
    43     __PTHREAD_MUTEX_LOCK_ELISION   - 1 if the architecture supports lock
    44                                      elision or 0 otherwise.
    45     __PTHREAD_MUTEX_NUSERS_AFTER_KIND - control where to put __nusers.  
        The
    46                                         preferred value for new architec
        tures
    47                                         is 0.
    48     __PTHREAD_MUTEX_USE_UNION      - control whether internal __spins an
        d
    49                                      __list will be place inside a union
         for
    50                                      linuxthreads compatibility.
    51                                      The preferred value for new archite
        ctures
    52                                      is 0.
    53  
    54     For a new port the preferred values for the required defines are:
    55  
    56     #define __PTHREAD_COMPAT_PADDING_MID
    57     #define __PTHREAD_COMPAT_PADDING_END
    58     #define __PTHREAD_MUTEX_LOCK_ELISION         0
    59     #define __PTHREAD_MUTEX_NUSERS_AFTER_KIND    0
    60     #define __PTHREAD_MUTEX_USE_UNION            0

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    61  
    62     __PTHREAD_MUTEX_LOCK_ELISION can be set to 1 if the hardware plans t
        o
    63     eventually support lock elision using transactional memory.
    64  
    65     The additional macro defines any constraint for the lock alignment
    66     inside the thread structures:
    67  
    68     __LOCK_ALIGNMENT - for internal lock/futex usage.
    69  
    70     Same idea but for the once locking primitive:
    71  
    72     __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.
    73  
    74     And finally the internal pthread_rwlock_t (struct __pthread_rwlock_a
        rch_t)
    75     must be defined.
    76   */
Open file: /usr/include/bits/pthreadtypes-arch.h
     1  /* Copyright (C) 2002-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _BITS_PTHREADTYPES_ARCH_H
    19  #define _BITS_PTHREADTYPES_ARCH_H       1
    20  
Open file: /usr/include/bits/wordsize.h
     1  /* Determine the wordsize from the preprocessor defines.  */
     2  
     3  #if defined __x86_64__ && !defined __ILP32__
     4  # define __WORDSIZE     64
     5  #else
     6  # define __WORDSIZE     32
     7  #define __WORDSIZE32_SIZE_ULONG         0
     8  #define __WORDSIZE32_PTRDIFF_LONG       0
     9  #endif
    10  
    11  #ifdef __x86_64__
    12  # define __WORDSIZE_TIME64_COMPAT32     1
    13  /* Both x86-64 and x32 use the 64-bit system call interface.  */
    14  # define __SYSCALL_WORDSIZE             64
    15  #else
    16  # define __WORDSIZE_TIME64_COMPAT32     0
    17  #endif
Close file: /usr/include/bits/wordsize.h
    21  #include <bits/wordsize.h>
    22  
    23  #ifdef __x86_64__
    24  # if __WORDSIZE == 64
    25  #  define __SIZEOF_PTHREAD_MUTEX_T 40
    26  #  define __SIZEOF_PTHREAD_ATTR_T 56
    27  #  define __SIZEOF_PTHREAD_MUTEX_T 40
    28  #  define __SIZEOF_PTHREAD_RWLOCK_T 56
    29  #  define __SIZEOF_PTHREAD_BARRIER_T 32
    30  # else
    31  #  define __SIZEOF_PTHREAD_MUTEX_T 32
    32  #  define __SIZEOF_PTHREAD_ATTR_T 32
    33  #  define __SIZEOF_PTHREAD_MUTEX_T 32
    34  #  define __SIZEOF_PTHREAD_RWLOCK_T 44
    35  #  define __SIZEOF_PTHREAD_BARRIER_T 20
    36  # endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    37  #else
    38  # define __SIZEOF_PTHREAD_MUTEX_T 24
    39  # define __SIZEOF_PTHREAD_ATTR_T 36
    40  # define __SIZEOF_PTHREAD_MUTEX_T 24
    41  # define __SIZEOF_PTHREAD_RWLOCK_T 32
    42  # define __SIZEOF_PTHREAD_BARRIER_T 20
    43  #endif
    44  #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
    45  #define __SIZEOF_PTHREAD_COND_T 48
    46  #define __SIZEOF_PTHREAD_CONDATTR_T 4
    47  #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
    48  #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
    49  
    50  /* Definitions for internal mutex struct.  */
    51  #define __PTHREAD_COMPAT_PADDING_MID
    52  #define __PTHREAD_COMPAT_PADDING_END
    53  #define __PTHREAD_MUTEX_LOCK_ELISION    1
    54  #ifdef __x86_64__
    55  # define __PTHREAD_MUTEX_NUSERS_AFTER_KIND  0
    56  # define __PTHREAD_MUTEX_USE_UNION          0
    57  #else
    58  # define __PTHREAD_MUTEX_NUSERS_AFTER_KIND  1
    59  # define __PTHREAD_MUTEX_USE_UNION          1
    60  #endif
    61  
    62  #define __LOCK_ALIGNMENT
    63  #define __ONCE_ALIGNMENT
    64  
    65  struct __pthread_rwlock_arch_t
    66  {
    67    unsigned int __readers;
    68    unsigned int __writers;
    69    unsigned int __wrphase_futex;
    70    unsigned int __writers_futex;
    71    unsigned int __pad3;
    72    unsigned int __pad4;
    73  #ifdef __x86_64__
    74    int __cur_writer;
    75    int __shared;
    76    signed char __rwelision;
    77  # ifdef  __ILP32__
    78    unsigned char __pad1[3];
    79  #  define __PTHREAD_RWLOCK_ELISION_EXTRA 0, { 0, 0, 0 }
    80  # else
    81    unsigned char __pad1[7];
    82  #  define __PTHREAD_RWLOCK_ELISION_EXTRA 0, { 0, 0, 0, 0, 0, 0, 0 }
    83  # endif
    84    unsigned long int __pad2;
    85    /* FLAGS must stay at this position in the structure to maintain
    86       binary compatibility.  */
    87    unsigned int __flags;
    88  # define __PTHREAD_RWLOCK_INT_FLAGS_SHARED      1
    89  #else
    90    /* FLAGS must stay at this position in the structure to maintain
    91       binary compatibility.  */
    92    unsigned char __flags;
    93    unsigned char __shared;
    94    signed char __rwelision;
    95  # define __PTHREAD_RWLOCK_ELISION_EXTRA 0
    96    unsigned char __pad2;
    97    int __cur_writer;
    98  #endif
    99  };
   100  
   101  #ifndef __x86_64__
   102  /* Extra attributes for the cleanup functions.  */
   103  # define __cleanup_fct_attribute __attribute__ ((__regparm__ (1)))
   104  #endif
   105  
   106  #endif  /* bits/pthreadtypes.h */
Close file: /usr/include/bits/pthreadtypes-arch.h
    77  #include <bits/pthreadtypes-arch.h>
    78  
    79  /* Common definition of pthread_mutex_t. */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    80  
    81  #if !__PTHREAD_MUTEX_USE_UNION
    82  typedef struct __pthread_internal_list
    83  {
    84    struct __pthread_internal_list *__prev;
    85    struct __pthread_internal_list *__next;
    86  } __pthread_list_t;
    87  #else
    88  typedef struct __pthread_internal_slist
    89  {
    90    struct __pthread_internal_slist *__next;
    91  } __pthread_slist_t;
    92  #endif
    93  
    94  /* Lock elision support.  */
    95  #if __PTHREAD_MUTEX_LOCK_ELISION
    96  # if !__PTHREAD_MUTEX_USE_UNION
    97  #  define __PTHREAD_SPINS_DATA  \
    98    short __spins;                \
    99    short __elision
   100  #  define __PTHREAD_SPINS             0, 0
   101  # else
   102  #  define __PTHREAD_SPINS_DATA  \
   103    struct                        \
   104    {                             \
   105      short __espins;             \
   106      short __eelision;           \
   107    } __elision_data
   108  #  define __PTHREAD_SPINS         { 0, 0 }
   109  #  define __spins __elision_data.__espins
   110  #  define __elision __elision_data.__eelision
   111  # endif
   112  #else
   113  # define __PTHREAD_SPINS_DATA int __spins
   114  /* Mutex __spins initializer used by PTHREAD_MUTEX_INITIALIZER.  */
   115  # define __PTHREAD_SPINS 0
   116  #endif
   117  
   118  struct __pthread_mutex_s
   119  {
   120    int __lock __LOCK_ALIGNMENT;
   121    unsigned int __count;
   122    int __owner;
   123  #if !__PTHREAD_MUTEX_NUSERS_AFTER_KIND
   124    unsigned int __nusers;
   125  #endif
   126    /* KIND must stay at this position in the structure to maintain
   127       binary compatibility with static initializers.
   128  
   129       Concurrency notes:
   130       The __kind of a mutex is initialized either by the static
   131       PTHREAD_MUTEX_INITIALIZER or by a call to pthread_mutex_init.
   132  
   133       After a mutex has been initialized, the __kind of a mutex is usual
        ly not
   134       changed.  BUT it can be set to -1 in pthread_mutex_destroy or elis
        ion can
   135       be enabled.  This is done concurrently in the pthread_mutex_*lock 
        functions
   136       by using the macro FORCE_ELISION. This macro is only defined for
   137       architectures which supports lock elision.
   138  
   139       For elision, there are the flags PTHREAD_MUTEX_ELISION_NP and
   140       PTHREAD_MUTEX_NO_ELISION_NP which can be set in addition to the al
        ready set
   141       type of a mutex.
   142       Before a mutex is initialized, only PTHREAD_MUTEX_NO_ELISION_NP ca
        n be set
   143       with pthread_mutexattr_settype.
   144       After a mutex has been initialized, the functions pthread_mutex_*l
        ock can
   145       enable elision - if the mutex-type and the machine supports it - b
        y setting

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   146       the flag PTHREAD_MUTEX_ELISION_NP. This is done concurrently. Afte
        rwards
   147       the lock / unlock functions are using specific elision code-paths.
          */
   148    int __kind;
   149    __PTHREAD_COMPAT_PADDING_MID
   150  #if __PTHREAD_MUTEX_NUSERS_AFTER_KIND
   151    unsigned int __nusers;
   152  #endif
   153  #if !__PTHREAD_MUTEX_USE_UNION
   154    __PTHREAD_SPINS_DATA;
   155    __pthread_list_t __list;
   156  # define __PTHREAD_MUTEX_HAVE_PREV      1
   157  #else
   158    __extension__ union
   159    {
   160      __PTHREAD_SPINS_DATA;
   161      __pthread_slist_t __list;
   162    };
   163  # define __PTHREAD_MUTEX_HAVE_PREV      0
   164  #endif
   165    __PTHREAD_COMPAT_PADDING_END
   166  };
   167  
   168  
   169  /* Common definition of pthread_cond_t. */
   170  
   171  struct __pthread_cond_s
   172  {
   173    __extension__ union
   174    {
   175      __extension__ unsigned long long int __wseq;
   176      struct
   177      {
   178        unsigned int __low;
   179        unsigned int __high;
   180      } __wseq32;
   181    };
   182    __extension__ union
   183    {
   184      __extension__ unsigned long long int __g1_start;
   185      struct
   186      {
   187        unsigned int __low;
   188        unsigned int __high;
   189      } __g1_start32;
   190    };
   191    unsigned int __g_refs[2] __LOCK_ALIGNMENT;
   192    unsigned int __g_size[2];
   193    unsigned int __g1_orig_size;
   194    unsigned int __wrefs;
   195    unsigned int __g_signals[2];
   196  };
   197  
   198  #endif /* _THREAD_SHARED_TYPES_H  */
Close file: /usr/include/bits/thread-shared-types.h
    23  #include <bits/thread-shared-types.h>
    24  
    25  /* Thread identifiers.  The structure of the attribute type is not
    26     exposed on purpose.  */
    27  typedef unsigned long int pthread_t;
    28  
    29  
    30  /* Data structures for mutex handling.  The structure of the attribute
    31     type is not exposed on purpose.  */
    32  typedef union
    33  {
    34    char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];
    35    int __align;
    36  } pthread_mutexattr_t;
    37  
    38  
    39  /* Data structure for condition variable handling.  The structure of
    40     the attribute type is not exposed on purpose.  */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    41  typedef union
    42  {
    43    char __size[__SIZEOF_PTHREAD_CONDATTR_T];
    44    int __align;
    45  } pthread_condattr_t;
    46  
    47  
    48  /* Keys for thread-specific data */
    49  typedef unsigned int pthread_key_t;
    50  
    51  
    52  /* Once-only execution */
    53  typedef int __ONCE_ALIGNMENT pthread_once_t;
    54  
    55  
    56  union pthread_attr_t
    57  {
    58    char __size[__SIZEOF_PTHREAD_ATTR_T];
    59    long int __align;
    60  };
    61  #ifndef __have_pthread_attr_t
    62  typedef union pthread_attr_t pthread_attr_t;
    63  # define __have_pthread_attr_t 1
    64  #endif
    65  
    66  
    67  typedef union
    68  {
    69    struct __pthread_mutex_s __data;
    70    char __size[__SIZEOF_PTHREAD_MUTEX_T];
    71    long int __align;
    72  } pthread_mutex_t;
    73  
    74  
    75  typedef union
    76  {
    77    struct __pthread_cond_s __data;
    78    char __size[__SIZEOF_PTHREAD_COND_T];
    79    __extension__ long long int __align;
    80  } pthread_cond_t;
    81  
    82  
    83  #if defined __USE_UNIX98 || defined __USE_XOPEN2K
    84  /* Data structure for reader-writer lock variable handling.  The
    85     structure of the attribute type is deliberately not exposed.  */
    86  typedef union
    87  {
    88    struct __pthread_rwlock_arch_t __data;
    89    char __size[__SIZEOF_PTHREAD_RWLOCK_T];
    90    long int __align;
    91  } pthread_rwlock_t;
    92  
    93  typedef union
    94  {
    95    char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];
    96    long int __align;
    97  } pthread_rwlockattr_t;
    98  #endif
    99  
   100  
   101  #ifdef __USE_XOPEN2K
   102  /* POSIX spinlock data type.  */
   103  typedef volatile int pthread_spinlock_t;
   104  
   105  
   106  /* POSIX barriers data type.  The structure of the type is
   107     deliberately not exposed.  */
   108  typedef union
   109  {
   110    char __size[__SIZEOF_PTHREAD_BARRIER_T];
   111    long int __align;
   112  } pthread_barrier_t;
   113  
   114  typedef union

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   115  {
   116    char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];
   117    int __align;
   118  } pthread_barrierattr_t;
   119  #endif
   120  
   121  #endif
Close file: /usr/include/bits/pthreadtypes.h
   227  # include <bits/pthreadtypes.h>
   228  #endif
   229  
   230  __END_DECLS
   231  
   232  #endif /* sys/types.h */
Close file: /usr/include/sys/types.h
   394  # include <sys/types.h> /* we need int32_t... */
   395  
   396  /* These are the functions that actually do things.  The `random', `sra
        ndom',
   397     `initstate' and `setstate' functions are those from BSD Unices.
   398     The `rand' and `srand' functions are required by the ANSI standard.
   399     We provide both interfaces to the same random number generator.  */
   400  /* Return a random long integer between 0 and RAND_MAX inclusive.  */
   401  extern long int random (void) __THROW;
   402  
   403  /* Seed the random number generator with the given number.  */
   404  extern void srandom (unsigned int __seed) __THROW;
   405  
   406  /* Initialize the random number generator to use state buffer STATEBUF,
   407     of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 1
        6,
   408     32, 64, 128 and 256, the bigger the better; values less than 8 will
   409     cause an error and values greater than 256 will be rounded down.  */
   410  extern char *initstate (unsigned int __seed, char *__statebuf,
   411                          size_t __statelen) __THROW __nonnull ((2));
   412  
   413  /* Switch the random number generator to state buffer STATEBUF,
   414     which should have been previously initialized by `initstate'.  */
   415  extern char *setstate (char *__statebuf) __THROW __nonnull ((1));
   416  
   417  
   418  # ifdef __USE_MISC
   419  /* Reentrant versions of the `random' family of functions.
   420     These functions all use the following data structure to contain
   421     state, rather than global state variables.  */
   422  
   423  struct random_data
   424    {
   425      int32_t *fptr;              /* Front pointer.  */
   426      int32_t *rptr;              /* Rear pointer.  */
   427      int32_t *state;             /* Array of state values.  */
   428      int rand_type;              /* Type of random number generator.  */
   429      int rand_deg;               /* Degree of random number generator.  
        */
   430      int rand_sep;               /* Distance between front and rear.  */
   431      int32_t *end_ptr;           /* Pointer behind state table.  */
   432    };
   433  
   434  extern int random_r (struct random_data *__restrict __buf,
   435                       int32_t *__restrict __result) __THROW __nonnull ((
        1, 2));
   436  
   437  extern int srandom_r (unsigned int __seed, struct random_data *__buf)
   438       __THROW __nonnull ((2));
   439  
   440  extern int initstate_r (unsigned int __seed, char *__restrict __statebu
        f,
   441                          size_t __statelen,
   442                          struct random_data *__restrict __buf)
   443       __THROW __nonnull ((2, 4));
   444  
   445  extern int setstate_r (char *__restrict __statebuf,
   446                         struct random_data *__restrict __buf)
   447       __THROW __nonnull ((1, 2));

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   448  # endif /* Use misc.  */
   449  #endif  /* Use extended X/Open || misc. */
   450  
   451  
   452  /* Return a random integer between 0 and RAND_MAX inclusive.  */
   453  extern int rand (void) __THROW;
   454  /* Seed the random number generator with the given number.  */
   455  extern void srand (unsigned int __seed) __THROW;
   456  
   457  #ifdef __USE_POSIX199506
   458  /* Reentrant interface according to POSIX.1.  */
   459  extern int rand_r (unsigned int *__seed) __THROW;
   460  #endif
   461  
   462  
   463  #if defined __USE_MISC || defined __USE_XOPEN
   464  /* System V style 48-bit random number generator functions.  */
   465  
   466  /* Return non-negative, double-precision floating-point value in [0.0,1
        .0).  */
   467  extern double drand48 (void) __THROW;
   468  extern double erand48 (unsigned short int __xsubi[3]) __THROW __nonnull
         ((1));
   469  
   470  /* Return non-negative, long integer in [0,2^31).  */
   471  extern long int lrand48 (void) __THROW;
   472  extern long int nrand48 (unsigned short int __xsubi[3])
   473       __THROW __nonnull ((1));
   474  
   475  /* Return signed, long integers in [-2^31,2^31).  */
   476  extern long int mrand48 (void) __THROW;
   477  extern long int jrand48 (unsigned short int __xsubi[3])
   478       __THROW __nonnull ((1));
   479  
   480  /* Seed random number generator.  */
   481  extern void srand48 (long int __seedval) __THROW;
   482  extern unsigned short int *seed48 (unsigned short int __seed16v[3])
   483       __THROW __nonnull ((1));
   484  extern void lcong48 (unsigned short int __param[7]) __THROW __nonnull (
        (1));
   485  
   486  # ifdef __USE_MISC
   487  /* Data structure for communication with thread safe versions.  This
   488     type is to be regarded as opaque.  It's only exported because users
   489     have to allocate objects of this type.  */
   490  struct drand48_data
   491    {
   492      unsigned short int __x[3];  /* Current state.  */
   493      unsigned short int __old_x[3]; /* Old state.  */
   494      unsigned short int __c;     /* Additive const. in congruential form
        ula.  */
   495      unsigned short int __init;  /* Flag for initializing.  */
   496      __extension__ unsigned long long int __a;   /* Factor in congruenti
        al
   497                                                     formula.  */
   498    };
   499  
   500  /* Return non-negative, double-precision floating-point value in [0.0,1
        .0).  */
   501  extern int drand48_r (struct drand48_data *__restrict __buffer,
   502                        double *__restrict __result) __THROW __nonnull ((
        1, 2));
   503  extern int erand48_r (unsigned short int __xsubi[3],
   504                        struct drand48_data *__restrict __buffer,
   505                        double *__restrict __result) __THROW __nonnull ((
        1, 2));
   506  
   507  /* Return non-negative, long integer in [0,2^31).  */
   508  extern int lrand48_r (struct drand48_data *__restrict __buffer,
   509                        long int *__restrict __result)
   510       __THROW __nonnull ((1, 2));
   511  extern int nrand48_r (unsigned short int __xsubi[3],
   512                        struct drand48_data *__restrict __buffer,
   513                        long int *__restrict __result)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   514       __THROW __nonnull ((1, 2));
   515  
   516  /* Return signed, long integers in [-2^31,2^31).  */
   517  extern int mrand48_r (struct drand48_data *__restrict __buffer,
   518                        long int *__restrict __result)
   519       __THROW __nonnull ((1, 2));
   520  extern int jrand48_r (unsigned short int __xsubi[3],
   521                        struct drand48_data *__restrict __buffer,
   522                        long int *__restrict __result)
   523       __THROW __nonnull ((1, 2));
   524  
   525  /* Seed random number generator.  */
   526  extern int srand48_r (long int __seedval, struct drand48_data *__buffer
        )
   527       __THROW __nonnull ((2));
   528  
   529  extern int seed48_r (unsigned short int __seed16v[3],
   530                       struct drand48_data *__buffer) __THROW __nonnull (
        (1, 2));
   531  
   532  extern int lcong48_r (unsigned short int __param[7],
   533                        struct drand48_data *__buffer)
   534       __THROW __nonnull ((1, 2));
   535  # endif /* Use misc.  */
   536  #endif  /* Use misc or X/Open.  */
   537  
   538  /* Allocate SIZE bytes of memory.  */
   539  extern void *malloc (size_t __size) __THROW __attribute_malloc__ __wur;
   540  /* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  *
        /
   541  extern void *calloc (size_t __nmemb, size_t __size)
   542       __THROW __attribute_malloc__ __wur;
   543  
   544  /* Re-allocate the previously allocated block
   545     in PTR, making the new block SIZE bytes long.  */
   546  /* __attribute_malloc__ is not used, because if realloc returns
   547     the same pointer that was passed to it, aliasing needs to be allowed
   548     between objects pointed by the old and new pointers.  */
   549  extern void *realloc (void *__ptr, size_t __size)
   550       __THROW __attribute_warn_unused_result__;
   551  
   552  #ifdef __USE_GNU
   553  /* Re-allocate the previously allocated block in PTR, making the new
   554     block large enough for NMEMB elements of SIZE bytes each.  */
   555  /* __attribute_malloc__ is not used, because if reallocarray returns
   556     the same pointer that was passed to it, aliasing needs to be allowed
   557     between objects pointed by the old and new pointers.  */
   558  extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
   559       __THROW __attribute_warn_unused_result__;
   560  #endif
   561  
   562  /* Free a block allocated by `malloc', `realloc' or `calloc'.  */
   563  extern void free (void *__ptr) __THROW;
   564  
   565  #ifdef __USE_MISC
Open file: /usr/include/alloca.h
     1  /* Copyright (C) 1992-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _ALLOCA_H

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    19  #define _ALLOCA_H       1
    20  
Open file: /usr/include/features.h
     1  /* Copyright (C) 1991-2018 Free Software Foundation, Inc.
     2     This file is part of the GNU C Library.
     3  
     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.
     8  
     9     The GNU C Library is distributed in the hope that it will be useful,
    10     but WITHOUT ANY WARRANTY; without even the implied warranty of
    11     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    12     Lesser General Public License for more details.
    13  
    14     You should have received a copy of the GNU Lesser General Public
    15     License along with the GNU C Library; if not, see
    16     <http://www.gnu.org/licenses/>.  */
    17  
    18  #ifndef _FEATURES_H
    19  #define _FEATURES_H     1
    20  
    21  /* These are defined by the user (or the compiler)
    22     to specify the desired environment:
    23  
    24     __STRICT_ANSI__      ISO Standard C.
    25     _ISOC99_SOURCE       Extensions to ISO C89 from ISO C99.
    26     _ISOC11_SOURCE       Extensions to ISO C99 from ISO C11.
    27     __STDC_WANT_LIB_EXT2__
    28                          Extensions to ISO C99 from TR 27431-2:2010.
    29     __STDC_WANT_IEC_60559_BFP_EXT__
    30                          Extensions to ISO C11 from TS 18661-1:2014.
    31     __STDC_WANT_IEC_60559_FUNCS_EXT__
    32                          Extensions to ISO C11 from TS 18661-4:2015.
    33     __STDC_WANT_IEC_60559_TYPES_EXT__
    34                          Extensions to ISO C11 from TS 18661-3:2015.
    35  
    36     _POSIX_SOURCE        IEEE Std 1003.1.
    37     _POSIX_C_SOURCE      If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std
         1003.2;
    38                          if >=199309L, add IEEE Std 1003.1b-1993;
    39                          if >=199506L, add IEEE Std 1003.1c-1995;
    40                          if >=200112L, all of IEEE 1003.1-2004
    41                          if >=200809L, all of IEEE 1003.1-2008
    42     _XOPEN_SOURCE        Includes POSIX and XPG things.  Set to 500 if
    43                          Single Unix conformance is wanted, to 600 for t
        he
    44                          sixth revision, to 700 for the seventh revision
        .
    45     _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
    46     _LARGEFILE_SOURCE    Some more functions for correct standard I/O.
    47     _LARGEFILE64_SOURCE  Additional functionality from LFS for large fil
        es.
    48     _FILE_OFFSET_BITS=N  Select default filesystem interface.
    49     _ATFILE_SOURCE       Additional *at interfaces.
    50     _GNU_SOURCE          All of the above, plus GNU extensions.
    51     _DEFAULT_SOURCE      The default set of features (taking precedence 
        over
    52                          __STRICT_ANSI__).
    53  
    54     _FORTIFY_SOURCE      Add security hardening to many library function
        s.
    55                          Set to 1 or 2; 2 performs stricter checks than 
        1.
    56  
    57     _REENTRANT, _THREAD_SAFE
    58                          Obsolete; equivalent to _POSIX_C_SOURCE=199506L
        .
    59  
    60     The `-ansi' switch to the GNU C compiler, and standards conformance
    61     options such as `-std=c99', define __STRICT_ANSI__.  If none of
    62     these are defined, or if _DEFAULT_SOURCE is defined, the default is
    63     to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    64     200809L, as well as enabling miscellaneous functions from BSD and
    65     SVID.  If more than one of these are defined, they accumulate.  For
    66     example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
    67     give you ISO C, 1003.1, and 1003.2, but nothing else.
    68  
    69     These are defined by this file and are used by the
    70     header files to decide what to declare or define:
    71  
    72     __GLIBC_USE (F)      Define things from feature set F.  This is defi
        ned
    73                          to 1 or 0; the subsequent macros are either def
        ined
    74                          or undefined, and those tests should be moved t
        o
    75                          __GLIBC_USE.
    76     __USE_ISOC11         Define ISO C11 things.
    77     __USE_ISOC99         Define ISO C99 things.
    78     __USE_ISOC95         Define ISO C90 AMD1 (C95) things.
    79     __USE_ISOCXX11       Define ISO C++11 things.
    80     __USE_POSIX          Define IEEE Std 1003.1 things.
    81     __USE_POSIX2         Define IEEE Std 1003.2 things.
    82     __USE_POSIX199309    Define IEEE Std 1003.1, and .1b things.
    83     __USE_POSIX199506    Define IEEE Std 1003.1, .1b, .1c and .1i things
        .
    84     __USE_XOPEN          Define XPG things.
    85     __USE_XOPEN_EXTENDED Define X/Open Unix things.
    86     __USE_UNIX98         Define Single Unix V2 things.
    87     __USE_XOPEN2K        Define XPG6 things.
    88     __USE_XOPEN2KXSI     Define XPG6 XSI things.
    89     __USE_XOPEN2K8       Define XPG7 things.
    90     __USE_XOPEN2K8XSI    Define XPG7 XSI things.
    91     __USE_LARGEFILE      Define correct standard I/O things.
    92     __USE_LARGEFILE64    Define LFS things with separate names.
    93     __USE_FILE_OFFSET64  Define 64bit interface as default.
    94     __USE_MISC           Define things from 4.3BSD or System V Unix.
    95     __USE_ATFILE         Define *at interfaces and AT_* constants for th
        em.
    96     __USE_GNU            Define GNU extensions.
    97     __USE_FORTIFY_LEVEL  Additional security measures used, according to
         level.
    98  
    99     The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   100     defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   101     only for compatibility.  All new code should use the other symbols
   102     to test for features.
   103  
   104     All macros listed above as possibly being defined by this file are
   105     explicitly undefined if they are not explicitly defined.
   106     Feature-test macros that are not defined by the user or compiler
   107     but are implied by the other feature-test macros defined (or by the
   108     lack of any definitions) are defined by the file.
   109  
   110     ISO C feature test macros depend on the definition of the macro
   111     when an affected header is included, not when the first system
   112     header is included, and so they are handled in
   113     <bits/libc-header-start.h>, which does not have a multiple include
   114     guard.  Feature test macros that can be handled from the first
   115     system header included are handled here.  */
   116  
   117  
   118  /* Undefine everything, so we get a clean slate.  */
   119  #undef  __USE_ISOC11
   120  #undef  __USE_ISOC99
   121  #undef  __USE_ISOC95
   122  #undef  __USE_ISOCXX11
   123  #undef  __USE_POSIX
   124  #undef  __USE_POSIX2
   125  #undef  __USE_POSIX199309
   126  #undef  __USE_POSIX199506
   127  #undef  __USE_XOPEN
   128  #undef  __USE_XOPEN_EXTENDED
   129  #undef  __USE_UNIX98
   130  #undef  __USE_XOPEN2K
   131  #undef  __USE_XOPEN2KXSI

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   132  #undef  __USE_XOPEN2K8
   133  #undef  __USE_XOPEN2K8XSI
   134  #undef  __USE_LARGEFILE
   135  #undef  __USE_LARGEFILE64
   136  #undef  __USE_FILE_OFFSET64
   137  #undef  __USE_MISC
   138  #undef  __USE_ATFILE
   139  #undef  __USE_GNU
   140  #undef  __USE_FORTIFY_LEVEL
   141  #undef  __KERNEL_STRICT_NAMES
   142  #undef  __GLIBC_USE_DEPRECATED_GETS
   143  
   144  /* Suppress kernel-name space pollution unless user expressedly asks
   145     for it.  */
   146  #ifndef _LOOSE_KERNEL_NAMES
   147  # define __KERNEL_STRICT_NAMES
   148  #endif
   149  
   150  /* Convenience macro to test the version of gcc.
   151     Use like this:
   152     #if __GNUC_PREREQ (2,8)
   153     ... code requiring gcc 2.8 or later ...
   154     #endif
   155     Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
   156     added in 2.0.  */
   157  #if defined __GNUC__ && defined __GNUC_MINOR__
   158  # define __GNUC_PREREQ(maj, min) \
   159          ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   160  #else
   161  # define __GNUC_PREREQ(maj, min) 0
   162  #endif
   163  
   164  /* Similarly for clang.  Features added to GCC after version 4.2 may
   165     or may not also be available in clang, and clang's definitions of
   166     __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
   167     features can be queried via __has_extension/__has_feature.  */
   168  #if defined __clang_major__ && defined __clang_minor__
   169  # define __glibc_clang_prereq(maj, min) \
   170    ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))
   171  #else
   172  # define __glibc_clang_prereq(maj, min) 0
   173  #endif
   174  
   175  /* Whether to use feature set F.  */
   176  #define __GLIBC_USE(F)  __GLIBC_USE_ ## F
   177  
   178  /* _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
   179     _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
   180     issue a warning; the expectation is that the source is being
   181     transitioned to use the new macro.  */
   182  #if (defined _BSD_SOURCE || defined _SVID_SOURCE) \
   183      && !defined _DEFAULT_SOURCE
   184  # warning "_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SO
        URCE"
   185  # undef  _DEFAULT_SOURCE
   186  # define _DEFAULT_SOURCE        1
   187  #endif
   188  
   189  /* If _GNU_SOURCE was defined by the user, turn on all the other featur
        es.  */
   190  #ifdef _GNU_SOURCE
   191  # undef  _ISOC95_SOURCE
   192  # define _ISOC95_SOURCE 1
   193  # undef  _ISOC99_SOURCE
   194  # define _ISOC99_SOURCE 1
   195  # undef  _ISOC11_SOURCE
   196  # define _ISOC11_SOURCE 1
   197  # undef  _POSIX_SOURCE
   198  # define _POSIX_SOURCE  1
   199  # undef  _POSIX_C_SOURCE
   200  # define _POSIX_C_SOURCE        200809L
   201  # undef  _XOPEN_SOURCE
   202  # define _XOPEN_SOURCE  700
   203  # undef  _XOPEN_SOURCE_EXTENDED

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   204  # define _XOPEN_SOURCE_EXTENDED 1
   205  # undef  _LARGEFILE64_SOURCE
   206  # define _LARGEFILE64_SOURCE    1
   207  # undef  _DEFAULT_SOURCE
   208  # define _DEFAULT_SOURCE        1
   209  # undef  _ATFILE_SOURCE
   210  # define _ATFILE_SOURCE 1
   211  #endif
   212  
   213  /* If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
   214     define _DEFAULT_SOURCE.  */
   215  #if (defined _DEFAULT_SOURCE                                    \
   216       || (!defined __STRICT_ANSI__                               \
   217           && !defined _ISOC99_SOURCE && !defined _ISOC11_SOURCE  \
   218           && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE  \
   219           && !defined _XOPEN_SOURCE))
   220  # undef  _DEFAULT_SOURCE
   221  # define _DEFAULT_SOURCE        1
   222  #endif
   223  
   224  /* This is to enable the ISO C11 extension.  */
   225  #if (defined _ISOC11_SOURCE \
   226       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))
   227  # define __USE_ISOC11   1
   228  #endif
   229  
   230  /* This is to enable the ISO C99 extension.  */
   231  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   232       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
   233  # define __USE_ISOC99   1
   234  #endif
   235  
   236  /* This is to enable the ISO C90 Amendment 1:1995 extension.  */
   237  #if (defined _ISOC99_SOURCE || defined _ISOC11_SOURCE \
   238       || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199409L))
   239  # define __USE_ISOC95   1
   240  #endif
   241  
   242  #ifdef __cplusplus
   243  /* This is to enable compatibility for ISO C++17.  */
   244  # if __cplusplus >= 201703L
   245  #  define __USE_ISOC11  1
   246  # endif
   247  /* This is to enable compatibility for ISO C++11.
   248     Check the temporary macro for now, too.  */
   249  # if __cplusplus >= 201103L || defined __GXX_EXPERIMENTAL_CXX0X__
   250  #  define __USE_ISOCXX11        1
   251  #  define __USE_ISOC99  1
   252  # endif
   253  #endif
   254  
   255  /* If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
   256     is defined, use POSIX.1-2008 (or another version depending on
   257     _XOPEN_SOURCE).  */
   258  #ifdef _DEFAULT_SOURCE
   259  # if !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE
   260  #  define __USE_POSIX_IMPLICITLY        1
   261  # endif
   262  # undef  _POSIX_SOURCE
   263  # define _POSIX_SOURCE  1
   264  # undef  _POSIX_C_SOURCE
   265  # define _POSIX_C_SOURCE        200809L
   266  #endif
   267  
   268  #if ((!defined __STRICT_ANSI__                                  \
   269        || (defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) >= 500)) \
   270       && !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE)
   271  # define _POSIX_SOURCE  1
   272  # if defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 500
   273  #  define _POSIX_C_SOURCE       2
   274  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 600
   275  #  define _POSIX_C_SOURCE       199506L
   276  # elif defined _XOPEN_SOURCE && (_XOPEN_SOURCE - 0) < 700
   277  #  define _POSIX_C_SOURCE       200112L

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   278  # else
   279  #  define _POSIX_C_SOURCE       200809L
   280  # endif
   281  # define __USE_POSIX_IMPLICITLY 1
   282  #endif
   283  
   284  /* Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
   285     defined in all multithreaded code.  GNU libc has not required this
   286     for many years.  We now treat them as compatibility synonyms for
   287     _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
   288     comprehensive support for multithreaded code.  Using them never
   289     lowers the selected level of POSIX conformance, only raises it.  */
   290  #if ((!defined _POSIX_C_SOURCE || (_POSIX_C_SOURCE - 0) < 199506L) \
   291       && (defined _REENTRANT || defined _THREAD_SAFE))
   292  # define _POSIX_SOURCE   1
   293  # undef  _POSIX_C_SOURCE
   294  # define _POSIX_C_SOURCE 199506L
   295  #endif
   296  
   297  #if (defined _POSIX_SOURCE                                      \
   298       || (defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 1)       \
   299       || defined _XOPEN_SOURCE)
   300  # define __USE_POSIX    1
   301  #endif
   302  
   303  #if defined _POSIX_C_SOURCE && _POSIX_C_SOURCE >= 2 || defined _XOPEN_S
        OURCE
   304  # define __USE_POSIX2   1
   305  #endif
   306  
   307  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199309L
   308  # define __USE_POSIX199309      1
   309  #endif
   310  
   311  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 199506L
   312  # define __USE_POSIX199506      1
   313  #endif
   314  
   315  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200112L
   316  # define __USE_XOPEN2K          1
   317  # undef __USE_ISOC95
   318  # define __USE_ISOC95           1
   319  # undef __USE_ISOC99
   320  # define __USE_ISOC99           1
   321  #endif
   322  
   323  #if defined _POSIX_C_SOURCE && (_POSIX_C_SOURCE - 0) >= 200809L
   324  # define __USE_XOPEN2K8         1
   325  # undef  _ATFILE_SOURCE
   326  # define _ATFILE_SOURCE 1
   327  #endif
   328  
   329  #ifdef  _XOPEN_SOURCE
   330  # define __USE_XOPEN    1
   331  # if (_XOPEN_SOURCE - 0) >= 500
   332  #  define __USE_XOPEN_EXTENDED  1
   333  #  define __USE_UNIX98  1
   334  #  undef _LARGEFILE_SOURCE
   335  #  define _LARGEFILE_SOURCE     1
   336  #  if (_XOPEN_SOURCE - 0) >= 600
   337  #   if (_XOPEN_SOURCE - 0) >= 700
   338  #    define __USE_XOPEN2K8      1
   339  #    define __USE_XOPEN2K8XSI   1
   340  #   endif
   341  #   define __USE_XOPEN2K        1
   342  #   define __USE_XOPEN2KXSI     1
   343  #   undef __USE_ISOC95
   344  #   define __USE_ISOC95         1
   345  #   undef __USE_ISOC99
   346  #   define __USE_ISOC99         1
   347  #  endif
   348  # else
   349  #  ifdef _XOPEN_SOURCE_EXTENDED
   350  #   define __USE_XOPEN_EXTENDED 1

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   351  #  endif
   352  # endif
   353  #endif
   354  
   355  #ifdef _LARGEFILE_SOURCE
   356  # define __USE_LARGEFILE        1
   357  #endif
   358  
   359  #ifdef _LARGEFILE64_SOURCE
   360  # define __USE_LARGEFILE64      1
   361  #endif
   362  
   363  #if defined _FILE_OFFSET_BITS && _FILE_OFFSET_BITS == 64
   364  # define __USE_FILE_OFFSET64    1
   365  #endif
   366  
   367  #if defined _DEFAULT_SOURCE
   368  # define __USE_MISC     1
   369  #endif
   370  
   371  #ifdef  _ATFILE_SOURCE
   372  # define __USE_ATFILE   1
   373  #endif
   374  
   375  #ifdef  _GNU_SOURCE
   376  # define __USE_GNU      1
   377  #endif
   378  
   379  #if defined _FORTIFY_SOURCE && _FORTIFY_SOURCE > 0
   380  # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0
   381  #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)
   382  # elif !__GNUC_PREREQ (4, 1)
   383  #  warning _FORTIFY_SOURCE requires GCC 4.1 or later
   384  # elif _FORTIFY_SOURCE > 1
   385  #  define __USE_FORTIFY_LEVEL 2
   386  # else
   387  #  define __USE_FORTIFY_LEVEL 1
   388  # endif
   389  #endif
   390  #ifndef __USE_FORTIFY_LEVEL
   391  # define __USE_FORTIFY_LEVEL 0
   392  #endif
   393  
   394  /* The function 'gets' existed in C89, but is impossible to use
   395     safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
   396     compatibility with various implementations of <cstdio>, this test
   397     must consider only the value of __cplusplus when compiling C++.  */
   398  #if defined __cplusplus ? __cplusplus >= 201402L : defined __USE_ISOC11
   399  # define __GLIBC_USE_DEPRECATED_GETS 0
   400  #else
   401  # define __GLIBC_USE_DEPRECATED_GETS 1
   402  #endif
   403  
   404  /* Get definitions of __STDC_* predefined macros, if the compiler has
   405     not preincluded this header automatically.  */
   406  #include <stdc-predef.h>
   407  
   408  /* This macro indicates that the installed library is the GNU C Library
        .
   409     For historic reasons the value now is 6 and this will stay from now
   410     on.  The use of this variable is deprecated.  Use __GLIBC__ and
   411     __GLIBC_MINOR__ now (see below) when you want to test for a specific
   412     GNU C library version and use the values in <gnu/lib-names.h> to get
   413     the sonames of the shared libraries.  */
   414  #undef  __GNU_LIBRARY__
   415  #define __GNU_LIBRARY__ 6
   416  
   417  /* Major and minor version number of the GNU C library package.  Use
   418     these macros to test for features in specific releases.  */
   419  #define __GLIBC__       2
   420  #define __GLIBC_MINOR__ 28
   421  
   422  #define __GLIBC_PREREQ(maj, min) \
   423          ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   424  
   425  /* This is here only because every header file already includes this on
        e.  */
   426  #ifndef __ASSEMBLER__
   427  # ifndef _SYS_CDEFS_H
   428  #  include <sys/cdefs.h>
   429  # endif
   430  
   431  /* If we don't have __REDIRECT, prototypes will be missing if
   432     __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */
   433  # if defined __USE_FILE_OFFSET64 && !defined __REDIRECT
   434  #  define __USE_LARGEFILE       1
   435  #  define __USE_LARGEFILE64     1
   436  # endif
   437  
   438  #endif  /* !ASSEMBLER */
   439  
   440  /* Decide whether we can define 'extern inline' functions in headers.  
        */
   441  #if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \
   442      && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__ \
   443      && defined __extern_inline
   444  # define __USE_EXTERN_INLINES   1
   445  #endif
   446  
   447  
   448  /* This is here only because every header file already includes this on
        e.
   449     Get the definitions of all the appropriate `__stub_FUNCTION' symbols
        .
   450     <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a 
        stub
   451     that will always return failure (and set errno to ENOSYS).  */
   452  #include <gnu/stubs.h>
   453  
   454  
   455  #endif  /* features.h  */
Close file: /usr/include/features.h
    21  #include <features.h>
    22  
    23  #define __need_size_t
Open file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
     1  /* Copyright (C) 1989-2018 Free Software Foundation, Inc.
     2  
     3  This file is part of GCC.
     4  
     5  GCC is free software; you can redistribute it and/or modify
     6  it under the terms of the GNU General Public License as published by
     7  the Free Software Foundation; either version 3, or (at your option)
     8  any later version.
     9  
    10  GCC is distributed in the hope that it will be useful,
    11  but WITHOUT ANY WARRANTY; without even the implied warranty of
    12  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13  GNU General Public License for more details.
    14  
    15  Under Section 7 of GPL version 3, you are granted additional
    16  permissions described in the GCC Runtime Library Exception, version
    17  3.1, as published by the Free Software Foundation.
    18  
    19  You should have received a copy of the GNU General Public License and
    20  a copy of the GCC Runtime Library Exception along with this program;
    21  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
    22  <http://www.gnu.org/licenses/>.  */
    23  
    24  /*
    25   * ISO C Standard:  7.17  Common definitions  <stddef.h>
    26   */
    27  #if (!defined(_STDDEF_H) && !defined(_STDDEF_H_) && !defined(_ANSI_STDD
        EF_H) \
    28       && !defined(__STDDEF_H__)) \
    29      || defined(__need_wchar_t) || defined(__need_size_t) \
    30      || defined(__need_ptrdiff_t) || defined(__need_NULL) \
    31      || defined(__need_wint_t)

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    32  
    33  /* Any one of these symbols __need_* means that GNU libc
    34     wants us just to define one data type.  So don't define
    35     the symbols that indicate this file's entire job has been done.  */
    36  #if (!defined(__need_wchar_t) && !defined(__need_size_t)        \
    37       && !defined(__need_ptrdiff_t) && !defined(__need_NULL)     \
    38       && !defined(__need_wint_t))
    39  #define _STDDEF_H
    40  #define _STDDEF_H_
    41  /* snaroff@next.com says the NeXT needs this.  */
    42  #define _ANSI_STDDEF_H
    43  #endif
    44  
    45  #ifndef __sys_stdtypes_h
    46  /* This avoids lossage on SunOS but only if stdtypes.h comes first.
    47     There's no way to win with the other order!  Sun lossage.  */
    48  
    49  /* On 4.3bsd-net2, make sure ansi.h is included, so we have
    50     one less case to deal with in the following.  */
    51  #if defined (__BSD_NET2__) || defined (____386BSD____) || (defined (__F
        reeBSD__) && (__FreeBSD__ < 5)) || defined(__NetBSD__)
    52  #include <machine/ansi.h>
    53  #endif
    54  /* On FreeBSD 5, machine/ansi.h does not exist anymore... */
    55  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
    56  #include <sys/_types.h>
    57  #endif
    58  
    59  /* In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
    60     defined if the corresponding type is *not* defined.
    61     FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
    62     NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_
         */
    63  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_)  || defined(_I386_ANSI_H_)
    64  #if !defined(_SIZE_T_) && !defined(_BSD_SIZE_T_)
    65  #define _SIZE_T
    66  #endif
    67  #if !defined(_PTRDIFF_T_) && !defined(_BSD_PTRDIFF_T_)
    68  #define _PTRDIFF_T
    69  #endif
    70  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
    71     instead of _WCHAR_T_. */
    72  #if !defined(_WCHAR_T_) && !defined(_BSD_WCHAR_T_)
    73  #ifndef _BSD_WCHAR_T_
    74  #define _WCHAR_T
    75  #endif
    76  #endif
    77  /* Undef _FOO_T_ if we are supposed to define foo_t.  */
    78  #if defined (__need_ptrdiff_t) || defined (_STDDEF_H_)
    79  #undef _PTRDIFF_T_
    80  #undef _BSD_PTRDIFF_T_
    81  #endif
    82  #if defined (__need_size_t) || defined (_STDDEF_H_)
    83  #undef _SIZE_T_
    84  #undef _BSD_SIZE_T_
    85  #endif
    86  #if defined (__need_wchar_t) || defined (_STDDEF_H_)
    87  #undef _WCHAR_T_
    88  #undef _BSD_WCHAR_T_
    89  #endif
    90  #endif /* defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X8
        6_64_ANSI_H_) || defined(_I386_ANSI_H_) */
    91  
    92  /* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
    93     Just ignore it.  */
    94  #if defined (__sequent__) && defined (_PTRDIFF_T_)
    95  #undef _PTRDIFF_T_
    96  #endif
    97  
    98  /* On VxWorks, <type/vxTypesBase.h> may have defined macros like
    99     _TYPE_size_t which will typedef size_t.  fixincludes patched the
   100     vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   101     not defined, and so that defining this macro defines _GCC_SIZE_T.

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   102     If we find that the macros are still defined at this point, we must
   103     invoke them so that the type is defined as expected.  */
   104  #if defined (_TYPE_ptrdiff_t) && (defined (__need_ptrdiff_t) || defined
         (_STDDEF_H_))
   105  _TYPE_ptrdiff_t;
   106  #undef _TYPE_ptrdiff_t
   107  #endif
   108  #if defined (_TYPE_size_t) && (defined (__need_size_t) || defined (_STD
        DEF_H_))
   109  _TYPE_size_t;
   110  #undef _TYPE_size_t
   111  #endif
   112  #if defined (_TYPE_wchar_t) && (defined (__need_wchar_t) || defined (_S
        TDDEF_H_))
   113  _TYPE_wchar_t;
   114  #undef _TYPE_wchar_t
   115  #endif
   116  
   117  /* In case nobody has defined these types, but we aren't running under
   118     GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   119     __WCHAR_TYPE__ have reasonable values.  This can happen if the
   120     parts of GCC is compiled by an older compiler, that actually
   121     include gstddef.h, such as collect2.  */
   122  
   123  /* Signed type of difference of two pointers.  */
   124  
   125  /* Define this type if we are doing the whole job,
   126     or if we want this type in particular.  */
   127  #if defined (_STDDEF_H) || defined (__need_ptrdiff_t)
   128  #ifndef _PTRDIFF_T      /* in case <sys/types.h> has defined it. */
   129  #ifndef _T_PTRDIFF_
   130  #ifndef _T_PTRDIFF
   131  #ifndef __PTRDIFF_T
   132  #ifndef _PTRDIFF_T_
   133  #ifndef _BSD_PTRDIFF_T_
   134  #ifndef ___int_ptrdiff_t_h
   135  #ifndef _GCC_PTRDIFF_T
   136  #ifndef _PTRDIFF_T_DECLARED /* DragonFly */
   137  #define _PTRDIFF_T
   138  #define _T_PTRDIFF_
   139  #define _T_PTRDIFF
   140  #define __PTRDIFF_T
   141  #define _PTRDIFF_T_
   142  #define _BSD_PTRDIFF_T_
   143  #define ___int_ptrdiff_t_h
   144  #define _GCC_PTRDIFF_T
   145  #define _PTRDIFF_T_DECLARED
   146  #ifndef __PTRDIFF_TYPE__
   147  #define __PTRDIFF_TYPE__ long int
   148  #endif
   149  typedef __PTRDIFF_TYPE__ ptrdiff_t;
   150  #endif /* _PTRDIFF_T_DECLARED */
   151  #endif /* _GCC_PTRDIFF_T */
   152  #endif /* ___int_ptrdiff_t_h */
   153  #endif /* _BSD_PTRDIFF_T_ */
   154  #endif /* _PTRDIFF_T_ */
   155  #endif /* __PTRDIFF_T */
   156  #endif /* _T_PTRDIFF */
   157  #endif /* _T_PTRDIFF_ */
   158  #endif /* _PTRDIFF_T */
   159  
   160  /* If this symbol has done its job, get rid of it.  */
   161  #undef  __need_ptrdiff_t
   162  
   163  #endif /* _STDDEF_H or __need_ptrdiff_t.  */
   164  
   165  /* Unsigned type of `sizeof' something.  */
   166  
   167  /* Define this type if we are doing the whole job,
   168     or if we want this type in particular.  */
   169  #if defined (_STDDEF_H) || defined (__need_size_t)
   170  #ifndef __size_t__      /* BeOS */
   171  #ifndef __SIZE_T__      /* Cray Unicos/Mk */
   172  #ifndef _SIZE_T /* in case <sys/types.h> has defined it. */

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   173  #ifndef _SYS_SIZE_T_H
   174  #ifndef _T_SIZE_
   175  #ifndef _T_SIZE
   176  #ifndef __SIZE_T
   177  #ifndef _SIZE_T_
   178  #ifndef _BSD_SIZE_T_
   179  #ifndef _SIZE_T_DEFINED_
   180  #ifndef _SIZE_T_DEFINED
   181  #ifndef _BSD_SIZE_T_DEFINED_    /* Darwin */
   182  #ifndef _SIZE_T_DECLARED        /* FreeBSD 5 */
   183  #ifndef ___int_size_t_h
   184  #ifndef _GCC_SIZE_T
   185  #ifndef _SIZET_
   186  #ifndef __size_t
   187  #define __size_t__      /* BeOS */
   188  #define __SIZE_T__      /* Cray Unicos/Mk */
   189  #define _SIZE_T
   190  #define _SYS_SIZE_T_H
   191  #define _T_SIZE_
   192  #define _T_SIZE
   193  #define __SIZE_T
   194  #define _SIZE_T_
   195  #define _BSD_SIZE_T_
   196  #define _SIZE_T_DEFINED_
   197  #define _SIZE_T_DEFINED
   198  #define _BSD_SIZE_T_DEFINED_    /* Darwin */
   199  #define _SIZE_T_DECLARED        /* FreeBSD 5 */
   200  #define ___int_size_t_h
   201  #define _GCC_SIZE_T
   202  #define _SIZET_
   203  #if (defined (__FreeBSD__) && (__FreeBSD__ >= 5)) \
   204    || defined(__DragonFly__) \
   205    || defined(__FreeBSD_kernel__)
   206  /* __size_t is a typedef on FreeBSD 5, must not trash it. */
   207  #elif defined (__VMS__)
   208  /* __size_t is also a typedef on VMS.  */
   209  #else
   210  #define __size_t
   211  #endif
   212  #ifndef __SIZE_TYPE__
   213  #define __SIZE_TYPE__ long unsigned int
   214  #endif
   215  #if !(defined (__GNUG__) && defined (size_t))
   216  typedef __SIZE_TYPE__ size_t;
   217  #ifdef __BEOS__
   218  typedef long ssize_t;
   219  #endif /* __BEOS__ */
   220  #endif /* !(defined (__GNUG__) && defined (size_t)) */
   221  #endif /* __size_t */
   222  #endif /* _SIZET_ */
   223  #endif /* _GCC_SIZE_T */
   224  #endif /* ___int_size_t_h */
   225  #endif /* _SIZE_T_DECLARED */
   226  #endif /* _BSD_SIZE_T_DEFINED_ */
   227  #endif /* _SIZE_T_DEFINED */
   228  #endif /* _SIZE_T_DEFINED_ */
   229  #endif /* _BSD_SIZE_T_ */
   230  #endif /* _SIZE_T_ */
   231  #endif /* __SIZE_T */
   232  #endif /* _T_SIZE */
   233  #endif /* _T_SIZE_ */
   234  #endif /* _SYS_SIZE_T_H */
   235  #endif /* _SIZE_T */
   236  #endif /* __SIZE_T__ */
   237  #endif /* __size_t__ */
   238  #undef  __need_size_t
   239  #endif /* _STDDEF_H or __need_size_t.  */
   240  
   241  
   242  /* Wide character type.
   243     Locale-writers should change this as necessary to
   244     be big enough to hold unique values not between 0 and 127,
   245     and not (wchar_t) -1, for each defined multibyte character.  */
   246  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   247  /* Define this type if we are doing the whole job,
   248     or if we want this type in particular.  */
   249  #if defined (_STDDEF_H) || defined (__need_wchar_t)
   250  #ifndef __wchar_t__     /* BeOS */
   251  #ifndef __WCHAR_T__     /* Cray Unicos/Mk */
   252  #ifndef _WCHAR_T
   253  #ifndef _T_WCHAR_
   254  #ifndef _T_WCHAR
   255  #ifndef __WCHAR_T
   256  #ifndef _WCHAR_T_
   257  #ifndef _BSD_WCHAR_T_
   258  #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */
   259  #ifndef _BSD_RUNE_T_DEFINED_    /* Darwin */
   260  #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */
   261  #ifndef _WCHAR_T_DEFINED_
   262  #ifndef _WCHAR_T_DEFINED
   263  #ifndef _WCHAR_T_H
   264  #ifndef ___int_wchar_t_h
   265  #ifndef __INT_WCHAR_T_H
   266  #ifndef _GCC_WCHAR_T
   267  #define __wchar_t__     /* BeOS */
   268  #define __WCHAR_T__     /* Cray Unicos/Mk */
   269  #define _WCHAR_T
   270  #define _T_WCHAR_
   271  #define _T_WCHAR
   272  #define __WCHAR_T
   273  #define _WCHAR_T_
   274  #define _BSD_WCHAR_T_
   275  #define _WCHAR_T_DEFINED_
   276  #define _WCHAR_T_DEFINED
   277  #define _WCHAR_T_H
   278  #define ___int_wchar_t_h
   279  #define __INT_WCHAR_T_H
   280  #define _GCC_WCHAR_T
   281  #define _WCHAR_T_DECLARED
   282  
   283  /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   284     instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   285     symbols in the _FOO_T_ family, stays defined even after its
   286     corresponding type is defined).  If we define wchar_t, then we
   287     must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   288     we undef _WCHAR_T_, then we must also define rune_t, since 
   289     headers like runetype.h assume that if machine/ansi.h is included,
   290     and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   291     machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   292     the same type." */
   293  #ifdef _BSD_WCHAR_T_
   294  #undef _BSD_WCHAR_T_
   295  #ifdef _BSD_RUNE_T_
   296  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   297  typedef _BSD_RUNE_T_ rune_t;
   298  #define _BSD_WCHAR_T_DEFINED_
   299  #define _BSD_RUNE_T_DEFINED_    /* Darwin */
   300  #if defined (__FreeBSD__) && (__FreeBSD__ < 5)
   301  /* Why is this file so hard to maintain properly?  In contrast to
   302     the comment above regarding BSD/386 1.1, on FreeBSD for as long
   303     as the symbol has existed, _BSD_RUNE_T_ must not stay defined or
   304     redundant typedefs will occur when stdlib.h is included after this f
        ile. */
   305  #undef _BSD_RUNE_T_
   306  #endif
   307  #endif
   308  #endif
   309  #endif
   310  /* FreeBSD 5 can't be handled well using "traditional" logic above
   311     since it no longer defines _BSD_RUNE_T_ yet still desires to export
   312     rune_t in some cases... */
   313  #if defined (__FreeBSD__) && (__FreeBSD__ >= 5)
   314  #if !defined (_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
   315  #if __BSD_VISIBLE
   316  #ifndef _RUNE_T_DECLARED
   317  typedef __rune_t        rune_t;
   318  #define _RUNE_T_DECLARED
   319  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   320  #endif
   321  #endif
   322  #endif
   323  
   324  #ifndef __WCHAR_TYPE__
   325  #define __WCHAR_TYPE__ int
   326  #endif
   327  #ifndef __cplusplus
   328  typedef __WCHAR_TYPE__ wchar_t;
   329  #endif
   330  #endif
   331  #endif
   332  #endif
   333  #endif
   334  #endif
   335  #endif
   336  #endif /* _WCHAR_T_DECLARED */
   337  #endif /* _BSD_RUNE_T_DEFINED_ */
   338  #endif
   339  #endif
   340  #endif
   341  #endif
   342  #endif
   343  #endif
   344  #endif
   345  #endif /* __WCHAR_T__ */
   346  #endif /* __wchar_t__ */
   347  #undef  __need_wchar_t
   348  #endif /* _STDDEF_H or __need_wchar_t.  */
   349  
   350  #if defined (__need_wint_t)
   351  #ifndef _WINT_T
   352  #define _WINT_T
   353  
   354  #ifndef __WINT_TYPE__
   355  #define __WINT_TYPE__ unsigned int
   356  #endif
   357  typedef __WINT_TYPE__ wint_t;
   358  #endif
   359  #undef __need_wint_t
   360  #endif
   361  
   362  /*  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
   363      are already defined.  */
   364  /*  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here
        .  */
   365  /*  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.  *
        /
   366  #if defined(_ANSI_H_) || defined(_MACHINE_ANSI_H_) || defined(_X86_64_A
        NSI_H_) || defined(_I386_ANSI_H_)
   367  /*  The references to _GCC_PTRDIFF_T_, _GCC_SIZE_T_, and _GCC_WCHAR_T_
   368      are probably typos and should be removed before 2.8 is released.  *
        /
   369  #ifdef _GCC_PTRDIFF_T_
   370  #undef _PTRDIFF_T_
   371  #undef _BSD_PTRDIFF_T_
   372  #endif
   373  #ifdef _GCC_SIZE_T_
   374  #undef _SIZE_T_
   375  #undef _BSD_SIZE_T_
   376  #endif
   377  #ifdef _GCC_WCHAR_T_
   378  #undef _WCHAR_T_
   379  #undef _BSD_WCHAR_T_
   380  #endif
   381  /*  The following ones are the real ones.  */
   382  #ifdef _GCC_PTRDIFF_T
   383  #undef _PTRDIFF_T_
   384  #undef _BSD_PTRDIFF_T_
   385  #endif
   386  #ifdef _GCC_SIZE_T
   387  #undef _SIZE_T_
   388  #undef _BSD_SIZE_T_
   389  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   390  #ifdef _GCC_WCHAR_T
   391  #undef _WCHAR_T_
   392  #undef _BSD_WCHAR_T_
   393  #endif
   394  #endif /* _ANSI_H_ || _MACHINE_ANSI_H_ || _X86_64_ANSI_H_ || _I386_ANSI
        _H_ */
   395  
   396  #endif /* __sys_stdtypes_h */
   397  
   398  /* A null pointer constant.  */
   399  
   400  #if defined (_STDDEF_H) || defined (__need_NULL)
   401  #undef NULL             /* in case <stdio.h> has defined it. */
   402  #ifdef __GNUG__
   403  #define NULL __null
   404  #else   /* G++ */
   405  #ifndef __cplusplus
   406  #define NULL ((void *)0)
   407  #else   /* C++ */
   408  #define NULL 0
   409  #endif  /* C++ */
   410  #endif  /* G++ */
   411  #endif  /* NULL not defined and <stddef.h> or need NULL.  */
   412  #undef  __need_NULL
   413  
   414  #ifdef _STDDEF_H
   415  
   416  /* Offset of member MEMBER in a struct of type TYPE. */
   417  #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
   418  
   419  #if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) \
   420    || (defined(__cplusplus) && __cplusplus >= 201103L)
   421  #ifndef _GCC_MAX_ALIGN_T
   422  #define _GCC_MAX_ALIGN_T
   423  /* Type whose alignment is supported in every context and is at least
   424     as great as that of any standard type not using alignment
   425     specifiers.  */
   426  typedef struct {
   427    long long __max_align_ll __attribute__((__aligned__(__alignof__(long 
        long))));
   428    long double __max_align_ld __attribute__((__aligned__(__alignof__(lon
        g double))));
   429    /* _Float128 is defined as a basic type, so max_align_t must be
   430       sufficiently aligned for it.  This code must work in C++, so we
   431       use __float128 here; that is only available on some
   432       architectures, but only on i386 is extra alignment needed for
   433       __float128.  */
   434  #ifdef __i386__
   435    __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__fl
        oat128))));
   436  #endif
   437  } max_align_t;
   438  #endif
   439  #endif /* C11 or C++11.  */
   440  
   441  #if defined(__cplusplus) && __cplusplus >= 201103L
   442  #ifndef _GXX_NULLPTR_T
   443  #define _GXX_NULLPTR_T
   444    typedef decltype(nullptr) nullptr_t;
   445  #endif
   446  #endif /* C++11.  */
   447  
   448  #endif /* _STDDEF_H was defined this time */
   449  
   450  #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__
   451            || __need_XXX was not defined before */
Close file: /usr/lib/gcc/x86_64-redhat-linux/8/include/stddef.h
    24  #include <stddef.h>
    25  
    26  __BEGIN_DECLS
    27  
    28  /* Remove any previous definitions.  */
    29  #undef  alloca
    30  

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    31  /* Allocate a block that will be freed when the calling function exits.
          */
    32  extern void *alloca (size_t __size) __THROW;
    33  
    34  #ifdef  __GNUC__
    35  # define alloca(size)   __builtin_alloca (size)
    36  #endif /* GCC.  */
    37  
    38  __END_DECLS
    39  
    40  #endif /* alloca.h */
Close file: /usr/include/alloca.h
   566  # include <alloca.h>
   567  #endif /* Use misc.  */
   568  
   569  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K) \
   570      || defined __USE_MISC
   571  /* Allocate SIZE bytes on a page boundary.  The storage cannot be freed
        .  */
   572  extern void *valloc (size_t __size) __THROW __attribute_malloc__ __wur;
   573  #endif
   574  
   575  #ifdef __USE_XOPEN2K
   576  /* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */
   577  extern int posix_memalign (void **__memptr, size_t __alignment, size_t 
        __size)
   578       __THROW __nonnull ((1)) __wur;
   579  #endif
   580  
   581  #ifdef __USE_ISOC11
   582  /* ISO C variant of aligned allocation.  */
   583  extern void *aligned_alloc (size_t __alignment, size_t __size)
   584       __THROW __attribute_malloc__ __attribute_alloc_size__ ((2)) __wur;
   585  #endif
   586  
   587  /* Abort execution and generate a core-dump.  */
   588  extern void abort (void) __THROW __attribute__ ((__noreturn__));
   589  
   590  
   591  /* Register a function to be called when `exit' is called.  */
   592  extern int atexit (void (*__func) (void)) __THROW __nonnull ((1));
   593  
   594  #if defined __USE_ISOC11 || defined __USE_ISOCXX11
   595  /* Register a function to be called when `quick_exit' is called.  */
   596  # ifdef __cplusplus
   597  extern "C++" int at_quick_exit (void (*__func) (void))
   598       __THROW __asm ("at_quick_exit") __nonnull ((1));
   599  # else
   600  extern int at_quick_exit (void (*__func) (void)) __THROW __nonnull ((1)
        );
   601  # endif
   602  #endif
   603  
   604  #ifdef  __USE_MISC
   605  /* Register a function to be called with the status
   606     given to `exit' and the given argument.  */
   607  extern int on_exit (void (*__func) (int __status, void *__arg), void *_
        _arg)
   608       __THROW __nonnull ((1));
   609  #endif
   610  
   611  /* Call all functions registered with `atexit' and `on_exit',
   612     in the reverse of the order in which they were registered,
   613     perform stdio cleanup, and terminate program execution with STATUS. 
         */
   614  extern void exit (int __status) __THROW __attribute__ ((__noreturn__));
   615  
   616  #if defined __USE_ISOC11 || defined __USE_ISOCXX11
   617  /* Call all functions registered with `at_quick_exit' in the reverse
   618     of the order in which they were registered and terminate program
   619     execution with STATUS.  */
   620  extern void quick_exit (int __status) __THROW __attribute__ ((__noretur
        n__));
   621  #endif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   622  
   623  #ifdef __USE_ISOC99
   624  /* Terminate the program with STATUS without calling any of the
   625     functions registered with `atexit' or `on_exit'.  */
   626  extern void _Exit (int __status) __THROW __attribute__ ((__noreturn__))
        ;
   627  #endif
   628  
   629  
   630  /* Return the value of envariable NAME, or NULL if it doesn't exist.  *
        /
   631  extern char *getenv (const char *__name) __THROW __nonnull ((1)) __wur;
   632  
   633  #ifdef __USE_GNU
   634  /* This function is similar to the above but returns NULL if the
   635     programs is running with SUID or SGID enabled.  */
   636  extern char *secure_getenv (const char *__name)
   637       __THROW __nonnull ((1)) __wur;
   638  #endif
   639  
   640  #if defined __USE_MISC || defined __USE_XOPEN
   641  /* The SVID says this is in <stdio.h>, but this seems a better place.   
        */
   642  /* Put STRING, which is of the form "NAME=VALUE", in the environment.
   643     If there is no `=', remove NAME from the environment.  */
   644  extern int putenv (char *__string) __THROW __nonnull ((1));
   645  #endif
   646  
   647  #ifdef __USE_XOPEN2K
   648  /* Set NAME to VALUE in the environment.
   649     If REPLACE is nonzero, overwrite an existing value.  */
   650  extern int setenv (const char *__name, const char *__value, int __repla
        ce)
   651       __THROW __nonnull ((2));
   652  
   653  /* Remove the variable NAME from the environment.  */
   654  extern int unsetenv (const char *__name) __THROW __nonnull ((1));
   655  #endif
   656  
   657  #ifdef  __USE_MISC
   658  /* The `clearenv' was planned to be added to POSIX.1 but probably
   659     never made it.  Nevertheless the POSIX.9 standard (POSIX bindings
   660     for Fortran 77) requires this function.  */
   661  extern int clearenv (void) __THROW;
   662  #endif
   663  
   664  
   665  #if defined __USE_MISC \
   666      || (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8)
   667  /* Generate a unique temporary file name from TEMPLATE.
   668     The last six characters of TEMPLATE must be "XXXXXX";
   669     they are replaced with a string that makes the file name unique.
   670     Always returns TEMPLATE, it's either a temporary file name or a null
   671     string if it cannot get a unique file name.  */
   672  extern char *mktemp (char *__template) __THROW __nonnull ((1));
   673  #endif
   674  
   675  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
   676  /* Generate a unique temporary file name from TEMPLATE.
   677     The last six characters of TEMPLATE must be "XXXXXX";
   678     they are replaced with a string that makes the filename unique.
   679     Returns a file descriptor open on the file for reading and writing,
   680     or -1 if it cannot create a uniquely-named file.
   681  
   682     This function is a possible cancellation point and therefore not
   683     marked with __THROW.  */
   684  # ifndef __USE_FILE_OFFSET64
   685  extern int mkstemp (char *__template) __nonnull ((1)) __wur;
   686  # else
   687  #  ifdef __REDIRECT
   688  extern int __REDIRECT (mkstemp, (char *__template), mkstemp64)
   689       __nonnull ((1)) __wur;
   690  #  else
   691  #   define mkstemp mkstemp64

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   692  #  endif
   693  # endif
   694  # ifdef __USE_LARGEFILE64
   695  extern int mkstemp64 (char *__template) __nonnull ((1)) __wur;
   696  # endif
   697  #endif
   698  
   699  #ifdef __USE_MISC
   700  /* Similar to mkstemp, but the template can have a suffix after the
   701     XXXXXX.  The length of the suffix is specified in the second
   702     parameter.
   703  
   704     This function is a possible cancellation point and therefore not
   705     marked with __THROW.  */
   706  # ifndef __USE_FILE_OFFSET64
   707  extern int mkstemps (char *__template, int __suffixlen) __nonnull ((1))
         __wur;
   708  # else
   709  #  ifdef __REDIRECT
   710  extern int __REDIRECT (mkstemps, (char *__template, int __suffixlen),
   711                         mkstemps64) __nonnull ((1)) __wur;
   712  #  else
   713  #   define mkstemps mkstemps64
   714  #  endif
   715  # endif
   716  # ifdef __USE_LARGEFILE64
   717  extern int mkstemps64 (char *__template, int __suffixlen)
   718       __nonnull ((1)) __wur;
   719  # endif
   720  #endif
   721  
   722  #ifdef __USE_XOPEN2K8
   723  /* Create a unique temporary directory from TEMPLATE.
   724     The last six characters of TEMPLATE must be "XXXXXX";
   725     they are replaced with a string that makes the directory name unique
        .
   726     Returns TEMPLATE, or a null pointer if it cannot get a unique name.
   727     The directory is created mode 700.  */
   728  extern char *mkdtemp (char *__template) __THROW __nonnull ((1)) __wur;
   729  #endif
   730  
   731  #ifdef __USE_GNU
   732  /* Generate a unique temporary file name from TEMPLATE similar to
   733     mkstemp.  But allow the caller to pass additional flags which are
   734     used in the open call to create the file..
   735  
   736     This function is a possible cancellation point and therefore not
   737     marked with __THROW.  */
   738  # ifndef __USE_FILE_OFFSET64
   739  extern int mkostemp (char *__template, int __flags) __nonnull ((1)) __w
        ur;
   740  # else
   741  #  ifdef __REDIRECT
   742  extern int __REDIRECT (mkostemp, (char *__template, int __flags), mkost
        emp64)
   743       __nonnull ((1)) __wur;
   744  #  else
   745  #   define mkostemp mkostemp64
   746  #  endif
   747  # endif
   748  # ifdef __USE_LARGEFILE64
   749  extern int mkostemp64 (char *__template, int __flags) __nonnull ((1)) _
        _wur;
   750  # endif
   751  
   752  /* Similar to mkostemp, but the template can have a suffix after the
   753     XXXXXX.  The length of the suffix is specified in the second
   754     parameter.
   755  
   756     This function is a possible cancellation point and therefore not
   757     marked with __THROW.  */
   758  # ifndef __USE_FILE_OFFSET64
   759  extern int mkostemps (char *__template, int __suffixlen, int __flags)
   760       __nonnull ((1)) __wur;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   761  # else
   762  #  ifdef __REDIRECT
   763  extern int __REDIRECT (mkostemps, (char *__template, int __suffixlen,
   764                                     int __flags), mkostemps64)
   765       __nonnull ((1)) __wur;
   766  #  else
   767  #   define mkostemps mkostemps64
   768  #  endif
   769  # endif
   770  # ifdef __USE_LARGEFILE64
   771  extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
   772       __nonnull ((1)) __wur;
   773  # endif
   774  #endif
   775  
   776  
   777  /* Execute the given line as a shell command.
   778  
   779     This function is a cancellation point and therefore not marked with
   780     __THROW.  */
   781  extern int system (const char *__command) __wur;
   782  
   783  
   784  #ifdef  __USE_GNU
   785  /* Return a malloc'd string containing the canonical absolute name of t
        he
   786     existing named file.  */
   787  extern char *canonicalize_file_name (const char *__name)
   788       __THROW __nonnull ((1)) __wur;
   789  #endif
   790  
   791  #if defined __USE_MISC || defined __USE_XOPEN_EXTENDED
   792  /* Return the canonical absolute name of file NAME.  If RESOLVED is
   793     null, the result is malloc'd; otherwise, if the canonical name is
   794     PATH_MAX chars or more, returns null with `errno' set to
   795     ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,
   796     returns the name in RESOLVED.  */
   797  extern char *realpath (const char *__restrict __name,
   798                         char *__restrict __resolved) __THROW __wur;
   799  #endif
   800  
   801  
   802  /* Shorthand for type of comparison functions.  */
   803  #ifndef __COMPAR_FN_T
   804  # define __COMPAR_FN_T
   805  typedef int (*__compar_fn_t) (const void *, const void *);
   806  
   807  # ifdef __USE_GNU
   808  typedef __compar_fn_t comparison_fn_t;
   809  # endif
   810  #endif
   811  #ifdef __USE_GNU
   812  typedef int (*__compar_d_fn_t) (const void *, const void *, void *);
   813  #endif
   814  
   815  /* Do a binary search for KEY in BASE, which consists of NMEMB elements
   816     of SIZE bytes each, using COMPAR to perform the comparisons.  */
   817  extern void *bsearch (const void *__key, const void *__base,
   818                        size_t __nmemb, size_t __size, __compar_fn_t __co
        mpar)
   819       __nonnull ((1, 2, 5)) __wur;
   820  
   821  #ifdef __USE_EXTERN_INLINES
   822  # include <bits/stdlib-bsearch.h>
   823  #endif
   824  
   825  /* Sort NMEMB elements of BASE, of SIZE bytes each,
   826     using COMPAR to perform the comparisons.  */
   827  extern void qsort (void *__base, size_t __nmemb, size_t __size,
   828                     __compar_fn_t __compar) __nonnull ((1, 4));
   829  #ifdef __USE_GNU
   830  extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
   831                       __compar_d_fn_t __compar, void *__arg)
   832    __nonnull ((1, 4));

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   833  #endif
   834  
   835  
   836  /* Return the absolute value of X.  */
   837  extern int abs (int __x) __THROW __attribute__ ((__const__)) __wur;
   838  extern long int labs (long int __x) __THROW __attribute__ ((__const__))
         __wur;
   839  
   840  #ifdef __USE_ISOC99
   841  __extension__ extern long long int llabs (long long int __x)
   842       __THROW __attribute__ ((__const__)) __wur;
   843  #endif
   844  
   845  
   846  /* Return the `div_t', `ldiv_t' or `lldiv_t' representation
   847     of the value of NUMER over DENOM. */
   848  /* GCC may have built-ins for these someday.  */
   849  extern div_t div (int __numer, int __denom)
   850       __THROW __attribute__ ((__const__)) __wur;
   851  extern ldiv_t ldiv (long int __numer, long int __denom)
   852       __THROW __attribute__ ((__const__)) __wur;
   853  
   854  #ifdef __USE_ISOC99
   855  __extension__ extern lldiv_t lldiv (long long int __numer,
   856                                      long long int __denom)
   857       __THROW __attribute__ ((__const__)) __wur;
   858  #endif
   859  
   860  
   861  #if (defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K8) \
   862      || defined __USE_MISC
   863  /* Convert floating point numbers to strings.  The returned values are
   864     valid only until another call to the same function.  */
   865  
   866  /* Convert VALUE to a string with NDIGIT digits and return a pointer to
   867     this.  Set *DECPT with the position of the decimal character and *SI
        GN
   868     with the sign of the number.  */
   869  extern char *ecvt (double __value, int __ndigit, int *__restrict __decp
        t,
   870                     int *__restrict __sign) __THROW __nonnull ((3, 4)) _
        _wur;
   871  
   872  /* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DE
        CPT
   873     with the position of the decimal character and *SIGN with the sign o
        f
   874     the number.  */
   875  extern char *fcvt (double __value, int __ndigit, int *__restrict __decp
        t,
   876                     int *__restrict __sign) __THROW __nonnull ((3, 4)) _
        _wur;
   877  
   878  /* If possible convert VALUE to a string with NDIGIT significant digits
        .
   879     Otherwise use exponential representation.  The resulting string will
   880     be written to BUF.  */
   881  extern char *gcvt (double __value, int __ndigit, char *__buf)
   882       __THROW __nonnull ((3)) __wur;
   883  #endif
   884  
   885  #ifdef __USE_MISC
   886  /* Long double versions of above functions.  */
   887  extern char *qecvt (long double __value, int __ndigit,
   888                      int *__restrict __decpt, int *__restrict __sign)
   889       __THROW __nonnull ((3, 4)) __wur;
   890  extern char *qfcvt (long double __value, int __ndigit,
   891                      int *__restrict __decpt, int *__restrict __sign)
   892       __THROW __nonnull ((3, 4)) __wur;
   893  extern char *qgcvt (long double __value, int __ndigit, char *__buf)
   894       __THROW __nonnull ((3)) __wur;
   895  
   896  
   897  /* Reentrant version of the functions above which provide their own

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   898     buffers.  */
   899  extern int ecvt_r (double __value, int __ndigit, int *__restrict __decp
        t,
   900                     int *__restrict __sign, char *__restrict __buf,
   901                     size_t __len) __THROW __nonnull ((3, 4, 5));
   902  extern int fcvt_r (double __value, int __ndigit, int *__restrict __decp
        t,
   903                     int *__restrict __sign, char *__restrict __buf,
   904                     size_t __len) __THROW __nonnull ((3, 4, 5));
   905  
   906  extern int qecvt_r (long double __value, int __ndigit,
   907                      int *__restrict __decpt, int *__restrict __sign,
   908                      char *__restrict __buf, size_t __len)
   909       __THROW __nonnull ((3, 4, 5));
   910  extern int qfcvt_r (long double __value, int __ndigit,
   911                      int *__restrict __decpt, int *__restrict __sign,
   912                      char *__restrict __buf, size_t __len)
   913       __THROW __nonnull ((3, 4, 5));
   914  #endif  /* misc */
   915  
   916  
   917  /* Return the length of the multibyte character
   918     in S, which is no longer than N.  */
   919  extern int mblen (const char *__s, size_t __n) __THROW;
   920  /* Return the length of the given multibyte character,
   921     putting its `wchar_t' representation in *PWC.  */
   922  extern int mbtowc (wchar_t *__restrict __pwc,
   923                     const char *__restrict __s, size_t __n) __THROW;
   924  /* Put the multibyte character represented
   925     by WCHAR in S, returning its length.  */
   926  extern int wctomb (char *__s, wchar_t __wchar) __THROW;
   927  
   928  
   929  /* Convert a multibyte string to a wide char string.  */
   930  extern size_t mbstowcs (wchar_t *__restrict  __pwcs,
   931                          const char *__restrict __s, size_t __n) __THROW
        ;
   932  /* Convert a wide char string to multibyte string.  */
   933  extern size_t wcstombs (char *__restrict __s,
   934                          const wchar_t *__restrict __pwcs, size_t __n)
   935       __THROW;
   936  
   937  
   938  #ifdef __USE_MISC
   939  /* Determine whether the string value of RESPONSE matches the affirmati
        on
   940     or negative response expression as specified by the LC_MESSAGES cate
        gory
   941     in the program's current locale.  Returns 1 if affirmative, 0 if
   942     negative, and -1 if not matching.  */
   943  extern int rpmatch (const char *__response) __THROW __nonnull ((1)) __w
        ur;
   944  #endif
   945  
   946  
   947  #if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8
   948  /* Parse comma separated suboption from *OPTIONP and match against
   949     strings in TOKENS.  If found return index and set *VALUEP to
   950     optional value introduced by an equal sign.  If the suboption is
   951     not part of TOKENS return in *VALUEP beginning of unknown
   952     suboption.  On exit *OPTIONP is set to the beginning of the next
   953     token or at the terminating NUL character.  */
   954  extern int getsubopt (char **__restrict __optionp,
   955                        char *const *__restrict __tokens,
   956                        char **__restrict __valuep)
   957       __THROW __nonnull ((1, 2, 3)) __wur;
   958  #endif
   959  
   960  
   961  /* X/Open pseudo terminal handling.  */
   962  
   963  #ifdef __USE_XOPEN2KXSI
   964  /* Return a master pseudo-terminal handle.  */
   965  extern int posix_openpt (int __oflag) __wur;

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

   966  #endif
   967  
   968  #ifdef __USE_XOPEN_EXTENDED
   969  /* The next four functions all take a master pseudo-tty fd and
   970     perform an operation on the associated slave:  */
   971  
   972  /* Chown the slave to the calling user.  */
   973  extern int grantpt (int __fd) __THROW;
   974  
   975  /* Release an internal lock so the slave can be opened.
   976     Call after grantpt().  */
   977  extern int unlockpt (int __fd) __THROW;
   978  
   979  /* Return the pathname of the pseudo terminal slave associated with
   980     the master FD is open on, or NULL on errors.
   981     The returned storage is good until the next call to this function.  
        */
   982  extern char *ptsname (int __fd) __THROW __wur;
   983  #endif
   984  
   985  #ifdef __USE_GNU
   986  /* Store at most BUFLEN characters of the pathname of the slave pseudo
   987     terminal associated with the master FD is open on in BUF.
   988     Return 0 on success, otherwise an error number.  */
   989  extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
   990       __THROW __nonnull ((2));
   991  
   992  /* Open a master pseudo terminal and return its file descriptor.  */
   993  extern int getpt (void);
   994  #endif
   995  
   996  #ifdef __USE_MISC
   997  /* Put the 1 minute, 5 minute and 15 minute load averages into the firs
        t
   998     NELEM elements of LOADAVG.  Return the number written (never more th
        an
   999     three, but may be less than NELEM), or -1 if an error occurred.  */
  1000  extern int getloadavg (double __loadavg[], int __nelem)
  1001       __THROW __nonnull ((1));
  1002  #endif
  1003  
  1004  #if defined __USE_XOPEN_EXTENDED && !defined __USE_XOPEN2K
  1005  /* Return the index into the active-logins file (utmp) for
  1006     the controlling terminal.  */
  1007  extern int ttyslot (void) __THROW;
  1008  #endif
  1009  
Open file: /usr/include/bits/stdlib-float.h
     1  /* Floating-point inline functions for stdlib.h.
     2     Copyright (C) 2012-2018 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library.
     4  
     5     The GNU C Library is free software; you can redistribute it and/or
     6     modify it under the terms of the GNU Lesser General Public
     7     License as published by the Free Software Foundation; either
     8     version 2.1 of the License, or (at your option) any later version.
     9  
    10     The GNU C Library is distributed in the hope that it will be useful,
    11     but WITHOUT ANY WARRANTY; without even the implied warranty of
    12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    13     Lesser General Public License for more details.
    14  
    15     You should have received a copy of the GNU Lesser General Public
    16     License along with the GNU C Library; if not, see
    17     <http://www.gnu.org/licenses/>.  */
    18  
    19  #ifndef _STDLIB_H
    20  # error "Never use <bits/stdlib-float.h> directly; include <stdlib.h> i
        nstead."
    21  #endif
    22  
    23  #ifdef __USE_EXTERN_INLINES
    24  __extern_inline double
    25  __NTH (atof (const char *__nptr))

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    26  {
    27    return strtod (__nptr, (char **) NULL);
    28  }
    29  #endif /* Optimizing and Inlining.  */
Close file: /usr/include/bits/stdlib-float.h
  1010  #include <bits/stdlib-float.h>
  1011  
  1012  /* Define some macros helping to catch buffer overflows.  */
  1013  #if __USE_FORTIFY_LEVEL > 0 && defined __fortify_function
  1014  # include <bits/stdlib.h>
  1015  #endif
  1016  #ifdef __LDBL_COMPAT
  1017  # include <bits/stdlib-ldbl.h>
  1018  #endif
  1019  
  1020  __END_DECLS
  1021  
  1022  #endif /* stdlib.h  */
Close file: /usr/include/stdlib.h
     4  #include <stdlib.h>
     5  
Open file: /workspaces/liborm/connection/include/connection/types.h
     1  #ifndef LIBORM_CONNECTION_TYPES_H
     2  #define LIBORM_CONNECTION_TYPES_H
     3  
     4  enum connection_error {
     5          NO_CONNECTION_ERROR = 0, /**< no error */
     6          DATABASE_ERROR, /**< DBAPI error */
     7  };
     8  
     9  #define conn_error enum connection_error
    10  
    11  #endif
Close file: /workspaces/liborm/connection/include/connection/types.h
     6  #include "connection/types.h"
Open file: /workspaces/liborm/connection/include/connection/cursor_c.h
     1  #ifndef LIBORM_CONNECTION_CURSOR_C_H
     2  #define LIBORM_CONNECTION_CURSOR_C_H
     3  
     4  // defined later for avoid circular dependencies
     5  // #include "connection/types.h"
     6  
     7  typedef struct Cursor Cursor;
     8  
     9  #ifdef __cplusplus
    10  extern "C" {
    11  #endif
    12  
    13  struct connection_state cursor_open(Cursor* c);
    14  struct connection_state cursor_close(Cursor* c);
    15  void free_cursor(Cursor* c);
    16  
    17  unsigned cursor_nfields(Cursor *c);
    18  unsigned cursor_ntuples(Cursor *c);
    19  unsigned cursor_changes(Cursor *c);
    20  
    21  #ifdef __cplusplus
    22  }
    23  #endif
    24  
    25  #endif
Close file: /workspaces/liborm/connection/include/connection/cursor_c.h
     7  #include "connection/cursor_c.h"
     8  
     9  #ifndef ORA_PROC
    10  #include <stdbool.h>
    11  #elif

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

Error at line 12, column 9 in file /workspaces/liborm/connection/include/connec
tion/state.h
    12  typedef char bool;
    12  ........1
    12  PCC-S-02201, Encountered the symbol "char" when expecting one of the fo
        llowing:
        
           ( * ? | & < > + - / % ^ || && == != <= >= << >>
        
    13  #endif
    14  
Error at line 15, column 25 in file /workspaces/liborm/connection/include/conne
ction/state.h
    15  struct connection_state {
    15  ........................1
    15  PCC-S-02201, Encountered the symbol "{" when expecting one of the follo
        wing:
        
           ; , = ( [
        
    16          enum connection_error error;
Error at line 17, column 7 in file /workspaces/liborm/connection/include/connec
tion/state.h
    17          bool tuples_ok; /**< if ok, connection can be fetched, it doesn
        t mean some rows have to be returned */
    17  ......1
    17  PCC-S-02201, Encountered the symbol "tuples_ok" when expecting one of t
        he following:
        
           ; , = : ( [ * ? | & < > + - / % . ^ *= /= %= += -= <<= >>=
           &&= ||= ^= | & == != <= >= << >> ++ -- ->
        The symbol ";" was substituted for "tuples_ok" to continue.
        
    18          unsigned changes;
    19          Cursor* cursor; /**< No access to this memeber if tuples_ok = f
        alse */
    20  };
    21  
    22  #define INIT_CONNECTION_STATE {\
    23          .error = NO_CONNECTION_ERROR,\
    24          .tuples_ok = false,\
    25          .changes = 0,\
    26          .cursor = NULL\
    27  }
    28  
    29  #endif
Close file: /workspaces/liborm/connection/include/connection/state.h
    18  #include "connection/state.h"
    19  
    20  #endif
Close file: /workspaces/liborm/connection/include/connection.h
     7  #include "connection.h"
     8  
     9  struct connection_state
Error at line 10, column 57 in file /workspaces/liborm/driver/oracle/src/close.
pc
    10  driver_ora_close(struct oracle_connection_data* dbconn) {
    10  ........................................................1
    10  PCC-S-02201, Encountered the symbol "{" when expecting one of the follo
        wing:
        
           ; , = ( [
        The symbol ";" was substituted for "{" to continue.
        
    11          struct connection_state db_stat = {0};
    12  
    13          EXEC SQL BEGIN DECLARE SECTION;
    14          sql_context ctx = dbconn->ctx;
    15          unsigned char* database = dbconn->dbname;
    16          unsigned char* input_descriptor = dbconn->input_descriptor;
    17          unsigned char* output_descriptor = dbconn->output_descriptor;
    18          EXEC SQL END DECLARE SECTION;
    19  
    20          // Nasty dragon

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.

    21          EXEC SQL CONTEXT USE :ctx;
    22          EXEC SQL DEALLOCATE DESCRIPTOR GLOBAL :input_descriptor;
    23          if(sqlca.sqlcode) {
    24                  db_stat.error = DATABASE_ERROR;
    25                  return db_stat;
    26          }
    27          EXEC SQL DEALLOCATE DESCRIPTOR GLOBAL :output_descriptor;
    28          if(sqlca.sqlcode) {
    29                  db_stat.error = DATABASE_ERROR;
    30                  return db_stat;
    31          }
    32  
    33          EXEC SQL AT :database ROLLBACK WORK RELEASE;
    34          if(sqlca.sqlcode) {
    35                  db_stat.error = DATABASE_ERROR;
    36                  return db_stat;
    37          }
    38  
    39          EXEC SQL CONTEXT FREE :ctx;
    40          dbconn->ctx = NULL;
    41  
    42          return db_stat;
    43  }
Close file: /workspaces/liborm/driver/oracle/src/close.pc

Pro*C/C++: Release 21.0.0.0.0 - Production on Mon Dec 27 22:43:34 2021
Version 21.3.0.0.0

Copyright (c) 1982, 2021, Oracle and/or its affiliates.  All rights reserved.



                              Precompiler Options
-------------------------------------------------------------------------------
Option Name    Current Value        Where set
-------------------------------------------------------------------------------
auto_connect      no                default                                     
char_map          charz             default                                     
close_on_commit   yes               mode                                        
cmax              100               default                                     
cmin              2                 default                                     
cincr             1                 default                                     
ctimeout          0                 default                                     
cnowait           0                 default                                     
common_parser     no                default                                     
code              ANSI_C            /workspaces/liborm/driver/oracle/proc.cfg   
comp_charset      multi_byte        default                                     
config            /workspaces/libormcommand linele/proc.cfg                     
cpool             no                default                                     
cpp_suffix        *none*            default                                     
db2_array         no                default                                     
dbms              native            default                                     
def_sqlcode       no                default                                     
define            __x86_64__        /workspaces/liborm/driver/oracle/proc.cfg   
                  __x86_64__        /workspaces/liborm/driver/oracle/proc.cfg   
                  *none*            /workspaces/liborm/driver/oracle/proc.cfg   
duration          transaction       default                                     
dynamic           ansi              mode                                        
errors            yes               default                                     
errtype           *none*            default                                     
events            no                default                                     
fips              none              default                                     
header            *none*            default                                     
hold_cursor       no                default                                     
implicit_svpt     no                default                                     
iname             /workspaces/libormcommand linele/src/close.pc                 
include           /workspaces/libormcommand linede                              
                  /workspaces/libormcommand lineinclude                         
                  /workspaces/libormcommand linele/include                      
                  /workspaces/libormcommand linele/private                      
                  *none*            command line                                
intype            *none*            default                                     
lines             yes               /workspaces/liborm/driver/oracle/proc.cfg   
lname             *none*            default                                     
ltype             long              /workspaces/liborm/driver/oracle/proc.cfg   
maxliteral        1024              default                                     
maxopencursors    10                default                                     
max_row_insert    0                 default                                     
mode              ANSI              /workspaces/liborm/driver/oracle/proc.cfg   
memforprefetch    0                 default                                     
native_types      no                default                                     
nls_char          *none*            default                                     
nls_local         no                default                                     
objects           yes               default                                     
oname             /workspaces/libormcommand liner/oracle/close.c                
oraca             no                default                                     
outline           no                default                                     
outlnprefix       *none*            default                                     
pagelen           80                default                                     
parse             full              default                                     
plan_baseline     no                default                                     
plan_enabled      yes               default                                     
plan_fixed        yes               default                                     
plan_prefix       none              default                                     
plan_run          no                default                                     
prefetch          1                 default                                     
release_cursor    no                default                                     
runoutline        no                default                                     
select_error      yes               default                                     
sqlcheck          syntax            default                                     
stmt_cache        0                 default                                     
sys_include       /usr/lib/gcc/x86_6/workspaces/liborm/driver/oracle/proc.cfg   
                  /usr/include      /workspaces/liborm/driver/oracle/proc.cfg   
                  $ORACLE_HOME/preco/workspaces/liborm/driver/oracle/proc.cfg   
                  $ORACLE_HOME/sdk/i/workspaces/liborm/driver/oracle/proc.cfg   
threads           yes               /workspaces/liborm/driver/oracle/proc.cfg   
trim_password     no                default                                     
type_code         ANSI              /workspaces/liborm/driver/oracle/proc.cfg   
unsafe_null       no                default                                     
userid            *none*            default                                     
utf16_charset     nchar_charset     default                                     
varchar           no                default                                     
version           recent            default                                     
exclude_files     *none*            default                                     
exclude_dir       *none*            default                                     
